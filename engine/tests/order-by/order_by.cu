
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>

#include <CalciteExpressionParsing.h>
#include <CalciteInterpreter.h>
#include <DataFrame.h>
#include <blazingdb/io/Util/StringUtil.h>
#include <gtest/gtest.h>
#include <GDFColumn.cuh>
#include <GDFCounter.cuh>
#include <Utils.cuh>

#include "gdf/library/api.h"
using namespace gdf::library;
#include "../BlazingUnitTest.h"

struct EvaluateQueryTest : public BlazingUnitTest {
  struct InputTestItem {
    std::string query;
    std::string logicalPlan;
    gdf::library::TableGroup tableGroup;
    gdf::library::Table resultTable;
  };
  
  void SetUp() {
    
  }

  void CHECK_RESULT(gdf::library::Table& computed_solution,
                    gdf::library::Table& reference_solution) {
    computed_solution.print(std::cout);
    reference_solution.print(std::cout);

    for (size_t index = 0; index < reference_solution.size(); index++) {
      const auto& reference_column = reference_solution[index];
      const auto& computed_column = computed_solution[index];
      auto a = reference_column.to_string();
      auto b = computed_column.to_string();
      EXPECT_EQ(a, b);
    }
  }
};

// AUTO GENERATED UNIT TESTS
TEST_F(EvaluateQueryTest, TEST_00) {
  auto input = InputTestItem{
      .query =
          "select c_custkey, c_acctbal from main.customer order by c_acctbal",
      .logicalPlan =
          "LogicalSort(sort0=[$1], dir0=[ASC])\n  "
          "LogicalProject(c_custkey=[$0], c_acctbal=[$5])\n    "
          "LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64",
                Literals<GDF_INT64>{
                    128, 37,  136, 109, 64,  71,  104, 98,  72,  11,  125, 33,
                    17,  2,   132, 66,  41,  47,  120, 138, 22,  62,  1,   5,
                    51,  54,  126, 28,  114, 92,  35,  40,  21,  89,  61,  69,
                    77,  124, 81,  148, 97,  93,  143, 142, 108, 133, 107, 60,
                    10,  103, 74,  15,  4,   113, 112, 106, 86,  146, 23,  85,
                    12,  59,  32,  118, 48,  150, 13,  119, 117, 99,  53,  57,
                    50,  73,  55,  49,  134, 91,  16,  70,  36,  130, 79,  84,
                    26,  31,  14,  95,  18,  94,  52,  27,  46,  76,  123, 39,
                    96,  87,  38,  144, 121, 83,  58,  111, 56,  75,  141, 8,
                    68,  25,  78,  44,  90,  80,  110, 101, 3,   115, 20,  29,
                    6,   137, 122, 139, 88,  147, 67,  9,   116, 102, 34,  131,
                    42,  135, 65,  19,  149, 105, 129, 24,  127, 30,  63,  82,
                    7,   145, 100, 43,  140, 45}},
               {"GDF_FLOAT64",
                Literals<GDF_FLOAT64>{
                    -986.96, -917.75, -842.39, -716.1,  -646.64, -611.19,
                    -588.38, -551.37, -362.86, -272.6,  -234.12, -78.56,
                    6.34,    121.65,  162.57,  242.77,  270.95,  274.58,
                    363.75,  430.59,  591.98,  595.61,  711.56,  794.47,
                    855.87,  868.9,   1001.39, 1007.18, 1027.46, 1182.91,
                    1228.24, 1335.3,  1428.25, 1530.76, 1536.24, 1709.28,
                    1738.87, 1842.49, 2023.71, 2135.6,  2164.48, 2182.52,
                    2186.5,  2209.81, 2259.38, 2314.67, 2514.15, 2741.87,
                    2753.54, 2757.45, 2764.43, 2788.52, 2866.83, 2912.0,
                    2953.35, 3288.42, 3306.32, 3328.68, 3332.02, 3386.64,
                    3396.49, 3458.6,  3471.53, 3582.37, 3792.5,  3849.48,
                    3857.34, 3930.35, 3950.83, 4088.65, 4113.64, 4151.93,
                    4266.13, 4288.5,  4572.11, 4573.94, 4608.9,  4643.14,
                    4681.03, 4867.52, 4987.27, 5073.58, 5121.28, 5174.71,
                    5182.05, 5236.89, 5266.3,  5327.38, 5494.43, 5500.11,
                    5630.28, 5679.84, 5744.59, 5745.33, 5897.83, 6264.31,
                    6323.92, 6327.54, 6345.11, 6417.31, 6428.32, 6463.51,
                    6478.46, 6505.26, 6530.86, 6684.1,  6706.14, 6819.74,
                    6853.37, 7133.7,  7136.97, 7315.94, 7354.23, 7383.53,
                    7462.99, 7470.96, 7498.12, 7508.92, 7603.4,  7618.27,
                    7638.57, 7838.3,  7865.46, 7897.78, 8031.44, 8071.4,
                    8166.59, 8324.07, 8403.99, 8462.17, 8589.7,  8595.53,
                    8727.01, 8732.91, 8795.16, 8914.71, 8959.65, 9091.82,
                    9127.27, 9255.67, 9280.71, 9321.01, 9331.13, 9468.34,
                    9561.95, 9748.93, 9889.89, 9904.28, 9963.15, 9983.38}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_01) {
  auto input = InputTestItem{
      .query =
          "select c_custkey, c_nationkey, c_acctbal from main.customer order "
          "by c_acctbal",
      .logicalPlan =
          "LogicalSort(sort0=[$2], dir0=[ASC])\n  "
          "LogicalProject(c_custkey=[$0], c_nationkey=[$3], c_acctbal=[$5])\n  "
          "  LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64",
                Literals<GDF_INT64>{
                    128, 37,  136, 109, 64,  71,  104, 98,  72,  11,  125, 33,
                    17,  2,   132, 66,  41,  47,  120, 138, 22,  62,  1,   5,
                    51,  54,  126, 28,  114, 92,  35,  40,  21,  89,  61,  69,
                    77,  124, 81,  148, 97,  93,  143, 142, 108, 133, 107, 60,
                    10,  103, 74,  15,  4,   113, 112, 106, 86,  146, 23,  85,
                    12,  59,  32,  118, 48,  150, 13,  119, 117, 99,  53,  57,
                    50,  73,  55,  49,  134, 91,  16,  70,  36,  130, 79,  84,
                    26,  31,  14,  95,  18,  94,  52,  27,  46,  76,  123, 39,
                    96,  87,  38,  144, 121, 83,  58,  111, 56,  75,  141, 8,
                    68,  25,  78,  44,  90,  80,  110, 101, 3,   115, 20,  29,
                    6,   137, 122, 139, 88,  147, 67,  9,   116, 102, 34,  131,
                    42,  135, 65,  19,  149, 105, 129, 24,  127, 30,  63,  82,
                    7,   145, 100, 43,  140, 45}},
               {"GDF_INT64",
                Literals<GDF_INT64>{
                    4,  8,  7,  16, 3,  7,  10, 12, 2,  23, 19, 17, 2,  13, 4,
                    22, 10, 2,  12, 5,  3,  7,  15, 3,  12, 4,  22, 8,  14, 2,
                    17, 3,  8,  14, 17, 9,  17, 18, 20, 11, 17, 7,  16, 9,  5,
                    17, 15, 12, 5,  9,  4,  23, 4,  12, 19, 1,  0,  3,  3,  5,
                    13, 1,  15, 18, 0,  18, 3,  7,  24, 15, 15, 21, 6,  0,  10,
                    10, 11, 8,  10, 22, 21, 9,  15, 11, 22, 23, 1,  15, 6,  9,
                    11, 3,  6,  0,  5,  2,  8,  23, 12, 1,  17, 22, 13, 22, 10,
                    18, 1,  17, 12, 12, 9,  16, 16, 0,  10, 2,  1,  8,  22, 0,
                    20, 16, 3,  9,  16, 18, 9,  8,  16, 19, 15, 11, 5,  19, 23,
                    18, 19, 10, 7,  13, 21, 1,  21, 18, 18, 13, 20, 19, 4,  9}},
               {"GDF_FLOAT64",
                Literals<GDF_FLOAT64>{
                    -986.96, -917.75, -842.39, -716.1,  -646.64, -611.19,
                    -588.38, -551.37, -362.86, -272.6,  -234.12, -78.56,
                    6.34,    121.65,  162.57,  242.77,  270.95,  274.58,
                    363.75,  430.59,  591.98,  595.61,  711.56,  794.47,
                    855.87,  868.9,   1001.39, 1007.18, 1027.46, 1182.91,
                    1228.24, 1335.3,  1428.25, 1530.76, 1536.24, 1709.28,
                    1738.87, 1842.49, 2023.71, 2135.6,  2164.48, 2182.52,
                    2186.5,  2209.81, 2259.38, 2314.67, 2514.15, 2741.87,
                    2753.54, 2757.45, 2764.43, 2788.52, 2866.83, 2912.0,
                    2953.35, 3288.42, 3306.32, 3328.68, 3332.02, 3386.64,
                    3396.49, 3458.6,  3471.53, 3582.37, 3792.5,  3849.48,
                    3857.34, 3930.35, 3950.83, 4088.65, 4113.64, 4151.93,
                    4266.13, 4288.5,  4572.11, 4573.94, 4608.9,  4643.14,
                    4681.03, 4867.52, 4987.27, 5073.58, 5121.28, 5174.71,
                    5182.05, 5236.89, 5266.3,  5327.38, 5494.43, 5500.11,
                    5630.28, 5679.84, 5744.59, 5745.33, 5897.83, 6264.31,
                    6323.92, 6327.54, 6345.11, 6417.31, 6428.32, 6463.51,
                    6478.46, 6505.26, 6530.86, 6684.1,  6706.14, 6819.74,
                    6853.37, 7133.7,  7136.97, 7315.94, 7354.23, 7383.53,
                    7462.99, 7470.96, 7498.12, 7508.92, 7603.4,  7618.27,
                    7638.57, 7838.3,  7865.46, 7897.78, 8031.44, 8071.4,
                    8166.59, 8324.07, 8403.99, 8462.17, 8589.7,  8595.53,
                    8727.01, 8732.91, 8795.16, 8914.71, 8959.65, 9091.82,
                    9127.27, 9255.67, 9280.71, 9321.01, 9331.13, 9468.34,
                    9561.95, 9748.93, 9889.89, 9904.28, 9963.15, 9983.38}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_02) {
  auto input = InputTestItem{
      .query =
          "select c_custkey, c_nationkey, c_acctbal from main.customer order "
          "by c_nationkey, c_acctbal",
      .logicalPlan =
          "LogicalSort(sort0=[$1], sort1=[$2], dir0=[ASC], dir1=[ASC])\n  "
          "LogicalProject(c_custkey=[$0], c_nationkey=[$3], c_acctbal=[$5])\n  "
          "  LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64",
                Literals<GDF_INT64>{
                    86,  48,  73,  76,  80,  29,  106, 59,  14,  144, 141, 3,
                    30,  72,  17,  47,  92,  39,  101, 64,  22,  5,   40,  146,
                    23,  13,  27,  122, 128, 132, 54,  74,  4,   140, 138, 108,
                    10,  85,  123, 42,  50,  18,  46,  136, 71,  62,  93,  119,
                    129, 37,  28,  21,  91,  96,  115, 9,   69,  142, 103, 130,
                    94,  78,  139, 67,  45,  104, 41,  55,  49,  16,  56,  110,
                    105, 148, 134, 84,  52,  131, 98,  120, 51,  60,  113, 38,
                    68,  25,  2,   12,  58,  24,  145, 114, 89,  1,   107, 32,
                    99,  53,  79,  95,  34,  109, 143, 44,  90,  137, 88,  116,
                    33,  35,  61,  77,  97,  133, 121, 8,   124, 118, 150, 75,
                    147, 19,  82,  7,   125, 112, 102, 135, 149, 43,  81,  6,
                    100, 57,  36,  127, 63,  66,  126, 70,  26,  83,  111, 20,
                    11,  15,  31,  87,  65,  117}},
               {"GDF_INT64",
                Literals<GDF_INT64>{
                    0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,
                    2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,
                    4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,
                    6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,
                    9,  9,  9,  9,  9,  9,  9,  9,  9,  10, 10, 10, 10, 10,
                    10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12,
                    12, 12, 13, 13, 13, 13, 13, 14, 14, 15, 15, 15, 15, 15,
                    15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17,
                    17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19,
                    19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22,
                    22, 22, 22, 22, 23, 23, 23, 23, 23, 24}},
               {"GDF_FLOAT64",
                Literals<GDF_FLOAT64>{
                    3306.32, 3792.5,  4288.5,  5745.33, 7383.53, 7618.27,
                    3288.42, 3458.6,  5266.3,  6417.31, 6706.14, 7498.12,
                    9321.01, -362.86, 6.34,    274.58,  1182.91, 6264.31,
                    7470.96, -646.64, 591.98,  794.47,  1335.3,  3328.68,
                    3332.02, 3857.34, 5679.84, 7865.46, -986.96, 162.57,
                    868.9,   2764.43, 2866.83, 9963.15, 430.59,  2259.38,
                    2753.54, 3386.64, 5897.83, 8727.01, 4266.13, 5494.43,
                    5744.59, -842.39, -611.19, 595.61,  2182.52, 3930.35,
                    9127.27, -917.75, 1007.18, 1428.25, 4643.14, 6323.92,
                    7508.92, 8324.07, 1709.28, 2209.81, 2757.45, 5073.58,
                    5500.11, 7136.97, 7897.78, 8166.59, 9983.38, -588.38,
                    270.95,  4572.11, 4573.94, 4681.03, 6530.86, 7462.99,
                    9091.82, 2135.6,  4608.9,  5174.71, 5630.28, 8595.53,
                    -551.37, 363.75,  855.87,  2741.87, 2912.0,  6345.11,
                    6853.37, 7133.7,  121.65,  3396.49, 6478.46, 9255.67,
                    9748.93, 1027.46, 1530.76, 711.56,  2514.15, 3471.53,
                    4088.65, 4113.64, 5121.28, 5327.38, 8589.7,  -716.1,
                    2186.5,  7315.94, 7354.23, 7838.3,  8031.44, 8403.99,
                    -78.56,  1228.24, 1536.24, 1738.87, 2164.48, 2314.67,
                    6428.32, 6819.74, 1842.49, 3582.37, 3849.48, 6684.1,
                    8071.4,  8914.71, 9468.34, 9561.95, -234.12, 2953.35,
                    8462.17, 8732.91, 8959.65, 9904.28, 2023.71, 7638.57,
                    9889.89, 4151.93, 4987.27, 9280.71, 9331.13, 242.77,
                    1001.39, 4867.52, 5182.05, 6463.51, 6505.26, 7603.4,
                    -272.6,  2788.52, 5236.89, 6327.54, 8795.16, 3950.83}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_03) {
  auto input = InputTestItem{
      .query =
          "select c_custkey + c_nationkey, c_acctbal from main.customer order "
          "by 1, 2",
      .logicalPlan =
          "LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC], dir1=[ASC])\n  "
          "LogicalProject(EXPR$0=[+($0, $3)], c_acctbal=[$5])\n    "
          "LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64",
                Literals<GDF_INT64>{
                    4,   8,   8,   15,  15,  15,  16,  16,  17,  19,  24,  25,
                    25,  25,  25,  26,  26,  26,  29,  29,  30,  31,  34,  36,
                    37,  37,  37,  38,  41,  42,  43,  45,  47,  47,  48,  48,
                    49,  49,  50,  50,  51,  52,  52,  54,  54,  56,  57,  58,
                    59,  60,  60,  62,  63,  63,  65,  66,  67,  68,  69,  71,
                    72,  73,  74,  76,  76,  78,  78,  78,  78,  78,  80,  80,
                    84,  86,  87,  88,  88,  90,  92,  93,  94,  94,  94,  95,
                    99,  100, 100, 101, 103, 103, 103, 104, 104, 105, 106, 107,
                    110, 110, 110, 112, 113, 114, 114, 114, 115, 120, 120, 121,
                    122, 123, 125, 125, 125, 126, 128, 128, 131, 132, 132, 132,
                    133, 136, 136, 136, 138, 139, 141, 142, 142, 142, 143, 143,
                    144, 144, 145, 145, 148, 148, 148, 149, 150, 151, 153, 154,
                    158, 159, 159, 165, 168, 168}},
               {"GDF_FLOAT64",
                Literals<GDF_FLOAT64>{
                    7498.12, 794.47,  2866.83, 121.65,  2753.54, 5266.3,
                    711.56,  3857.34, 8324.07, 6.34,    5494.43, 591.98,
                    3396.49, 6819.74, 9561.95, 3332.02, 4681.03, 7638.57,
                    1428.25, 7618.27, 5679.84, 9321.01, -272.6,  1007.18,
                    7133.7,  8914.71, 9255.67, 2788.52, 6264.31, 7603.4,
                    1335.3,  -917.75, 3471.53, 8727.01, 3792.5,  5182.05,
                    274.58,  8589.7,  -78.56,  6345.11, 270.95,  1228.24,
                    5744.59, 5236.89, 9983.38, 4266.13, 4987.27, 868.9,
                    4573.94, 3458.6,  7315.94, 9904.28, 855.87,  5630.28,
                    4572.11, 6530.86, -646.64, 4113.64, 595.61,  6478.46,
                    2741.87, 4288.5,  -362.86, 5745.33, 8166.59, -611.19,
                    1536.24, 1709.28, 2764.43, 4151.93, 6853.37, 7383.53,
                    9331.13, 3306.32, 7136.97, 242.77,  8795.16, 3386.64,
                    4867.52, 6684.1,  1182.91, 1738.87, 5121.28, 5174.71,
                    4643.14, 2182.52, 9468.34, 2023.71, 1530.76, 5500.11,
                    7470.96, 6323.92, 8031.44, 6463.51, 7354.23, 3288.42,
                    -551.37, 5327.38, 6327.54, 2757.45, 2259.38, -588.38,
                    2164.48, 4088.65, 9091.82, 7462.99, 9889.89, 8462.17,
                    2514.15, 7508.92, -716.1,  2912.0,  7865.46, 3930.35,
                    1027.46, 5897.83, 2953.35, -986.96, 363.75,  8403.99,
                    6505.26, 162.57,  3582.37, 9127.27, 6428.32, 5073.58,
                    3950.83, 1842.49, 6706.14, 8595.53, -842.39, 430.59,
                    -234.12, 9963.15, 4608.9,  6417.31, 1001.39, 7897.78,
                    9280.71, 3328.68, 2314.67, 2209.81, 7838.3,  8732.91,
                    9748.93, 2135.6,  2186.5,  8071.4,  3849.48, 8959.65}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_04) {
  auto input = InputTestItem{
      .query =
          "select c_custkey + c_nationkey, c_acctbal, c_custkey - c_nationkey "
          "from main.customer where c_custkey < 25 AND c_nationkey > 5 order "
          "by c_nationkey, c_custkey",
      .logicalPlan =
          "LogicalProject(EXPR$0=[$0], c_acctbal=[$1], EXPR$2=[$2])\n  "
          "LogicalSort(sort0=[$3], sort1=[$4], dir0=[ASC], dir1=[ASC])\n    "
          "LogicalProject(EXPR$0=[+($0, $3)], c_acctbal=[$5], EXPR$2=[-($0, "
          "$3)], c_nationkey=[$3], c_custkey=[$0])\n      "
          "LogicalFilter(condition=[AND(<($0, 25), >($3, 5))])\n        "
          "LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64", Literals<GDF_INT64>{24, 17, 29, 26, 15, 25, 37, 16,
                                                 25, 25, 37, 26, 42, 34, 38}},
               {"GDF_FLOAT64",
                Literals<GDF_FLOAT64>{5494.43, 8324.07, 1428.25, 4681.03,
                                      121.65, 3396.49, 9255.67, 711.56, 6819.74,
                                      9561.95, 8914.71, 7638.57, 7603.4, -272.6,
                                      2788.52}},
               {"GDF_INT64",
                Literals<GDF_INT64>{12, 1, 13, 6, -11, -1, 11, -14, -9, -11, 1,
                                    -14, -2, -12, -8}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_05) {
  auto input = InputTestItem{
      .query =
          "select c_acctbal, c_custkey from main.customer where c_custkey < 25 "
          "AND c_nationkey > 5 AND c_acctbal > 500 order by c_acctbal",
      .logicalPlan =
          "LogicalSort(sort0=[$0], dir0=[ASC])\n  "
          "LogicalProject(c_acctbal=[$5], c_custkey=[$0])\n    "
          "LogicalFilter(condition=[AND(<($0, 25), >($3, 5), >($5, 500))])\n   "
          "   LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_FLOAT64",
                Literals<GDF_FLOAT64>{711.56, 1428.25, 2788.52, 3396.49,
                                      4681.03, 5494.43, 6819.74, 7603.4,
                                      7638.57, 8324.07, 8914.71, 9255.67,
                                      9561.95}},
               {"GDF_INT64", Literals<GDF_INT64>{1, 21, 15, 12, 16, 18, 8, 20,
                                                 6, 9, 19, 24, 7}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_06) {
  auto input = InputTestItem{
      .query =
          "select c_custkey, c_nationkey from main.customer where c_custkey < "
          "25 order by c_nationkey, c_custkey",
      .logicalPlan =
          "LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[ASC])\n  "
          "LogicalProject(c_custkey=[$0], c_nationkey=[$3])\n    "
          "LogicalFilter(condition=[<($0, 25)])\n      "
          "LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64",
                Literals<GDF_INT64>{3,  14, 17, 5,  13, 22, 23, 4,
                                    10, 18, 9,  21, 16, 2,  12, 24,
                                    1,  8,  7,  19, 6,  20, 11, 15}},
               {"GDF_INT64",
                Literals<GDF_INT64>{1,  1,  2,  3,  3,  3,  3,  4,
                                    5,  6,  8,  8,  10, 13, 13, 13,
                                    15, 17, 18, 18, 20, 22, 23, 23}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}
TEST_F(EvaluateQueryTest, TEST_07) {
  auto input = InputTestItem{
      .query =
          "select c_custkey, c_nationkey from main.customer where c_custkey < "
          "25 order by 2,1",
      .logicalPlan =
          "LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC], dir1=[ASC])\n  "
          "LogicalProject(c_custkey=[$0], c_nationkey=[$3])\n    "
          "LogicalFilter(condition=[<($0, 25)])\n      "
          "LogicalTableScan(table=[[main, customer]])",
      .tableGroup =
          LiteralTableGroupBuilder{
              {"main.customer",
               {{"c_custkey",
                 Literals<GDF_INT32>{
                     1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,  12,
                     13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,
                     25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,
                     37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,
                     49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
                     61,  62,  63,  64,  65,  66,  67,  68,  69,  70,  71,  72,
                     73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,  84,
                     85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,
                     97,  98,  99,  100, 101, 102, 103, 104, 105, 106, 107, 108,
                     109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
                     121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
                     133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144,
                     145, 146, 147, 148, 149, 150}},
                {"c_name",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_address",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_nationkey",
                 Literals<GDF_INT32>{
                     15, 13, 1,  4,  3,  20, 18, 17, 8,  5,  23, 13, 3,  1,
                     23, 10, 2,  6,  18, 22, 8,  3,  3,  13, 12, 22, 3,  8,
                     0,  1,  23, 15, 17, 15, 17, 21, 8,  12, 2,  3,  10, 5,
                     19, 16, 9,  6,  2,  0,  10, 6,  12, 11, 15, 4,  10, 10,
                     21, 13, 1,  12, 17, 7,  21, 3,  23, 22, 9,  12, 9,  22,
                     7,  2,  0,  4,  18, 0,  17, 9,  15, 0,  20, 18, 22, 11,
                     5,  0,  23, 16, 14, 16, 8,  2,  7,  9,  15, 8,  17, 12,
                     15, 20, 2,  19, 9,  10, 10, 1,  15, 5,  16, 10, 22, 19,
                     12, 14, 8,  16, 24, 18, 7,  12, 17, 3,  5,  18, 19, 22,
                     21, 4,  7,  9,  11, 4,  17, 11, 19, 7,  16, 5,  9,  4,
                     1,  9,  16, 1,  13, 3,  18, 11, 19, 18}},
                {"c_phone",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_acctbal",
                 Literals<GDF_FLOAT32>{
                     711.56,  121.65,  7498.12, 2866.83, 794.47,  7638.57,
                     9561.95, 6819.74, 8324.07, 2753.54, -272.6,  3396.49,
                     3857.34, 5266.3,  2788.52, 4681.03, 6.34,    5494.43,
                     8914.71, 7603.4,  1428.25, 591.98,  3332.02, 9255.67,
                     7133.7,  5182.05, 5679.84, 1007.18, 7618.27, 9321.01,
                     5236.89, 3471.53, -78.56,  8589.7,  1228.24, 4987.27,
                     -917.75, 6345.11, 6264.31, 1335.3,  270.95,  8727.01,
                     9904.28, 7315.94, 9983.38, 5744.59, 274.58,  3792.5,
                     4573.94, 4266.13, 855.87,  5630.28, 4113.64, 868.9,
                     4572.11, 6530.86, 4151.93, 6478.46, 3458.6,  2741.87,
                     1536.24, 595.61,  9331.13, -646.64, 8795.16, 242.77,
                     8166.59, 6853.37, 1709.28, 4867.52, -611.19, -362.86,
                     4288.5,  2764.43, 6684.1,  5745.33, 1738.87, 7136.97,
                     5121.28, 7383.53, 2023.71, 9468.34, 6463.51, 5174.71,
                     3386.64, 3306.32, 6327.54, 8031.44, 1530.76, 7354.23,
                     4643.14, 1182.91, 2182.52, 5500.11, 5327.38, 6323.92,
                     2164.48, -551.37, 4088.65, 9889.89, 7470.96, 8462.17,
                     2757.45, -588.38, 9091.82, 3288.42, 2514.15, 2259.38,
                     -716.1,  7462.99, 6505.26, 2953.35, 2912.0,  1027.46,
                     7508.92, 8403.99, 3950.83, 3582.37, 3930.35, 363.75,
                     6428.32, 7865.46, 5897.83, 1842.49, -234.12, 1001.39,
                     9280.71, -986.96, 9127.27, 5073.58, 8595.53, 162.57,
                     2314.67, 4608.9,  8732.91, -842.39, 7838.3,  430.59,
                     7897.78, 9963.15, 6706.14, 2209.81, 2186.5,  6417.31,
                     9748.93, 3328.68, 8071.4,  2135.6,  8959.65, 3849.48}},
                {"c_mktsegment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
                {"c_comment",
                 Literals<GDF_INT64>{
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}}}}
              .Build(),
      .resultTable =
          LiteralTableBuilder{
              "ResultSet",
              {{"GDF_INT64",
                Literals<GDF_INT64>{3,  14, 17, 5,  13, 22, 23, 4,
                                    10, 18, 9,  21, 16, 2,  12, 24,
                                    1,  8,  7,  19, 6,  20, 11, 15}},
               {"GDF_INT64",
                Literals<GDF_INT64>{1,  1,  2,  3,  3,  3,  3,  4,
                                    5,  6,  8,  8,  10, 13, 13, 13,
                                    15, 17, 18, 18, 20, 22, 23, 23}}}}
              .Build()};
  auto logical_plan = input.logicalPlan;
  auto input_tables = input.tableGroup.ToBlazingFrame();
  auto table_names = input.tableGroup.table_names();
  auto column_names = input.tableGroup.column_names();
  std::vector<gdf_column_cpp> outputs;
  gdf_error err = evaluate_query(input_tables, table_names, column_names,
                                 logical_plan, outputs);
  EXPECT_TRUE(err == GDF_SUCCESS);
  auto output_table =
      GdfColumnCppsTableBuilder{"output_table", outputs}.Build();
  CHECK_RESULT(output_table, input.resultTable);
}

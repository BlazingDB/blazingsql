<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="CSVParser_8cpp" kind="file" language="C++">
    <compoundname>CSVParser.cpp</compoundname>
    <includes refid="CSVParser_8h" local="yes">CSVParser.h</includes>
    <includes local="no">arrow/buffer.h</includes>
    <includes local="no">arrow/io/memory.h</includes>
    <includes local="no">numeric</includes>
    <includes local="no">blazingdb/io/Library/Logging/Logger.h</includes>
    <includes refid="ArgsUtil_8h" local="yes">ArgsUtil.h</includes>
    <incdepgraph>
      <node id="5519">
        <label>blazingdb/io/Library/Logging/Logger.h</label>
      </node>
      <node id="5488">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="5489" relation="include">
        </childnode>
        <childnode refid="5490" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5485" relation="include">
        </childnode>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5492" relation="include">
        </childnode>
        <childnode refid="5494" relation="include">
        </childnode>
      </node>
      <node id="5511">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="5509">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="5496">
        <label>cstdint</label>
      </node>
      <node id="5492">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="5493" relation="include">
        </childnode>
        <childnode refid="5489" relation="include">
        </childnode>
        <childnode refid="5490" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5485" relation="include">
        </childnode>
        <childnode refid="5486" relation="include">
        </childnode>
      </node>
      <node id="5514">
        <label>cudf/io/datasource.hpp</label>
      </node>
      <node id="5516">
        <label>arrow/buffer.h</label>
      </node>
      <node id="5518">
        <label>numeric</label>
      </node>
      <node id="5485">
        <label>string</label>
      </node>
      <node id="5512">
        <label>map</label>
      </node>
      <node id="5505">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="5494">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5485" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5487" relation="include">
        </childnode>
        <childnode refid="5495" relation="include">
        </childnode>
        <childnode refid="5497" relation="include">
        </childnode>
        <childnode refid="5488" relation="include">
        </childnode>
      </node>
      <node id="5482">
        <label>CSVParser.h</label>
        <link refid="CSVParser_8h_source"/>
        <childnode refid="5483" relation="include">
        </childnode>
        <childnode refid="5502" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5514" relation="include">
        </childnode>
        <childnode refid="5515" relation="include">
        </childnode>
      </node>
      <node id="5502">
        <label>../data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="5503" relation="include">
        </childnode>
        <childnode refid="5504" relation="include">
        </childnode>
        <childnode refid="5505" relation="include">
        </childnode>
        <childnode refid="5506" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5508" relation="include">
        </childnode>
        <childnode refid="5509" relation="include">
        </childnode>
        <childnode refid="5487" relation="include">
        </childnode>
        <childnode refid="5510" relation="include">
        </childnode>
        <childnode refid="5511" relation="include">
        </childnode>
        <childnode refid="5512" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5513" relation="include">
        </childnode>
        <childnode refid="5488" relation="include">
        </childnode>
      </node>
      <node id="5503">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="5490">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="5517">
        <label>arrow/io/memory.h</label>
      </node>
      <node id="5484">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="5485" relation="include">
        </childnode>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5487" relation="include">
        </childnode>
        <childnode refid="5488" relation="include">
        </childnode>
      </node>
      <node id="5507">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="5510">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="5504">
        <label>spdlog/async.h</label>
      </node>
      <node id="5498">
        <label>stack</label>
      </node>
      <node id="5486">
        <label>vector</label>
      </node>
      <node id="5495">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="5496" relation="include">
        </childnode>
      </node>
      <node id="5500">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="5506">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="5497">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="5486" relation="include">
        </childnode>
        <childnode refid="5485" relation="include">
        </childnode>
        <childnode refid="5498" relation="include">
        </childnode>
        <childnode refid="5499" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5500" relation="include">
        </childnode>
      </node>
      <node id="5483">
        <label>DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="5484" relation="include">
        </childnode>
        <childnode refid="5501" relation="include">
        </childnode>
        <childnode refid="5502" relation="include">
        </childnode>
        <childnode refid="5488" relation="include">
        </childnode>
        <childnode refid="5507" relation="include">
        </childnode>
        <childnode refid="5491" relation="include">
        </childnode>
        <childnode refid="5486" relation="include">
        </childnode>
      </node>
      <node id="5487">
        <label>cudf/types.hpp</label>
      </node>
      <node id="5520">
        <label>ArgsUtil.h</label>
        <link refid="ArgsUtil_8h_source"/>
        <childnode refid="5521" relation="include">
        </childnode>
        <childnode refid="5522" relation="include">
        </childnode>
        <childnode refid="5523" relation="include">
        </childnode>
        <childnode refid="5515" relation="include">
        </childnode>
        <childnode refid="5514" relation="include">
        </childnode>
      </node>
      <node id="5523">
        <label>cudf/io/orc.hpp</label>
      </node>
      <node id="5521">
        <label>io/io.h</label>
      </node>
      <node id="5501">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="5515">
        <label>cudf/io/csv.hpp</label>
      </node>
      <node id="5493">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="5499">
        <label>mutex</label>
      </node>
      <node id="5513">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="5481">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/CSVParser.cpp</label>
        <link refid="CSVParser_8cpp"/>
        <childnode refid="5482" relation="include">
        </childnode>
        <childnode refid="5516" relation="include">
        </childnode>
        <childnode refid="5517" relation="include">
        </childnode>
        <childnode refid="5518" relation="include">
        </childnode>
        <childnode refid="5519" relation="include">
        </childnode>
        <childnode refid="5520" relation="include">
        </childnode>
      </node>
      <node id="5489">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="5522">
        <label>cudf/io/json.hpp</label>
      </node>
      <node id="5508">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="5491">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1io">ral::io</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="CSVParser_8cpp_1a25a058551bb4f4fa8f4e613d5dc87c3f" prot="public" static="no">
        <name>checkError</name>
        <param><defname>error</defname></param>
        <param><defname>txt</defname></param>
        <initializer>if(error != GDF_SUCCESS) {                                                                                         \
		std::cerr &lt;&lt; &quot;ERROR:  &quot; &lt;&lt; error &lt;&lt; &quot;  in &quot; &lt;&lt; txt &lt;&lt; std::endl;                                               \
		return error;                                                                                                  \
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/CSVParser.cpp" line="16" column="9" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/CSVParser.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>CSVParser.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Nov<sp/>29,<sp/>2018</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>felipe</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CSVParser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/buffer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/io/memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Library/Logging/Logger.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ArgsUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>checkError(error,<sp/>txt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(error<sp/>!=<sp/>GDF_SUCCESS)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;ERROR:<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>in<sp/>&quot;<sp/>&lt;&lt;<sp/>txt<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceio" kindref="compound">io</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">csv_parser::csv_parser(std::map&lt;std::string,<sp/>std::string&gt;<sp/>args_map_)<sp/>:<sp/>args_map{args_map_}<sp/>{}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">csv_parser::~csv_parser()<sp/>{}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>csv_parser::parse_batch(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structral_1_1io_1_1data__handle" kindref="compound">ral::io::data_handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Schema<sp/>&amp;<sp/>schema,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>column_indices,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cudf::size_type&gt;<sp/>row_groups)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;<sp/>file<sp/>=<sp/>handle.file_handle;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schema.makeEmptyBlazingTable(column_indices);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(column_indices.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>column_indices<sp/>into<sp/>use_col_indexes<sp/>(at<sp/>the<sp/>moment<sp/>is<sp/>ordered<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_source<sp/>=<sp/>cudf::io::arrow_io_source{file};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::io::csv_reader_options<sp/>args<sp/>=<sp/>getCsvReaderOptions(args_map,<sp/>arrow_source);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_use_cols_indexes(column_indices);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.get_header()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_header(args.get_header());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args_map[</highlight><highlight class="stringliteral">&quot;has_header_csv&quot;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_header(0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>args.set_header(-1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overrride<sp/>`byte_range_offset`<sp/>and<sp/>`byte_range_size`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>args_map.find(</highlight><highlight class="stringliteral">&quot;max_bytes_chunk_read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iter<sp/>!=<sp/>args_map.end()<sp/>&amp;&amp;<sp/>!row_groups.empty())<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chunk_size<sp/>=<sp/>std::stoll(iter-&gt;second);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_byte_range_offset(chunk_size<sp/>*<sp/>row_groups[0]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_byte_range_size(chunk_size);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::io::table_with_metadata<sp/>csv_table<sp/>=<sp/>cudf::io::read_csv(args);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csv_table.tbl-&gt;num_columns()<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Library::Logging::Logger().logWarn(</highlight><highlight class="stringliteral">&quot;csv_parser::parse<sp/>no<sp/>columns<sp/>were<sp/>read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>column_indices<sp/>may<sp/>be<sp/>requested<sp/>in<sp/>a<sp/>specific<sp/>order<sp/>(not<sp/>necessarily<sp/>sorted),<sp/>but<sp/>read_csv<sp/>will<sp/>output<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>columns<sp/>in<sp/>the<sp/>sorted<sp/>order,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>put<sp/>them<sp/>back<sp/>into<sp/>the<sp/>order<sp/>we<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>idx(column_indices.size());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iota(idx.begin(),<sp/>idx.end(),<sp/>0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort<sp/>indexes<sp/>based<sp/>on<sp/>comparing<sp/>values<sp/>in<sp/>column_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(idx.begin(),<sp/>idx.end(),<sp/>[&amp;column_indices](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i1,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i2)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>column_indices[i1]<sp/>&lt;<sp/>column_indices[i2];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::unique_ptr&lt;cudf::column&gt;<sp/>&gt;<sp/>columns_out;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>column_names_out;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns_out.resize(column_indices.size());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>column_names_out.resize(column_indices.size());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::unique_ptr&lt;cudf::column&gt;<sp/>&gt;<sp/>table<sp/>=<sp/>csv_table.tbl-&gt;release();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>column_indices.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns_out[idx[i]]<sp/>=<sp/>std::move(table[i]);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>column_names_out[idx[i]]<sp/>=<sp/>csv_table.metadata.column_names[i];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;CudfTable&gt;<sp/>cudf_tb<sp/>=<sp/>std::make_unique&lt;CudfTable&gt;(std::move(columns_out));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;ral::frame::BlazingTable&gt;(std::move(cudf_tb),<sp/>column_names_out);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>csv_parser::parse_schema(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;<sp/>file,<sp/><ref refid="classral_1_1io_1_1Schema" kindref="compound">ral::io::Schema</ref><sp/>&amp;<sp/>schema)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_source<sp/>=<sp/>cudf::io::arrow_io_source{file};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::csv_reader_options<sp/>args<sp/>=<sp/>getCsvReaderOptions(args_map,<sp/>arrow_source);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>names<sp/>were<sp/>not<sp/>passed<sp/>when<sp/>create_table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(args.get_header()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema.set_has_header_csv(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>num_bytes<sp/>=<sp/>file-&gt;GetSize().ValueOrDie();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lets<sp/>only<sp/>read<sp/>up<sp/>to<sp/>48192<sp/>bytes.<sp/>We<sp/>are<sp/>assuming<sp/>that<sp/>a<sp/>full<sp/>row<sp/>will<sp/>always<sp/>be<sp/>less<sp/>than<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_bytes<sp/>&gt;<sp/>48192)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_nrows(1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args.set_skipfooter(0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::table_with_metadata<sp/>table_out<sp/>=<sp/>cudf::io::read_csv(args);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>file-&gt;Close();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table_out.tbl-&gt;num_columns();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::type_id<sp/>type<sp/>=<sp/>table_out.tbl-&gt;get_column(i).type().id();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_in_file<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>table_out.metadata.column_names.at(i);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema.add_column(name,<sp/>type,<sp/>file_index,<sp/>is_in_file);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>csv_parser::max_bytes_chunk_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>args_map.find(</highlight><highlight class="stringliteral">&quot;max_bytes_chunk_read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iter<sp/>==<sp/>args_map.end())<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::stoll(iter-&gt;second);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>io<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>ral<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/CSVParser.cpp"/>
  </compounddef>
</doxygen>

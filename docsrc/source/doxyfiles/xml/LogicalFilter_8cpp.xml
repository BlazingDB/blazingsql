<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="LogicalFilter_8cpp" kind="file" language="C++">
    <compoundname>LogicalFilter.cpp</compoundname>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes local="no">cudf/stream_compaction.hpp</includes>
    <includes local="no">cudf/copying.hpp</includes>
    <includes refid="LogicalFilter_8h" local="yes">LogicalFilter.h</includes>
    <includes refid="LogicalProject_8h" local="yes">LogicalProject.h</includes>
    <includes refid="expression__utils_8hpp" local="yes">parser/expression_utils.hpp</includes>
    <includes refid="error_8hpp" local="yes">error.hpp</includes>
    <incdepgraph>
      <node id="3952">
        <label>LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="3953" relation="include">
        </childnode>
        <childnode refid="3954" relation="include">
        </childnode>
        <childnode refid="3950" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3955" relation="include">
        </childnode>
        <childnode refid="3957" relation="include">
        </childnode>
      </node>
      <node id="3960">
        <label>cstdint</label>
      </node>
      <node id="3955">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="3956" relation="include">
        </childnode>
        <childnode refid="3953" relation="include">
        </childnode>
        <childnode refid="3954" relation="include">
        </childnode>
        <childnode refid="3950" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
        <childnode refid="3946" relation="include">
        </childnode>
      </node>
      <node id="3949">
        <label>transport/Node.h</label>
        <link refid="Node_8h_source"/>
        <childnode refid="3950" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
      </node>
      <node id="3943">
        <label>cudf/copying.hpp</label>
      </node>
      <node id="3967">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="3968" relation="include">
        </childnode>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3969" relation="include">
        </childnode>
        <childnode refid="3970" relation="include">
        </childnode>
      </node>
      <node id="3940">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/LogicalFilter.cpp</label>
        <link refid="LogicalFilter_8cpp"/>
        <childnode refid="3941" relation="include">
        </childnode>
        <childnode refid="3942" relation="include">
        </childnode>
        <childnode refid="3943" relation="include">
        </childnode>
        <childnode refid="3944" relation="include">
        </childnode>
        <childnode refid="3964" relation="include">
        </childnode>
        <childnode refid="3965" relation="include">
        </childnode>
        <childnode refid="3967" relation="include">
        </childnode>
      </node>
      <node id="3951">
        <label>string</label>
      </node>
      <node id="3966">
        <label>cudf/aggregation.hpp</label>
      </node>
      <node id="3947">
        <label>map</label>
      </node>
      <node id="3942">
        <label>cudf/stream_compaction.hpp</label>
      </node>
      <node id="3957">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
        <childnode refid="3950" relation="include">
        </childnode>
        <childnode refid="3958" relation="include">
        </childnode>
        <childnode refid="3959" relation="include">
        </childnode>
        <childnode refid="3961" relation="include">
        </childnode>
        <childnode refid="3952" relation="include">
        </childnode>
      </node>
      <node id="3970">
        <label>exception</label>
      </node>
      <node id="3945">
        <label>execution_graph/Context.h</label>
        <link refid="Context_8h_source"/>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3947" relation="include">
        </childnode>
        <childnode refid="3948" relation="include">
        </childnode>
        <childnode refid="3949" relation="include">
        </childnode>
      </node>
      <node id="3941">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="3965">
        <label>parser/expression_utils.hpp</label>
        <link refid="expression__utils_8hpp_source"/>
        <childnode refid="3947" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3958" relation="include">
        </childnode>
        <childnode refid="3966" relation="include">
        </childnode>
      </node>
      <node id="3954">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="3964">
        <label>LogicalProject.h</label>
        <link refid="LogicalProject_8h_source"/>
        <childnode refid="3945" relation="include">
        </childnode>
        <childnode refid="3952" relation="include">
        </childnode>
        <childnode refid="3955" relation="include">
        </childnode>
      </node>
      <node id="3962">
        <label>stack</label>
      </node>
      <node id="3946">
        <label>vector</label>
      </node>
      <node id="3959">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="3960" relation="include">
        </childnode>
      </node>
      <node id="3963">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="3961">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="3946" relation="include">
        </childnode>
        <childnode refid="3951" relation="include">
        </childnode>
        <childnode refid="3962" relation="include">
        </childnode>
        <childnode refid="3948" relation="include">
        </childnode>
        <childnode refid="3950" relation="include">
        </childnode>
        <childnode refid="3963" relation="include">
        </childnode>
      </node>
      <node id="3958">
        <label>cudf/types.hpp</label>
      </node>
      <node id="3968">
        <label>iostream</label>
      </node>
      <node id="3956">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="3948">
        <label>mutex</label>
      </node>
      <node id="3953">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="3969">
        <label>cudf/utilities/error.hpp</label>
      </node>
      <node id="3950">
        <label>memory</label>
      </node>
      <node id="3944">
        <label>LogicalFilter.h</label>
        <link refid="LogicalFilter_8h_source"/>
        <childnode refid="3945" relation="include">
        </childnode>
        <childnode refid="3952" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1processor">ral::processor</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cudf/stream_compaction.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cudf/copying.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogicalFilter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogicalProject.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parser/expression_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">processor<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>LOGICAL_FILTER<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LogicalFilter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>INNER_JOIN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inner&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>LEFT_JOIN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;left&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>RIGHT_JOIN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;right&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>OUTER_JOIN<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;full&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_logical_filter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>query_part)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>query_part.find(LOGICAL_FILTER)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>applyBooleanFilter(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref><sp/>&amp;<sp/>table,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CudfColumnView<sp/>&amp;<sp/>boolValues){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filteredTable<sp/>=<sp/>cudf::apply_boolean_mask(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>table.view(),boolValues);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;ral::frame::BlazingTable&gt;(std::move(</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>filteredTable),table.names());</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>process_filter(</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref><sp/>&amp;<sp/>table_view,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>query_part,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="classblazingdb_1_1manager_1_1Context" kindref="compound">blazingdb::manager::Context</ref><sp/>*<sp/></highlight><highlight class="comment">/*context*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(table_view.num_rows()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;ral::frame::BlazingTable&gt;(cudf::empty_like(table_view.view()),<sp/>table_view.names());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::string<sp/>conditional_expression<sp/>=<sp/>get_named_expression(query_part,<sp/></highlight><highlight class="stringliteral">&quot;condition&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(conditional_expression.empty())<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conditional_expression<sp/>=<sp/>get_named_expression(query_part,<sp/></highlight><highlight class="stringliteral">&quot;filters&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ral::frame::BlazingColumn&gt;&gt;<sp/>evaluated_table<sp/>=<sp/>evaluate_expressions(table_view.view(),<sp/>{conditional_expression});</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>RAL_EXPECTS(evaluated_table.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>evaluated_table[0]-&gt;view().type().id()<sp/>==<sp/>cudf::type_id::BOOL8,<sp/></highlight><highlight class="stringliteral">&quot;Expression<sp/>does<sp/>not<sp/>evaluate<sp/>to<sp/>a<sp/>boolean<sp/>mask&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>applyBooleanFilter(table_view,<sp/>evaluated_table[0]-&gt;view());</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;blazingdb::transport::Node,<sp/>std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>&gt;<sp/>NodeColumn;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;blazingdb::transport::Node,<sp/>ral::frame::BlazingTableView<sp/>&gt;<sp/>NodeColumnView;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_if_has_nulls(CudfTableView<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>input,<sp/>std::vector&lt;cudf::size_type&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>keys){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keys_view<sp/>=<sp/>input.select(keys);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keys_view.num_columns()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>keys_view.num_rows()<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>cudf::has_nulls(keys_view))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>processor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ral</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/LogicalFilter.cpp"/>
  </compounddef>
</doxygen>

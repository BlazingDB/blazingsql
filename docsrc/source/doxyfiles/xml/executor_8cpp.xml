<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="executor_8cpp" kind="file" language="C++">
    <compoundname>executor.cpp</compoundname>
    <includes refid="executor_8h" local="yes">executor.h</includes>
    <incdepgraph>
      <node id="4456">
        <label>atomic</label>
      </node>
      <node id="4495">
        <label>config/GPUManager.cuh</label>
      </node>
      <node id="4490">
        <label>rmm/mr/device/managed_memory_resource.hpp</label>
      </node>
      <node id="4528">
        <label>functional</label>
      </node>
      <node id="4531">
        <label>queue</label>
      </node>
      <node id="4455">
        <label>execution_graph/logic_controllers/CacheMachine.h</label>
        <link refid="CacheMachine_8h_source"/>
        <childnode refid="4456" relation="include">
        </childnode>
        <childnode refid="4457" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4461" relation="include">
        </childnode>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4463" relation="include">
        </childnode>
        <childnode refid="4467" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
        <childnode refid="4480" relation="include">
        </childnode>
        <childnode refid="4482" relation="include">
        </childnode>
        <childnode refid="4498" relation="include">
        </childnode>
        <childnode refid="4466" relation="include">
        </childnode>
        <childnode refid="4499" relation="include">
        </childnode>
        <childnode refid="4509" relation="include">
        </childnode>
        <childnode refid="4512" relation="include">
        </childnode>
        <childnode refid="4521" relation="include">
        </childnode>
        <childnode refid="4522" relation="include">
        </childnode>
      </node>
      <node id="4469">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="4470" relation="include">
        </childnode>
        <childnode refid="4471" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4472" relation="include">
        </childnode>
        <childnode refid="4474" relation="include">
        </childnode>
      </node>
      <node id="4507">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="4512">
        <label>communication/messages/GPUComponentMessage.h</label>
        <link refid="GPUComponentMessage_8h_source"/>
        <childnode refid="4461" relation="include">
        </childnode>
        <childnode refid="4500" relation="include">
        </childnode>
        <childnode refid="4501" relation="include">
        </childnode>
        <childnode refid="4502" relation="include">
        </childnode>
        <childnode refid="4475" relation="include">
        </childnode>
        <childnode refid="4481" relation="include">
        </childnode>
        <childnode refid="4513" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4514" relation="include">
        </childnode>
        <childnode refid="4515" relation="include">
        </childnode>
        <childnode refid="4516" relation="include">
        </childnode>
        <childnode refid="4517" relation="include">
        </childnode>
        <childnode refid="4473" relation="include">
        </childnode>
        <childnode refid="4518" relation="include">
        </childnode>
        <childnode refid="4519" relation="include">
        </childnode>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4520" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
        <childnode refid="4474" relation="include">
        </childnode>
      </node>
      <node id="4496">
        <label>sys/sysinfo.h</label>
      </node>
      <node id="4505">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="4450">
        <label>kernel_type.h</label>
        <link refid="kernel__type_8h_source"/>
        <childnode refid="4451" relation="include">
        </childnode>
      </node>
      <node id="4476">
        <label>cstdint</label>
      </node>
      <node id="4488">
        <label>rmm/mr/device/owning_wrapper.hpp</label>
      </node>
      <node id="4493">
        <label>rmm/mr/device/logging_resource_adaptor.hpp</label>
      </node>
      <node id="4472">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="4473" relation="include">
        </childnode>
        <childnode refid="4470" relation="include">
        </childnode>
        <childnode refid="4471" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
      </node>
      <node id="4481">
        <label>transport/Node.h</label>
        <link refid="Node_8h_source"/>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
      </node>
      <node id="4516">
        <label>cudf/copying.hpp</label>
      </node>
      <node id="4463">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="4464" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4465" relation="include">
        </childnode>
        <childnode refid="4466" relation="include">
        </childnode>
      </node>
      <node id="4483">
        <label>cassert</label>
      </node>
      <node id="4489">
        <label>rmm/mr/device/cuda_memory_resource.hpp</label>
      </node>
      <node id="4492">
        <label>rmm/mr/device/arena_memory_resource.hpp</label>
      </node>
      <node id="4514">
        <label>numeric</label>
      </node>
      <node id="4486">
        <label>rmm/cuda_stream_view.hpp</label>
      </node>
      <node id="4447">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/taskflow/executor.cpp</label>
        <link refid="executor_8cpp"/>
        <childnode refid="4448" relation="include">
        </childnode>
      </node>
      <node id="4451">
        <label>string</label>
      </node>
      <node id="4460">
        <label>map</label>
      </node>
      <node id="4518">
        <label>cudf/null_mask.hpp</label>
      </node>
      <node id="4524">
        <label>kpair.h</label>
        <link refid="kpair_8h_source"/>
        <childnode refid="4452" relation="include">
        </childnode>
        <childnode refid="4449" relation="include">
        </childnode>
      </node>
      <node id="4501">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="4474">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4475" relation="include">
        </childnode>
        <childnode refid="4477" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
      </node>
      <node id="4466">
        <label>exception</label>
      </node>
      <node id="4522">
        <label>WaitingQueue.h</label>
        <link refid="WaitingQueue_8h_source"/>
        <childnode refid="4456" relation="include">
        </childnode>
        <childnode refid="4457" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4461" relation="include">
        </childnode>
        <childnode refid="4466" relation="include">
        </childnode>
      </node>
      <node id="4480">
        <label>execution_graph/Context.h</label>
        <link refid="Context_8h_source"/>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4481" relation="include">
        </childnode>
      </node>
      <node id="4521">
        <label>CacheData.h</label>
        <link refid="CacheData_8h_source"/>
        <childnode refid="4456" relation="include">
        </childnode>
        <childnode refid="4457" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4461" relation="include">
        </childnode>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4463" relation="include">
        </childnode>
        <childnode refid="4467" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
        <childnode refid="4480" relation="include">
        </childnode>
        <childnode refid="4482" relation="include">
        </childnode>
        <childnode refid="4498" relation="include">
        </childnode>
        <childnode refid="4466" relation="include">
        </childnode>
        <childnode refid="4499" relation="include">
        </childnode>
        <childnode refid="4509" relation="include">
        </childnode>
        <childnode refid="4512" relation="include">
        </childnode>
      </node>
      <node id="4499">
        <label>io/data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="4461" relation="include">
        </childnode>
        <childnode refid="4500" relation="include">
        </childnode>
        <childnode refid="4501" relation="include">
        </childnode>
        <childnode refid="4502" relation="include">
        </childnode>
        <childnode refid="4503" relation="include">
        </childnode>
        <childnode refid="4504" relation="include">
        </childnode>
        <childnode refid="4505" relation="include">
        </childnode>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4506" relation="include">
        </childnode>
        <childnode refid="4507" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4508" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
      </node>
      <node id="4520">
        <label>cudf/strings/strings_column_view.hpp</label>
      </node>
      <node id="4461">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="4471">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="4527">
        <label>utilities/ctpl_stl.h</label>
        <link refid="ctpl__stl_8h_source"/>
        <childnode refid="4528" relation="include">
        </childnode>
        <childnode refid="4529" relation="include">
        </childnode>
        <childnode refid="4456" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4466" relation="include">
        </childnode>
        <childnode refid="4530" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4531" relation="include">
        </childnode>
      </node>
      <node id="4510">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4462" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
      </node>
      <node id="4503">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="4458">
        <label>condition_variable</label>
      </node>
      <node id="4526">
        <label>ExceptionHandling/BlazingThread.h</label>
      </node>
      <node id="4513">
        <label>communication/messages/MessageUtil.cuh</label>
      </node>
      <node id="4497">
        <label>sys/statvfs.h</label>
      </node>
      <node id="4506">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="4515">
        <label>tuple</label>
      </node>
      <node id="4530">
        <label>future</label>
      </node>
      <node id="4500">
        <label>spdlog/async.h</label>
      </node>
      <node id="4449">
        <label>kernel.h</label>
        <link refid="kernel_8h_source"/>
        <childnode refid="4450" relation="include">
        </childnode>
        <childnode refid="4452" relation="include">
        </childnode>
        <childnode refid="4523" relation="include">
        </childnode>
      </node>
      <node id="4478">
        <label>stack</label>
      </node>
      <node id="4453">
        <label>vector</label>
      </node>
      <node id="4475">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="4476" relation="include">
        </childnode>
      </node>
      <node id="4519">
        <label>cudf/column/column_factories.hpp</label>
      </node>
      <node id="4517">
        <label>cudf/column/column.hpp</label>
      </node>
      <node id="4479">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="4502">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="4477">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4478" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4479" relation="include">
        </childnode>
      </node>
      <node id="4509">
        <label>io/data_parser/DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="4510" relation="include">
        </childnode>
        <childnode refid="4511" relation="include">
        </childnode>
        <childnode refid="4499" relation="include">
        </childnode>
        <childnode refid="4469" relation="include">
        </childnode>
        <childnode refid="4503" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4453" relation="include">
        </childnode>
      </node>
      <node id="4462">
        <label>cudf/types.hpp</label>
      </node>
      <node id="4525">
        <label>bmr/MemoryMonitor.h</label>
        <link refid="MemoryMonitor_8h_source"/>
        <childnode refid="4458" relation="include">
        </childnode>
        <childnode refid="4459" relation="include">
        </childnode>
        <childnode refid="4468" relation="include">
        </childnode>
        <childnode refid="4526" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
      </node>
      <node id="4494">
        <label>rmm/mr/device/per_device_resource.hpp</label>
      </node>
      <node id="4511">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="4498">
        <label>communication/CommunicationData.h</label>
        <link refid="CommunicationData_8h_source"/>
        <childnode refid="4479" relation="include">
        </childnode>
        <childnode refid="4481" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4460" relation="include">
        </childnode>
      </node>
      <node id="4523">
        <label>graph.h</label>
        <link refid="graph_8h_source"/>
        <childnode refid="4449" relation="include">
        </childnode>
        <childnode refid="4524" relation="include">
        </childnode>
        <childnode refid="4455" relation="include">
        </childnode>
        <childnode refid="4525" relation="include">
        </childnode>
        <childnode refid="4527" relation="include">
        </childnode>
      </node>
      <node id="4452">
        <label>port.h</label>
        <link refid="port_8h_source"/>
        <childnode refid="4453" relation="include">
        </childnode>
        <childnode refid="4454" relation="include">
        </childnode>
        <childnode refid="4451" relation="include">
        </childnode>
        <childnode refid="4455" relation="include">
        </childnode>
      </node>
      <node id="4464">
        <label>iostream</label>
      </node>
      <node id="4473">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="4457">
        <label>deque</label>
      </node>
      <node id="4459">
        <label>mutex</label>
      </node>
      <node id="4485">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="4468">
        <label>chrono</label>
      </node>
      <node id="4508">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="4467">
        <label>CodeTimer.h</label>
        <link refid="CodeTimer_8h_source"/>
        <childnode refid="4468" relation="include">
        </childnode>
      </node>
      <node id="4487">
        <label>rmm/mr/device/device_memory_resource.hpp</label>
      </node>
      <node id="4448">
        <label>executor.h</label>
        <link refid="executor_8h_source"/>
        <childnode refid="4449" relation="include">
        </childnode>
        <childnode refid="4455" relation="include">
        </childnode>
        <childnode refid="4526" relation="include">
        </childnode>
        <childnode refid="4527" relation="include">
        </childnode>
      </node>
      <node id="4529">
        <label>thread</label>
      </node>
      <node id="4482">
        <label>bmr/BlazingMemoryResource.h</label>
        <link refid="BlazingMemoryResource_8h_source"/>
        <childnode refid="4483" relation="include">
        </childnode>
        <childnode refid="4456" relation="include">
        </childnode>
        <childnode refid="4484" relation="include">
        </childnode>
        <childnode refid="4485" relation="include">
        </childnode>
        <childnode refid="4486" relation="include">
        </childnode>
        <childnode refid="4487" relation="include">
        </childnode>
        <childnode refid="4488" relation="include">
        </childnode>
        <childnode refid="4489" relation="include">
        </childnode>
        <childnode refid="4490" relation="include">
        </childnode>
        <childnode refid="4491" relation="include">
        </childnode>
        <childnode refid="4492" relation="include">
        </childnode>
        <childnode refid="4493" relation="include">
        </childnode>
        <childnode refid="4494" relation="include">
        </childnode>
        <childnode refid="4495" relation="include">
        </childnode>
        <childnode refid="4496" relation="include">
        </childnode>
        <childnode refid="4497" relation="include">
        </childnode>
      </node>
      <node id="4491">
        <label>rmm/mr/device/pool_memory_resource.hpp</label>
      </node>
      <node id="4484">
        <label>set</label>
      </node>
      <node id="4470">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="4465">
        <label>cudf/utilities/error.hpp</label>
      </node>
      <node id="4504">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="4454">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1execution">ral::execution</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;executor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1literals" kindref="compound">fmt::literals</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">execution{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>executor::add_task(std::vector&lt;std::unique_ptr&lt;ral::cache::CacheData<sp/>&gt;<sp/>&gt;<sp/>inputs,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>output,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classral_1_1cache_1_1kernel" kindref="compound">ral::cache::kernel</ref><sp/>*<sp/>kernel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>task_id<sp/>=<sp/>task_id_counter.fetch_add(1,<sp/>std::memory_order_relaxed);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel-&gt;<ref refid="classral_1_1cache_1_1kernel_1a9b0a80f937f10357ae62638b6f0461d4" kindref="member">add_task</ref>(task_id);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>task_added<sp/>=<sp/>std::make_unique&lt;task&gt;(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(inputs),output,task_id,<sp/>kernel,<sp/>attempts_limit,<sp/>args</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>task_queue.put(std::move(task_added));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task_id;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>executor::add_task(std::vector&lt;std::unique_ptr&lt;ral::cache::CacheData<sp/>&gt;<sp/>&gt;<sp/>inputs,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>output,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classral_1_1cache_1_1kernel" kindref="compound">ral::cache::kernel</ref><sp/>*<sp/>kernel,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>attempts,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>task_id,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;&amp;<sp/>args){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>task_added<sp/>=<sp/>std::make_unique&lt;task&gt;(</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(inputs),output,task_id,<sp/>kernel,<sp/>attempts_limit,<sp/>args,<sp/>attempts</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>task_queue.put(std::move(task_added));</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>executor::add_task(std::unique_ptr&lt;task&gt;<sp/>task)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>task_queue.put(std::move(task));</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">std::unique_ptr&lt;task&gt;<sp/>executor::remove_task_from_back(){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(task_queue.pop_back());</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">task::task(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ral::cache::CacheData<sp/>&gt;<sp/>&gt;<sp/>inputs,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>output,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>task_id,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classral_1_1cache_1_1kernel" kindref="compound">ral::cache::kernel</ref><sp/>*<sp/>kernel,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>attempts_limit,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;&amp;<sp/>args,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>attempts)<sp/>:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>inputs(std::move(inputs)),</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>output(output),<sp/>task_id(task_id),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel(kernel),attempts(attempts),</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>attempts_limit(attempts_limit),<sp/>args(args)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>task_logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;task_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">std::size_t<sp/>task::task_memory_needed()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>bytes_to_decache<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>space<sp/>needed<sp/>to<sp/>deache<sp/>inputs<sp/>which<sp/>are<sp/>currently<sp/>not<sp/>in<sp/>GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>input<sp/>:<sp/>inputs)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input-&gt;get_type()<sp/>==<sp/>ral::cache::CacheDataType::CPU<sp/>||<sp/>input-&gt;get_type()<sp/>==<sp/>ral::cache::CacheDataType::LOCAL_FILE){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes_to_decache<sp/>+=<sp/>input-&gt;sizeInBytes();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input-&gt;get_type()<sp/>==<sp/>ral::cache::CacheDataType::IO_FILE){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO!<sp/>Need<sp/>to<sp/>figure<sp/>out<sp/>what<sp/>we<sp/>want<sp/>to<sp/>do<sp/>to<sp/>try<sp/>to<sp/>estimate<sp/>consumption<sp/>for<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bytes_to_decache<sp/>+<sp/>kernel-&gt;estimate_output_bytes(inputs)<sp/>+<sp/>kernel-&gt;estimate_operating_bytes(inputs);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classral_1_1execution_1_1task_1ad4b6bafee29648cb7893a521342a69ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task::run(cudaStream_t<sp/>stream,<sp/><ref refid="classral_1_1execution_1_1executor" kindref="compound">executor</ref><sp/>*<sp/><ref refid="classral_1_1execution_1_1executor" kindref="compound">executor</ref>){</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;<sp/>std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>&gt;<sp/>input_gpu;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeTimer" kindref="compound">CodeTimer</ref><sp/>decachingEventTimer;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_input_decached<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decaching<sp/>inputs</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>input<sp/>:<sp/>inputs){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>its<sp/>in<sp/>gpu<sp/>this<sp/>wont<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>its<sp/>cpu<sp/>and<sp/>it<sp/>fails<sp/>the<sp/>buffers<sp/>arent<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>its<sp/>disk<sp/>and<sp/>fails<sp/>the<sp/>file<sp/>isnt<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//so<sp/>this<sp/>should<sp/>be<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_input_decached++;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_gpu.push_back(std::move(input-&gt;decache()));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rmm::bad_alloc&amp;<sp/>e){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>input<sp/>:<sp/>inputs){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>last_input_decached<sp/>&amp;&amp;<sp/>input-&gt;get_type()<sp/>==<sp/>ral::cache::CacheDataType::GPU<sp/>){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>was<sp/>a<sp/>gpu<sp/>cachedata<sp/>so<sp/>now<sp/>its<sp/>not<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classral_1_1cache_1_1GPUCacheData" kindref="compound">ral::cache::GPUCacheData</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input.get())-&gt;set_data(std::move(input_gpu[i]));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;ERROR<sp/>of<sp/>type<sp/>rmm::bad_alloc<sp/>in<sp/>task::run.<sp/>What:<sp/>{}&quot;</highlight><highlight class="normal">_format(e.what()));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;attempts++;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;attempts<sp/>&lt;<sp/>this-&gt;attempts_limit){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executor-&gt;add_task(std::move(inputs),<sp/>output,<sp/>kernel,<sp/>attempts,<sp/>task_id,<sp/>args);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e){</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;ERROR<sp/>in<sp/>task::run.<sp/>What:<sp/>{}&quot;</highlight><highlight class="normal">_format(e.what()));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decaching_elapsed<sp/>=<sp/>decachingEventTimer.elapsed_time();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>log_input_rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>log_input_bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_gpu.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_input_rows<sp/>+=<sp/>input_gpu.at(i)-&gt;num_rows();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log_input_bytes<sp/>+=<sp/>input_gpu.at(i)-&gt;sizeInBytes();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCodeTimer" kindref="compound">CodeTimer</ref><sp/>executionEventTimer;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref><sp/>=<sp/>kernel-&gt;process(std::move(input_gpu),output,stream,<sp/>args);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(task_logger)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_logger-&gt;info(</highlight><highlight class="stringliteral">&quot;{time_started}|{ral_id}|{query_id}|{kernel_id}|{duration_decaching}|{duration_execution}|{input_num_rows}|{input_num_bytes}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;time_started&quot;</highlight><highlight class="normal">_a=decachingEventTimer.start_time(),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id&quot;</highlight><highlight class="normal">_a=kernel-&gt;get_context()-&gt;getNodeIndex(ral::communication::CommunicationData::getInstance().getSelfNode()),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;query_id&quot;</highlight><highlight class="normal">_a=kernel-&gt;get_context()-&gt;getContextToken(),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kernel_id&quot;</highlight><highlight class="normal">_a=kernel-&gt;get_id(),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;duration_decaching&quot;</highlight><highlight class="normal">_a=decaching_elapsed,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;duration_execution&quot;</highlight><highlight class="normal">_a=executionEventTimer.elapsed_time(),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input_num_rows&quot;</highlight><highlight class="normal">_a=log_input_rows,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input_num_bytes&quot;</highlight><highlight class="normal">_a=log_input_bytes);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.status<sp/>==<sp/>ral::execution::task_status::SUCCESS){</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complete();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.status<sp/>==<sp/>ral::execution::task_status::RETRY){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>input<sp/>:<sp/>inputs){</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/>(input-&gt;get_type()<sp/>==<sp/>ral::cache::CacheDataType::GPU){</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>was<sp/>a<sp/>gpu<sp/>cachedata<sp/>so<sp/>now<sp/>its<sp/>not<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.inputs.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/><ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.inputs.size()<sp/>&amp;&amp;<sp/><ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.inputs[i]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.inputs[i]-&gt;is_valid()){<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classral_1_1cache_1_1GPUCacheData" kindref="compound">ral::cache::GPUCacheData</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input.get())-&gt;set_data(std::move(<ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.inputs[i]));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>input<sp/>was<sp/>lost<sp/>and<sp/>it<sp/>was<sp/>a<sp/>gpu<sp/>dataframe<sp/>which<sp/>is<sp/>not<sp/>recoverable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>rmm::bad_alloc(<ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.what.c_str());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>is<sp/>null,<sp/>cannot<sp/>recover&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;attempts++;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;attempts<sp/>&lt;<sp/>this-&gt;attempts_limit){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executor-&gt;add_task(std::move(inputs),<sp/>output,<sp/>kernel,<sp/>attempts,<sp/>task_id,<sp/>args);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>rmm::bad_alloc(</highlight><highlight class="stringliteral">&quot;Ran<sp/>out<sp/>of<sp/>memory<sp/>processing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<ref refid="structral_1_1execution_1_1task__result" kindref="compound">task_result</ref>.what.c_str());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task::complete(){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel-&gt;notify_complete(task_id);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task::fail(){</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel-&gt;notify_fail(task_id);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classral_1_1execution_1_1task_1a6b0526afb984d7f2e7fb83fd7c1913ec" refkind="member"><highlight class="normal">std::vector&lt;std::unique_ptr&lt;ral::cache::CacheData<sp/>&gt;<sp/>&gt;<sp/>task::release_inputs(){</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(this-&gt;inputs);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classral_1_1execution_1_1task_1a9d1c2ebe66d6ada25cc1eccb246774b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task::set_inputs(std::vector&lt;std::unique_ptr&lt;ral::cache::CacheData<sp/>&gt;<sp/>&gt;<sp/>inputs){</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;inputs<sp/>=<sp/>std::move(inputs);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="classral_1_1execution_1_1executor" kindref="compound">executor</ref><sp/>*<sp/>executor::_instance;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">executor::executor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>processing_memory_limit_threshold)<sp/>:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/>pool(num_threads),<sp/>task_id_counter(0),<sp/>resource(&amp;<ref refid="classblazing__device__memory__resource_1a31735d61d23aef05666c7c3f981c86fe" kindref="member">blazing_device_memory_resource::getInstance</ref>()),<sp/>task_queue(</highlight><highlight class="stringliteral">&quot;executor_task_queue&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>processing_memory_limit<sp/>=<sp/>resource-&gt;get_total_memory()<sp/>*<sp/>processing_memory_limit_threshold;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_threads;<sp/>i++){</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStream_t<sp/>stream;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStreamCreate(&amp;stream);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>streams.push_back(stream);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>executor::execute(){</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(shutdown<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//consider<sp/>using<sp/>get_all<sp/>and<sp/>calling<sp/>in<sp/>a<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur_task<sp/>=<sp/>this-&gt;task_queue.pop_or_wait();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>pool.push([&amp;cur_task,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thread_id){</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>memory_needed<sp/>=<sp/>cur_task-&gt;task_memory_needed();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>want<sp/>to<sp/>wait<sp/>until<sp/>we<sp/>make<sp/>sure<sp/>we<sp/>have<sp/>enough<sp/>memory<sp/>to<sp/>operate,<sp/>or<sp/>if<sp/>there<sp/>are<sp/>no<sp/>tasks<sp/>currently<sp/>running,<sp/>then<sp/>we<sp/>want<sp/>to<sp/>go<sp/>ahead<sp/>and<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(memory_safety_mutex);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_safety_cv.wait(lock,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>memory_needed]<sp/>{<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memory_needed<sp/>&lt;<sp/>(processing_memory_limit<sp/>-<sp/>resource-&gt;get_memory_used())){</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active_tasks_counter.load()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger){</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;warn(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;WARNING:<sp/>launching<sp/>task<sp/>even<sp/>though<sp/>over<sp/>limit,<sp/>because<sp/>there<sp/>are<sp/>no<sp/>tasks<sp/>running.<sp/>Memory<sp/>used:<sp/>{}&quot;</highlight><highlight class="normal">_format(std::to_string(resource-&gt;get_memory_used())));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_tasks_counter++;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_task-&gt;run(this-&gt;streams[thread_id],</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_tasks_counter--;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_safety_cv.notify_all();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.get();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(exception_holder_mutex);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception_holder.push(std::current_exception());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_task-&gt;fail();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">std::exception_ptr<sp/>executor::last_exception(){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(exception_holder_mutex);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>std::exception_ptr<sp/>e;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!exception_holder.empty())<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>=<sp/>exception_holder.front();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exception_holder.pop();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e;</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>executor::has_exception(){</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lock(exception_holder_mutex);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!exception_holder.empty();</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ral</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/taskflow/executor.cpp"/>
  </compounddef>
</doxygen>

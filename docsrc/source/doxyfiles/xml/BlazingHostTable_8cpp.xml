<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="BlazingHostTable_8cpp" kind="file" language="C++">
    <compoundname>BlazingHostTable.cpp</compoundname>
    <includes refid="BlazingHostTable_8h" local="yes">BlazingHostTable.h</includes>
    <includes refid="BlazingMemoryResource_8h" local="yes">bmr/BlazingMemoryResource.h</includes>
    <includes refid="BufferProvider_8h" local="yes">bmr/BufferProvider.h</includes>
    <includes refid="serializer_8hpp" local="yes">communication/CommunicationInterface/serializer.hpp</includes>
    <incdepgraph>
      <node id="3506">
        <label>atomic</label>
      </node>
      <node id="3518">
        <label>config/GPUManager.cuh</label>
      </node>
      <node id="3513">
        <label>rmm/mr/device/managed_memory_resource.hpp</label>
      </node>
      <node id="3499">
        <label>LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="3500" relation="include">
        </childnode>
        <childnode refid="3501" relation="include">
        </childnode>
        <childnode refid="3491" relation="include">
        </childnode>
        <childnode refid="3490" relation="include">
        </childnode>
        <childnode refid="3489" relation="include">
        </childnode>
        <childnode refid="3502" relation="include">
        </childnode>
        <childnode refid="3488" relation="include">
        </childnode>
      </node>
      <node id="3519">
        <label>sys/sysinfo.h</label>
      </node>
      <node id="3524">
        <label>rmm/device_buffer.hpp</label>
      </node>
      <node id="3494">
        <label>cstdint</label>
      </node>
      <node id="3511">
        <label>rmm/mr/device/owning_wrapper.hpp</label>
      </node>
      <node id="3487">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BlazingHostTable.cpp</label>
        <link refid="BlazingHostTable_8cpp"/>
        <childnode refid="3488" relation="include">
        </childnode>
        <childnode refid="3504" relation="include">
        </childnode>
        <childnode refid="3495" relation="include">
        </childnode>
        <childnode refid="3521" relation="include">
        </childnode>
      </node>
      <node id="3516">
        <label>rmm/mr/device/logging_resource_adaptor.hpp</label>
      </node>
      <node id="3502">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="3503" relation="include">
        </childnode>
        <childnode refid="3500" relation="include">
        </childnode>
        <childnode refid="3501" relation="include">
        </childnode>
        <childnode refid="3491" relation="include">
        </childnode>
        <childnode refid="3490" relation="include">
        </childnode>
        <childnode refid="3489" relation="include">
        </childnode>
      </node>
      <node id="3505">
        <label>cassert</label>
      </node>
      <node id="3512">
        <label>rmm/mr/device/cuda_memory_resource.hpp</label>
      </node>
      <node id="3515">
        <label>rmm/mr/device/arena_memory_resource.hpp</label>
      </node>
      <node id="3509">
        <label>rmm/cuda_stream_view.hpp</label>
      </node>
      <node id="3490">
        <label>string</label>
      </node>
      <node id="3522">
        <label>map</label>
      </node>
      <node id="3488">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="3489" relation="include">
        </childnode>
        <childnode refid="3490" relation="include">
        </childnode>
        <childnode refid="3491" relation="include">
        </childnode>
        <childnode refid="3492" relation="include">
        </childnode>
        <childnode refid="3493" relation="include">
        </childnode>
        <childnode refid="3495" relation="include">
        </childnode>
        <childnode refid="3499" relation="include">
        </childnode>
      </node>
      <node id="3501">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="3520">
        <label>sys/statvfs.h</label>
      </node>
      <node id="3523">
        <label>tuple</label>
      </node>
      <node id="3496">
        <label>stack</label>
      </node>
      <node id="3489">
        <label>vector</label>
      </node>
      <node id="3493">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="3494" relation="include">
        </childnode>
      </node>
      <node id="3498">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="3495">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="3489" relation="include">
        </childnode>
        <childnode refid="3490" relation="include">
        </childnode>
        <childnode refid="3496" relation="include">
        </childnode>
        <childnode refid="3497" relation="include">
        </childnode>
        <childnode refid="3491" relation="include">
        </childnode>
        <childnode refid="3498" relation="include">
        </childnode>
      </node>
      <node id="3521">
        <label>communication/CommunicationInterface/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="3489" relation="include">
        </childnode>
        <childnode refid="3522" relation="include">
        </childnode>
        <childnode refid="3491" relation="include">
        </childnode>
        <childnode refid="3523" relation="include">
        </childnode>
        <childnode refid="3524" relation="include">
        </childnode>
        <childnode refid="3493" relation="include">
        </childnode>
        <childnode refid="3499" relation="include">
        </childnode>
      </node>
      <node id="3492">
        <label>cudf/types.hpp</label>
      </node>
      <node id="3517">
        <label>rmm/mr/device/per_device_resource.hpp</label>
      </node>
      <node id="3503">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="3497">
        <label>mutex</label>
      </node>
      <node id="3508">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="3510">
        <label>rmm/mr/device/device_memory_resource.hpp</label>
      </node>
      <node id="3504">
        <label>bmr/BlazingMemoryResource.h</label>
        <link refid="BlazingMemoryResource_8h_source"/>
        <childnode refid="3505" relation="include">
        </childnode>
        <childnode refid="3506" relation="include">
        </childnode>
        <childnode refid="3507" relation="include">
        </childnode>
        <childnode refid="3508" relation="include">
        </childnode>
        <childnode refid="3509" relation="include">
        </childnode>
        <childnode refid="3510" relation="include">
        </childnode>
        <childnode refid="3511" relation="include">
        </childnode>
        <childnode refid="3512" relation="include">
        </childnode>
        <childnode refid="3513" relation="include">
        </childnode>
        <childnode refid="3514" relation="include">
        </childnode>
        <childnode refid="3515" relation="include">
        </childnode>
        <childnode refid="3516" relation="include">
        </childnode>
        <childnode refid="3517" relation="include">
        </childnode>
        <childnode refid="3518" relation="include">
        </childnode>
        <childnode refid="3519" relation="include">
        </childnode>
        <childnode refid="3520" relation="include">
        </childnode>
      </node>
      <node id="3514">
        <label>rmm/mr/device/pool_memory_resource.hpp</label>
      </node>
      <node id="3507">
        <label>set</label>
      </node>
      <node id="3500">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="3491">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1frame">ral::frame</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;BlazingHostTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bmr/BlazingMemoryResource.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bmr/BufferProvider.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationInterface/serializer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1literals" kindref="compound">fmt::literals</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">frame<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">BlazingHostTable::BlazingHostTable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ColumnTransport&gt;<sp/>&amp;columns_offsets,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ral::memory::blazing_chunked_column_info&gt;<sp/>&amp;&amp;<sp/>chunked_column_infos,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ral::memory::blazing_allocation_chunk&gt;&gt;<sp/>&amp;&amp;<sp/>allocations)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>columns_offsets{columns_offsets},<sp/>chunked_column_infos{std::move(chunked_column_infos)},<sp/>allocations{std::move(allocations)}<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>sizeInBytes();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblazing__host__memory__resource_1a1fa50b80350c0718dc4ee026e8425e7a" kindref="member">blazing_host_memory_resource::getInstance</ref>().allocate(size);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>only<sp/>increments<sp/>the<sp/>memory<sp/>usage<sp/>counter<sp/>for<sp/>the<sp/>host<sp/>memory.<sp/>This<sp/>does<sp/>not<sp/>actually<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">BlazingHostTable::~BlazingHostTable()<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>sizeInBytes();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblazing__host__memory__resource_1a1fa50b80350c0718dc4ee026e8425e7a" kindref="member">blazing_host_memory_resource::getInstance</ref>().deallocate(size);<sp/></highlight><highlight class="comment">//<sp/>this<sp/>only<sp/>decrements<sp/>the<sp/>memory<sp/>usage<sp/>counter<sp/>for<sp/>the<sp/>host<sp/>memory.<sp/>This<sp/>does<sp/>not<sp/>actually<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>allocations.size();<sp/>i++){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pool<sp/>=<sp/>allocations[i]-&gt;allocation-&gt;pool;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool-&gt;free_chunk(std::move(allocations[i]));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">std::vector&lt;cudf::data_type&gt;<sp/>BlazingHostTable::get_schema()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cudf::data_type&gt;<sp/>data_types(this-&gt;num_columns());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(columns_offsets.begin(),<sp/>columns_offsets.end(),<sp/>data_types.begin(),<sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;col)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>dtype<sp/>=<sp/>col.metadata.dtype;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cudf::data_type{cudf::type_id(dtype)};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_types;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>BlazingHostTable::names()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>col_names(this-&gt;num_columns());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(columns_offsets.begin(),<sp/>columns_offsets.end(),<sp/>col_names.begin(),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;col)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col.metadata.col_name;<sp/>});</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col_names;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BlazingHostTable::set_names(std::vector&lt;std::string&gt;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>names.size();<sp/>i++){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(columns_offsets[i].metadata.col_name,<sp/>names[i].c_str());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">cudf::size_type<sp/>BlazingHostTable::num_rows()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>columns_offsets.empty()<sp/>?<sp/>0<sp/>:<sp/>columns_offsets.front().metadata.size;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">cudf::size_type<sp/>BlazingHostTable::num_columns()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>columns_offsets.size();</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">std::size_t<sp/>BlazingHostTable::sizeInBytes()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>total_size<sp/>=<sp/>0L;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;col<sp/>:<sp/>columns_offsets)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>col.size_in_bytes;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_size;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BlazingHostTable::setPartitionId(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;part_id)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;part_id<sp/>=<sp/>part_id;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BlazingHostTable::get_part_id()<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;part_id;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ColumnTransport&gt;<sp/>&amp;BlazingHostTable::get_columns_offsets()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>columns_offsets;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">std::unique_ptr&lt;BlazingTable&gt;<sp/>BlazingHostTable::get_gpu_table()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;rmm::device_buffer&gt;<sp/>gpu_raw_buffers(chunked_column_infos.size());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>chunked_column_info<sp/>:<sp/>chunked_column_infos){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu_raw_buffers[buffer_index].resize(chunked_column_info.use_size);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>chunked_column_info.chunk_index.size();<sp/>i++){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_index<sp/>=<sp/>chunked_column_info.chunk_index[i];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>chunked_column_info.offset[i];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunk_size<sp/>=<sp/>chunked_column_info.size[i];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyAsync((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>(gpu_raw_buffers[buffer_index].data()<sp/>+<sp/>position),<sp/>allocations[chunk_index]-&gt;data<sp/>+<sp/>offset,<sp/>chunk_size,<sp/>cudaMemcpyHostToDevice,0);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position<sp/>+=<sp/>chunk_size;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_index++;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaStreamSynchronize(0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(std::exception<sp/>&amp;<sp/>e){</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;ERROR<sp/>in<sp/>BlazingHostTable::get_gpu_table().<sp/>What:<sp/>{}&quot;</highlight><highlight class="normal">_format(e.what()));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(comm::deserialize_from_gpu_raw_buffers(columns_offsets,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpu_raw_buffers));</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">std::vector&lt;ral::memory::blazing_allocation_chunk&gt;<sp/>BlazingHostTable::get_raw_buffers()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ral::memory::blazing_allocation_chunk&gt;<sp/>chunks;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>chunk<sp/>:<sp/>allocations){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1memory_1_1blazing__allocation__chunk" kindref="compound">ral::memory::blazing_allocation_chunk</ref><sp/>new_chunk;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_chunk.size<sp/>=<sp/>chunk-&gt;size;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_chunk.data<sp/>=<sp/>chunk-&gt;data;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_chunk.allocation<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunks.push_back(new_chunk);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunks;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ral::memory::blazing_chunked_column_info&gt;<sp/>&amp;<sp/>BlazingHostTable::get_blazing_chunked_column_infos()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;chunked_column_infos;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ral</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BlazingHostTable.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="JSONParser_8cpp" kind="file" language="C++">
    <compoundname>JSONParser.cpp</compoundname>
    <includes local="no">arrow/io/file.h</includes>
    <includes local="no">blazingdb/io/Library/Logging/Logger.h</includes>
    <includes local="no">numeric</includes>
    <includes refid="ArgsUtil_8h" local="yes">ArgsUtil.h</includes>
    <includes refid="JSONParser_8h" local="yes">JSONParser.h</includes>
    <incdepgraph>
      <node id="5693">
        <label>blazingdb/io/Library/Logging/Logger.h</label>
      </node>
      <node id="5709">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="5710" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5707" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5712" relation="include">
        </childnode>
        <childnode refid="5714" relation="include">
        </childnode>
      </node>
      <node id="5730">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="5692">
        <label>arrow/io/file.h</label>
      </node>
      <node id="5728">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="5716">
        <label>cstdint</label>
      </node>
      <node id="5712">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="5713" relation="include">
        </childnode>
        <childnode refid="5710" relation="include">
        </childnode>
        <childnode refid="5711" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5707" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
      </node>
      <node id="5700">
        <label>cudf/io/datasource.hpp</label>
      </node>
      <node id="5694">
        <label>numeric</label>
      </node>
      <node id="5707">
        <label>string</label>
      </node>
      <node id="5731">
        <label>map</label>
      </node>
      <node id="5725">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="5714">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5707" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5708" relation="include">
        </childnode>
        <childnode refid="5715" relation="include">
        </childnode>
        <childnode refid="5717" relation="include">
        </childnode>
        <childnode refid="5709" relation="include">
        </childnode>
      </node>
      <node id="5722">
        <label>../data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="5723" relation="include">
        </childnode>
        <childnode refid="5724" relation="include">
        </childnode>
        <childnode refid="5725" relation="include">
        </childnode>
        <childnode refid="5726" relation="include">
        </childnode>
        <childnode refid="5702" relation="include">
        </childnode>
        <childnode refid="5727" relation="include">
        </childnode>
        <childnode refid="5728" relation="include">
        </childnode>
        <childnode refid="5708" relation="include">
        </childnode>
        <childnode refid="5729" relation="include">
        </childnode>
        <childnode refid="5730" relation="include">
        </childnode>
        <childnode refid="5731" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5732" relation="include">
        </childnode>
        <childnode refid="5709" relation="include">
        </childnode>
      </node>
      <node id="5723">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="5711">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="5706">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="5707" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5708" relation="include">
        </childnode>
        <childnode refid="5709" relation="include">
        </childnode>
      </node>
      <node id="5702">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="5729">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="5724">
        <label>spdlog/async.h</label>
      </node>
      <node id="5718">
        <label>stack</label>
      </node>
      <node id="5704">
        <label>vector</label>
      </node>
      <node id="5715">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="5716" relation="include">
        </childnode>
      </node>
      <node id="5720">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="5726">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="5717">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5707" relation="include">
        </childnode>
        <childnode refid="5718" relation="include">
        </childnode>
        <childnode refid="5719" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5720" relation="include">
        </childnode>
      </node>
      <node id="5691">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/JSONParser.cpp</label>
        <link refid="JSONParser_8cpp"/>
        <childnode refid="5692" relation="include">
        </childnode>
        <childnode refid="5693" relation="include">
        </childnode>
        <childnode refid="5694" relation="include">
        </childnode>
        <childnode refid="5695" relation="include">
        </childnode>
        <childnode refid="5701" relation="include">
        </childnode>
      </node>
      <node id="5705">
        <label>DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="5706" relation="include">
        </childnode>
        <childnode refid="5721" relation="include">
        </childnode>
        <childnode refid="5722" relation="include">
        </childnode>
        <childnode refid="5709" relation="include">
        </childnode>
        <childnode refid="5702" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
      </node>
      <node id="5708">
        <label>cudf/types.hpp</label>
      </node>
      <node id="5695">
        <label>ArgsUtil.h</label>
        <link refid="ArgsUtil_8h_source"/>
        <childnode refid="5696" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5698" relation="include">
        </childnode>
        <childnode refid="5699" relation="include">
        </childnode>
        <childnode refid="5700" relation="include">
        </childnode>
      </node>
      <node id="5698">
        <label>cudf/io/orc.hpp</label>
      </node>
      <node id="5696">
        <label>io/io.h</label>
      </node>
      <node id="5721">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="5699">
        <label>cudf/io/csv.hpp</label>
      </node>
      <node id="5713">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="5701">
        <label>JSONParser.h</label>
        <link refid="JSONParser_8h_source"/>
        <childnode refid="5702" relation="include">
        </childnode>
        <childnode refid="5700" relation="include">
        </childnode>
        <childnode refid="5697" relation="include">
        </childnode>
        <childnode refid="5703" relation="include">
        </childnode>
        <childnode refid="5704" relation="include">
        </childnode>
        <childnode refid="5705" relation="include">
        </childnode>
      </node>
      <node id="5719">
        <label>mutex</label>
      </node>
      <node id="5732">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="5710">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="5697">
        <label>cudf/io/json.hpp</label>
      </node>
      <node id="5727">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="5703">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1io">ral::io</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;arrow/io/file.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Library/Logging/Logger.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ArgsUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;JSONParser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceio" kindref="compound">io</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">json_parser::json_parser(std::map&lt;std::string,<sp/>std::string&gt;<sp/>args_map_)<sp/>:<sp/>args_map{args_map_}<sp/>{}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">json_parser::~json_parser()<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>json_parser::parse_batch(<ref refid="structral_1_1io_1_1data__handle" kindref="compound">ral::io::data_handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Schema<sp/>&amp;<sp/>schema,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>column_indices,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cudf::size_type&gt;<sp/></highlight><highlight class="comment">/*row_groups*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;<sp/>file<sp/>=<sp/>handle.file_handle;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schema.makeEmptyBlazingTable(column_indices);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(column_indices.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_source<sp/>=<sp/>cudf::io::arrow_io_source{file};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::io::json_reader_options<sp/>json_opts<sp/>=<sp/>getJsonReaderOptions(args_map,<sp/>arrow_source);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::io::table_with_metadata<sp/>json_table<sp/>=<sp/>cudf::io::read_json(json_opts);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>columns<sp/>=<sp/>json_table.tbl-&gt;release();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>column_names<sp/>=<sp/>std::move(json_table.metadata.column_names);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>just<sp/>need<sp/>the<sp/>columns<sp/>in<sp/>column_indices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;cudf::column&gt;&gt;<sp/>selected_columns;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected_columns.reserve(column_indices.size());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>selected_column_names;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected_column_names.reserve(column_indices.size());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>i<sp/>:<sp/>column_indices)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected_columns.push_back(std::move(columns[i]));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected_column_names.push_back(std::move(column_names[i]));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;ral::frame::BlazingTable&gt;(</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;cudf::table&gt;(std::move(selected_columns)),<sp/>selected_column_names);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>json_parser::parse_schema(std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;<sp/>file,<sp/><ref refid="classral_1_1io_1_1Schema" kindref="compound">ral::io::Schema</ref><sp/>&amp;<sp/>schema)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_source<sp/>=<sp/>cudf::io::arrow_io_source{file};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::json_reader_options<sp/>args<sp/>=<sp/>getJsonReaderOptions(args_map,<sp/>arrow_source);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>num_bytes<sp/>=<sp/>file-&gt;GetSize().ValueOrDie();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lets<sp/>only<sp/>read<sp/>up<sp/>to<sp/>48192<sp/>bytes.<sp/>We<sp/>are<sp/>assuming<sp/>that<sp/>a<sp/>full<sp/>row<sp/>will<sp/>always<sp/>be<sp/>less<sp/>than<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num_bytes<sp/>&gt;<sp/>48192)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes<sp/>=<sp/>48192;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>args.set_byte_range_offset(0);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>args.set_byte_range_size(num_bytes);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::table_with_metadata<sp/>table_and_metadata<sp/>=<sp/>cudf::io::read_json(args);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>file-&gt;Close();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table_and_metadata.tbl-&gt;num_columns();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>table_and_metadata.metadata.column_names[i];</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::type_id<sp/>type<sp/>=<sp/>table_and_metadata.tbl-&gt;get_column(i).type().id();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_in_file<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema.add_column(name,<sp/>type,<sp/>file_index,<sp/>is_in_file);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>io<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>ral<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/JSONParser.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="initialize_8cpp" kind="file" language="C++">
    <compoundname>initialize.cpp</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">clocale</includes>
    <includes local="no">arpa/inet.h</includes>
    <includes local="no">net/if.h</includes>
    <includes local="no">sys/ioctl.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">execinfo.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">ucp/api/ucp.h</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes local="no">spdlog/async.h</includes>
    <includes local="no">spdlog/sinks/basic_file_sink.h</includes>
    <includes local="no">spdlog/sinks/stdout_color_sinks.h</includes>
    <includes local="no">spdlog/sinks/rotating_file_sink.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cuda_runtime.h</includes>
    <includes local="no">memory</includes>
    <includes local="no">chrono</includes>
    <includes local="no">thread</includes>
    <includes local="no">fstream</includes>
    <includes local="no">utility</includes>
    <includes local="no">blazingdb/io/Config/BlazingContext.h</includes>
    <includes local="no">blazingdb/io/Library/Logging/CoutOutput.h</includes>
    <includes local="no">blazingdb/io/Library/Logging/Logger.h</includes>
    <includes local="yes">blazingdb/io/Library/Logging/ServiceLogging.h</includes>
    <includes local="no">blazingdb/io/Util/StringUtil.h</includes>
    <includes refid="ucx__init_8h" local="yes">communication/ucx_init.h</includes>
    <includes refid="CommunicationData_8h" local="yes">communication/CommunicationData.h</includes>
    <includes refid="protocols_8hpp" local="yes">communication/CommunicationInterface/protocols.hpp</includes>
    <includes refid="initializer_8h" local="no">bmr/initializer.h</includes>
    <includes refid="BlazingMemoryResource_8h" local="no">bmr/BlazingMemoryResource.h</includes>
    <includes refid="error_8hpp" local="yes">error.hpp</includes>
    <includes local="yes">cudf/detail/gather.hpp</includes>
    <includes refid="node_8hpp" local="yes">communication/CommunicationInterface/node.hpp</includes>
    <includes refid="messageSender_8hpp" local="yes">communication/CommunicationInterface/messageSender.hpp</includes>
    <includes refid="messageListener_8hpp" local="yes">communication/CommunicationInterface/messageListener.hpp</includes>
    <includes refid="kernel_8h" local="yes">execution_graph/logic_controllers/taskflow/kernel.h</includes>
    <includes refid="executor_8h" local="yes">execution_graph/logic_controllers/taskflow/executor.h</includes>
    <includes refid="CacheMachine_8h" local="yes">execution_graph/logic_controllers/CacheMachine.h</includes>
    <includes local="yes">engine/initialize.h</includes>
    <includes local="yes">engine/static.h</includes>
    <includes local="yes">engine/engine.h</includes>
    <includes local="no">sys/socket.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">netinet/in.h</includes>
    <incdepgraph>
      <node id="1894">
        <label>sys/stat.h</label>
      </node>
      <node id="1912">
        <label>blazingdb/io/Library/Logging/Logger.h</label>
      </node>
      <node id="1924">
        <label>atomic</label>
      </node>
      <node id="1961">
        <label>config/GPUManager.cuh</label>
      </node>
      <node id="2010">
        <label>netinet/in.h</label>
      </node>
      <node id="1956">
        <label>rmm/mr/device/managed_memory_resource.hpp</label>
      </node>
      <node id="1891">
        <label>arpa/inet.h</label>
      </node>
      <node id="1987">
        <label>functional</label>
      </node>
      <node id="1989">
        <label>queue</label>
      </node>
      <node id="1930">
        <label>execution_graph/logic_controllers/CacheMachine.h</label>
        <link refid="CacheMachine_8h_source"/>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1898" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1972" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1984" relation="include">
        </childnode>
        <childnode refid="1985" relation="include">
        </childnode>
      </node>
      <node id="1918">
        <label>limits</label>
      </node>
      <node id="1938">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
      </node>
      <node id="1970">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="1975">
        <label>communication/messages/GPUComponentMessage.h</label>
        <link refid="GPUComponentMessage_8h_source"/>
        <childnode refid="1898" relation="include">
        </childnode>
        <childnode refid="1899" relation="include">
        </childnode>
        <childnode refid="1900" relation="include">
        </childnode>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1977" relation="include">
        </childnode>
        <childnode refid="1978" relation="include">
        </childnode>
        <childnode refid="1979" relation="include">
        </childnode>
        <childnode refid="1980" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1981" relation="include">
        </childnode>
        <childnode refid="1982" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1983" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
      </node>
      <node id="1892">
        <label>net/if.h</label>
      </node>
      <node id="1962">
        <label>sys/sysinfo.h</label>
      </node>
      <node id="1968">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="1997">
        <label>rmm/device_buffer.hpp</label>
      </node>
      <node id="1992">
        <label>kernel_type.h</label>
        <link refid="kernel__type_8h_source"/>
        <childnode refid="1917" relation="include">
        </childnode>
      </node>
      <node id="1925">
        <label>bufferTransport.hpp</label>
        <link refid="bufferTransport_8hpp_source"/>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
        <childnode refid="1914" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
      </node>
      <node id="1923">
        <label>cstdint</label>
      </node>
      <node id="1954">
        <label>rmm/mr/device/owning_wrapper.hpp</label>
      </node>
      <node id="1929">
        <label>node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
      </node>
      <node id="1959">
        <label>rmm/mr/device/logging_resource_adaptor.hpp</label>
      </node>
      <node id="2003">
        <label>ucp/api/ucp_def.h</label>
      </node>
      <node id="1941">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
      </node>
      <node id="1947">
        <label>transport/Node.h</label>
        <link refid="Node_8h_source"/>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
      </node>
      <node id="1904">
        <label>cuda_runtime.h</label>
      </node>
      <node id="1920">
        <label>communication/CommunicationInterface/messageReceiver.hpp</label>
        <link refid="messageReceiver_8hpp_source"/>
        <childnode refid="1921" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1978" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1997" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
      </node>
      <node id="1979">
        <label>cudf/copying.hpp</label>
      </node>
      <node id="1935">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="1916" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
      </node>
      <node id="1949">
        <label>cassert</label>
      </node>
      <node id="1955">
        <label>rmm/mr/device/cuda_memory_resource.hpp</label>
      </node>
      <node id="1958">
        <label>rmm/mr/device/arena_memory_resource.hpp</label>
      </node>
      <node id="1977">
        <label>numeric</label>
      </node>
      <node id="1952">
        <label>rmm/cuda_stream_view.hpp</label>
      </node>
      <node id="1917">
        <label>string</label>
      </node>
      <node id="1999">
        <label>cudf/detail/gather.hpp</label>
      </node>
      <node id="1902">
        <label>spdlog/sinks/rotating_file_sink.h</label>
      </node>
      <node id="1926">
        <label>map</label>
      </node>
      <node id="1893">
        <label>sys/ioctl.h</label>
      </node>
      <node id="1981">
        <label>cudf/null_mask.hpp</label>
      </node>
      <node id="1994">
        <label>kpair.h</label>
        <link refid="kpair_8h_source"/>
        <childnode refid="1993" relation="include">
        </childnode>
        <childnode refid="1991" relation="include">
        </childnode>
      </node>
      <node id="1900">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="1943">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
      </node>
      <node id="1928">
        <label>exception</label>
      </node>
      <node id="1985">
        <label>WaitingQueue.h</label>
        <link refid="WaitingQueue_8h_source"/>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1898" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
      </node>
      <node id="1908">
        <label>fstream</label>
      </node>
      <node id="2006">
        <label>engine/static.h</label>
      </node>
      <node id="2002">
        <label>communication/CommunicationInterface/messageListener.hpp</label>
        <link refid="messageListener_8hpp_source"/>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
        <childnode refid="1996" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
        <childnode refid="2003" relation="include">
        </childnode>
        <childnode refid="1920" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
      </node>
      <node id="1919">
        <label>netdb.h</label>
      </node>
      <node id="1946">
        <label>execution_graph/Context.h</label>
        <link refid="Context_8h_source"/>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
      </node>
      <node id="1984">
        <label>CacheData.h</label>
        <link refid="CacheData_8h_source"/>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1898" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1972" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
      </node>
      <node id="1965">
        <label>io/data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="1898" relation="include">
        </childnode>
        <childnode refid="1899" relation="include">
        </childnode>
        <childnode refid="1900" relation="include">
        </childnode>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1966" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1968" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1969" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1971" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
      </node>
      <node id="1983">
        <label>cudf/strings/strings_column_view.hpp</label>
      </node>
      <node id="1898">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="1940">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="1986">
        <label>utilities/ctpl_stl.h</label>
        <link refid="ctpl__stl_8h_source"/>
        <childnode refid="1987" relation="include">
        </childnode>
        <childnode refid="1907" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1928" relation="include">
        </childnode>
        <childnode refid="1988" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1989" relation="include">
        </childnode>
      </node>
      <node id="1973">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
      </node>
      <node id="1966">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="1932">
        <label>condition_variable</label>
      </node>
      <node id="1996">
        <label>ExceptionHandling/BlazingThread.h</label>
      </node>
      <node id="2009">
        <label>sys/types.h</label>
      </node>
      <node id="1976">
        <label>communication/messages/MessageUtil.cuh</label>
      </node>
      <node id="1915">
        <label>communication/ucx_init.h</label>
        <link refid="ucx__init_8h_source"/>
        <childnode refid="1916" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1909" relation="include">
        </childnode>
        <childnode refid="1918" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1919" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
        <childnode refid="1920" relation="include">
        </childnode>
      </node>
      <node id="1888">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp</label>
        <link refid="initialize_8cpp"/>
        <childnode refid="1889" relation="include">
        </childnode>
        <childnode refid="1890" relation="include">
        </childnode>
        <childnode refid="1891" relation="include">
        </childnode>
        <childnode refid="1892" relation="include">
        </childnode>
        <childnode refid="1893" relation="include">
        </childnode>
        <childnode refid="1894" relation="include">
        </childnode>
        <childnode refid="1895" relation="include">
        </childnode>
        <childnode refid="1896" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
        <childnode refid="1898" relation="include">
        </childnode>
        <childnode refid="1899" relation="include">
        </childnode>
        <childnode refid="1900" relation="include">
        </childnode>
        <childnode refid="1901" relation="include">
        </childnode>
        <childnode refid="1902" relation="include">
        </childnode>
        <childnode refid="1903" relation="include">
        </childnode>
        <childnode refid="1904" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1907" relation="include">
        </childnode>
        <childnode refid="1908" relation="include">
        </childnode>
        <childnode refid="1909" relation="include">
        </childnode>
        <childnode refid="1910" relation="include">
        </childnode>
        <childnode refid="1911" relation="include">
        </childnode>
        <childnode refid="1912" relation="include">
        </childnode>
        <childnode refid="1913" relation="include">
        </childnode>
        <childnode refid="1914" relation="include">
        </childnode>
        <childnode refid="1915" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
        <childnode refid="1921" relation="include">
        </childnode>
        <childnode refid="1998" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1999" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="2000" relation="include">
        </childnode>
        <childnode refid="2002" relation="include">
        </childnode>
        <childnode refid="1991" relation="include">
        </childnode>
        <childnode refid="2004" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="2005" relation="include">
        </childnode>
        <childnode refid="2006" relation="include">
        </childnode>
        <childnode refid="2007" relation="include">
        </childnode>
        <childnode refid="2008" relation="include">
        </childnode>
        <childnode refid="2009" relation="include">
        </childnode>
        <childnode refid="2010" relation="include">
        </childnode>
      </node>
      <node id="1963">
        <label>sys/statvfs.h</label>
      </node>
      <node id="1969">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="1978">
        <label>tuple</label>
      </node>
      <node id="1988">
        <label>future</label>
      </node>
      <node id="1899">
        <label>spdlog/async.h</label>
      </node>
      <node id="1991">
        <label>kernel.h</label>
        <link refid="kernel_8h_source"/>
        <childnode refid="1992" relation="include">
        </childnode>
        <childnode refid="1993" relation="include">
        </childnode>
        <childnode refid="1990" relation="include">
        </childnode>
      </node>
      <node id="1889">
        <label>unistd.h</label>
      </node>
      <node id="1945">
        <label>stack</label>
      </node>
      <node id="1927">
        <label>vector</label>
      </node>
      <node id="1922">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="1923" relation="include">
        </childnode>
      </node>
      <node id="1896">
        <label>signal.h</label>
      </node>
      <node id="1914">
        <label>blazingdb/io/Util/StringUtil.h</label>
      </node>
      <node id="1982">
        <label>cudf/column/column_factories.hpp</label>
      </node>
      <node id="1980">
        <label>cudf/column/column.hpp</label>
      </node>
      <node id="1897">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="1901">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="1944">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1897" relation="include">
        </childnode>
      </node>
      <node id="1909">
        <label>utility</label>
      </node>
      <node id="2001">
        <label>Util/StringUtil.h</label>
      </node>
      <node id="1972">
        <label>io/data_parser/DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="1973" relation="include">
        </childnode>
        <childnode refid="1974" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1966" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
      </node>
      <node id="1910">
        <label>blazingdb/io/Config/BlazingContext.h</label>
      </node>
      <node id="1934">
        <label>cudf/types.hpp</label>
      </node>
      <node id="1921">
        <label>protocols.hpp</label>
        <link refid="protocols_8hpp_source"/>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1920" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
        <childnode refid="1891" relation="include">
        </childnode>
        <childnode refid="1990" relation="include">
        </childnode>
      </node>
      <node id="1995">
        <label>bmr/MemoryMonitor.h</label>
        <link refid="MemoryMonitor_8h_source"/>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1906" relation="include">
        </childnode>
        <childnode refid="1996" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
      </node>
      <node id="1960">
        <label>rmm/mr/device/per_device_resource.hpp</label>
      </node>
      <node id="1911">
        <label>blazingdb/io/Library/Logging/CoutOutput.h</label>
      </node>
      <node id="1974">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="1964">
        <label>communication/CommunicationData.h</label>
        <link refid="CommunicationData_8h_source"/>
        <childnode refid="1897" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
      </node>
      <node id="1990">
        <label>execution_graph/logic_controllers/taskflow/graph.h</label>
        <link refid="graph_8h_source"/>
        <childnode refid="1991" relation="include">
        </childnode>
        <childnode refid="1994" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1995" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
      </node>
      <node id="1890">
        <label>clocale</label>
      </node>
      <node id="2000">
        <label>communication/CommunicationInterface/messageSender.hpp</label>
        <link refid="messageSender_8hpp_source"/>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1997" relation="include">
        </childnode>
        <childnode refid="1909" relation="include">
        </childnode>
        <childnode refid="2001" relation="include">
        </childnode>
        <childnode refid="1996" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
        <childnode refid="1921" relation="include">
        </childnode>
      </node>
      <node id="1993">
        <label>port.h</label>
        <link refid="port_8h_source"/>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1905" relation="include">
        </childnode>
        <childnode refid="1917" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
      </node>
      <node id="1916">
        <label>iostream</label>
      </node>
      <node id="1942">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="1931">
        <label>deque</label>
      </node>
      <node id="1933">
        <label>mutex</label>
      </node>
      <node id="1951">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="1906">
        <label>chrono</label>
      </node>
      <node id="1971">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="1937">
        <label>CodeTimer.h</label>
        <link refid="CodeTimer_8h_source"/>
        <childnode refid="1906" relation="include">
        </childnode>
      </node>
      <node id="2008">
        <label>sys/socket.h</label>
      </node>
      <node id="1953">
        <label>rmm/mr/device/device_memory_resource.hpp</label>
      </node>
      <node id="2004">
        <label>execution_graph/logic_controllers/taskflow/executor.h</label>
        <link refid="executor_8h_source"/>
        <childnode refid="1991" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1996" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
      </node>
      <node id="1907">
        <label>thread</label>
      </node>
      <node id="1948">
        <label>bmr/BlazingMemoryResource.h</label>
        <link refid="BlazingMemoryResource_8h_source"/>
        <childnode refid="1949" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1950" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
        <childnode refid="1953" relation="include">
        </childnode>
        <childnode refid="1954" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1963" relation="include">
        </childnode>
      </node>
      <node id="1957">
        <label>rmm/mr/device/pool_memory_resource.hpp</label>
      </node>
      <node id="1950">
        <label>set</label>
      </node>
      <node id="1939">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="1903">
        <label>algorithm</label>
      </node>
      <node id="1998">
        <label>bmr/initializer.h</label>
        <link refid="initializer_8h_source"/>
        <childnode refid="1948" relation="include">
        </childnode>
      </node>
      <node id="1936">
        <label>cudf/utilities/error.hpp</label>
      </node>
      <node id="1895">
        <label>execinfo.h</label>
      </node>
      <node id="1967">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="2005">
        <label>engine/initialize.h</label>
      </node>
      <node id="1905">
        <label>memory</label>
      </node>
      <node id="2007">
        <label>engine/engine.h</label>
      </node>
      <node id="1913">
        <label>blazingdb/io/Library/Logging/ServiceLogging.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classblazing__context__ref__counter" prot="public">blazing_context_ref_counter</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="initialize_8cpp_1a041d6429f2ec4e780db14de28a11412a" prot="public" static="no" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex initialize_lock</definition>
        <argsstring></argsstring>
        <name>initialize_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="221" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="initialize_8cpp_1aedeffc7d23da25d52b9a50045189fe2b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="222" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="initialize_8cpp_1a3c2348f39cf58c5c0f48742b32b15d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void handler</definition>
        <argsstring>(int sig)</argsstring>
        <name>handler</name>
        <param>
          <type>int</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="88" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a2d05cd714c409b652018a18c8406059b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string get_ip</definition>
        <argsstring>(const std::string &amp;iface_name=&quot;eno1&quot;)</argsstring>
        <name>get_ip</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>iface_name</declname>
          <defval>&quot;eno1&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="99" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="99" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1ad3e49a8a4163c97815f5bc9f513e7bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>auto</type>
        <definition>auto log_level_str_to_enum</definition>
        <argsstring>(std::string level)</argsstring>
        <name>log_level_str_to_enum</name>
        <param>
          <type>std::string</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="122" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="122" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a0043898e3818fad9b88911bdd920fc28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void create_logger</definition>
        <argsstring>(std::string fileName, std::string loggingName, uint16_t ralId, std::string flush_level, std::string logger_level_wanted, std::size_t max_size_logging, bool simple_log=true)</argsstring>
        <name>create_logger</name>
        <param>
          <type>std::string</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>loggingName</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>ralId</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>flush_level</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>logger_level_wanted</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>max_size_logging</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>simple_log</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="147" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="147" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a467afeda876efb78b294cf59c35414ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isEmptyFile</definition>
        <argsstring>(std::ifstream &amp;pFile)</argsstring>
        <name>isEmptyFile</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>pFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="190" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a113ba9c3e7b6721bc9ade3564086baf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printLoggerHeader</definition>
        <argsstring>(const std::string pathLogger, const std::string nameLogger)</argsstring>
        <name>printLoggerHeader</name>
        <param>
          <type>const std::string</type>
          <declname>pathLogger</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>nameLogger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="195" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="195" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a772e8d0e2e2b28d67aee0cb3fdf34430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::pair&lt; std::shared_ptr&lt; <ref refid="classral_1_1cache_1_1CacheMachine" kindref="compound">CacheMachine</ref> &gt;, std::shared_ptr&lt; <ref refid="classral_1_1cache_1_1CacheMachine" kindref="compound">CacheMachine</ref> &gt; &gt;, int &gt;</type>
        <definition>std::pair&lt;std::pair&lt;std::shared_ptr&lt;CacheMachine&gt;,std::shared_ptr&lt;CacheMachine&gt; &gt;, int&gt; initialize</definition>
        <argsstring>(uint16_t ralId, std::string worker_id, std::string network_iface_name, int ralCommunicationPort, std::vector&lt; NodeMetaDataUCP &gt; workers_ucp_info, bool singleNode, std::map&lt; std::string, std::string &gt; config_options, std::string allocation_mode, std::size_t initial_pool_size, std::size_t maximum_pool_size, bool enable_logging)</argsstring>
        <name>initialize</name>
        <param>
          <type>uint16_t</type>
          <declname>ralId</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>worker_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>network_iface_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ralCommunicationPort</declname>
        </param>
        <param>
          <type>std::vector&lt; NodeMetaDataUCP &gt;</type>
          <declname>workers_ucp_info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>singleNode</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>config_options</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>allocation_mode</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>initial_pool_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maximum_pool_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_logging</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the engine and gives us shared pointers to both our transport out cache and the cache we use for receiving messages </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="229" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="229" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a4ea46f0f71a561ab21588ebdce6f08c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clear_graphs</definition>
        <argsstring>(std::vector&lt; int32_t &gt; ctx_tokens)</argsstring>
        <name>clear_graphs</name>
        <param>
          <type>std::vector&lt; int32_t &gt;</type>
          <declname>ctx_tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="624" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="624" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a3ca0982e8f00f57c8be81824c2466bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void finalize</definition>
        <argsstring>(std::vector&lt; int32_t &gt; ctx_tokens)</argsstring>
        <name>finalize</name>
        <param>
          <type>std::vector&lt; int32_t &gt;</type>
          <declname>ctx_tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="646" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="646" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a8ad40c9fc4642e43c8c11fde6e7d72ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>error_code_t</type>
        <definition>error_code_t initialize_C</definition>
        <argsstring>(uint16_t ralId, std::string worker_id, std::string network_iface_name, int ralCommunicationPort, std::vector&lt; NodeMetaDataUCP &gt; workers_ucp_info, bool singleNode, std::map&lt; std::string, std::string &gt; config_options, std::string allocation_mode, std::size_t initial_pool_size, std::size_t maximum_pool_size, bool enable_logging)</argsstring>
        <name>initialize_C</name>
        <param>
          <type>uint16_t</type>
          <declname>ralId</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>worker_id</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>network_iface_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ralCommunicationPort</declname>
        </param>
        <param>
          <type>std::vector&lt; NodeMetaDataUCP &gt;</type>
          <declname>workers_ucp_info</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>singleNode</declname>
        </param>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>config_options</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>allocation_mode</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>initial_pool_size</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>maximum_pool_size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_logging</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="668" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="668" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1adae9b4b93ed071988f50402abece9cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>error_code_t</type>
        <definition>error_code_t finalize_C</definition>
        <argsstring>(std::vector&lt; int32_t &gt; ctx_tokens)</argsstring>
        <name>finalize_C</name>
        <param>
          <type>std::vector&lt; int32_t &gt;</type>
          <declname>ctx_tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="699" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="699" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a227861ee146633c88a49917eaadf5d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t getFreeMemory</definition>
        <argsstring>()</argsstring>
        <name>getFreeMemory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="708" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1a6dea7ca47d6d8c9f651e841ae1704bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetMaxMemoryUsed</definition>
        <argsstring>(int to)</argsstring>
        <name>resetMaxMemoryUsed</name>
        <param>
          <type>int</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="714" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="714" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="initialize_8cpp_1aacca369ae9ac47a27b15293c81ccab81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t getMaxMemoryUsed</definition>
        <argsstring>()</argsstring>
        <name>getMaxMemoryUsed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" line="719" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp" bodystart="719" bodyend="722"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;clocale&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arpa/inet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;net/if.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/ioctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execinfo.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ucp/api/ucp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/async.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/sinks/basic_file_sink.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/sinks/stdout_color_sinks.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/sinks/rotating_file_sink.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cuda_runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::this_thread::sleep_for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Config/BlazingContext.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Library/Logging/CoutOutput.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Library/Logging/Logger.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;blazingdb/io/Library/Logging/ServiceLogging.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Util/StringUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/ucx_init.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationData.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationInterface/protocols.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bmr/initializer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bmr/BlazingMemoryResource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cudf/detail/gather.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationInterface/node.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationInterface/protocols.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationInterface/messageSender.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;communication/CommunicationInterface/messageListener.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;execution_graph/logic_controllers/taskflow/kernel.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;execution_graph/logic_controllers/taskflow/executor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;error.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1literals" kindref="compound">fmt::literals</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;execution_graph/logic_controllers/CacheMachine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;engine/initialize.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;engine/static.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>this<sp/>contains<sp/>function<sp/>call<sp/>for<sp/>getProductDetails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;engine/engine.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1literals" kindref="compound">fmt::literals</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral_1_1cache" kindref="compound">ral::cache</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classblazing__context__ref__counter" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classblazing__context__ref__counter" kindref="compound">blazing_context_ref_counter</ref><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classblazing__context__ref__counter" kindref="compound">blazing_context_ref_counter</ref>&amp;<sp/>getInstance()<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Myers&apos;<sp/>singleton.<sp/>Thread<sp/>safe<sp/>and<sp/>unique.<sp/>Note:<sp/>C++11<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classblazing__context__ref__counter" kindref="compound">blazing_context_ref_counter</ref><sp/>instance;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>get_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;count;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>increase()<sp/>{<sp/>++count;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>+1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>decrease()<sp/>{<sp/>assert(this-&gt;count<sp/>&gt;<sp/>0);<sp/>--count;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>-1<sp/>(assert<sp/>if<sp/>the<sp/>count<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*array[10];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>void*&apos;s<sp/>for<sp/>all<sp/>entries<sp/>on<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>backtrace(array,<sp/>10);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>out<sp/>all<sp/>the<sp/>frames<sp/>to<sp/>stderr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>signal<sp/>%d:\n&quot;</highlight><highlight class="normal">,<sp/>sig);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>backtrace_symbols_fd(array,<sp/>size,<sp/>STDERR_FILENO);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">std::string<sp/>get_ip(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>iface_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;eno1&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ifreq<sp/>ifr;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_DGRAM,<sp/>0);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>want<sp/>to<sp/>get<sp/>an<sp/>IPv4<sp/>IP<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ifr.ifr_addr.sa_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I<sp/>want<sp/>IP<sp/>address<sp/>attached<sp/>to<sp/>&quot;eth0&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(ifr.ifr_name,<sp/>iface_name.c_str(),<sp/>IFNAMSIZ<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ioctl(fd,<sp/>SIOCGIFADDR,<sp/>&amp;ifr);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>display<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;%s\n&quot;,<sp/>inet_ntoa(((struct<sp/>sockaddr_in<sp/>*)&amp;ifr.ifr_addr)-&gt;sin_addr));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>the_ip(inet_ntoa(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in<sp/>*)<sp/>&amp;ifr.ifr_addr)-&gt;sin_addr));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>the_ip;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>log_level_str_to_enum(std::string<sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;critical&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::critical;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;err&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::err;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::info;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::debug;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::trace;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::warn;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::level::off;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>simple_log:<sp/>true<sp/>(no<sp/>timestamp<sp/>or<sp/>log<sp/>level)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>create_logger(std::string<sp/>fileName,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>loggingName,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>ralId,<sp/>std::string<sp/>flush_level,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_level_wanted,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>max_size_logging,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simple_log=</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>existing_logger<sp/>=<sp/>spdlog::get(loggingName);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(existing_logger){<sp/></highlight><highlight class="comment">//<sp/>if<sp/>logger<sp/>already<sp/>exists,<sp/>dont<sp/>initialize<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stdout_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::stdout_color_sink_mt&gt;();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>stdout_sink-&gt;set_pattern(</highlight><highlight class="stringliteral">&quot;[%T.%e]<sp/>[%^%l%$]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>stdout_sink-&gt;set_level(spdlog::level::err);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>discuss<sp/>how<sp/>we<sp/>should<sp/>handle<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>max_num_files<sp/>=<sp/>4<sp/>-&gt;<sp/>will<sp/>have:<sp/>RAL.0.log,<sp/>RAL.0.1.log,<sp/>RAL.0.2.log,<sp/>RAL.0.3.log,<sp/>RAL.0.4.log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_num_files<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rotating_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::rotating_file_sink_mt&gt;<sp/>(fileName,<sp/>max_size_logging,<sp/>max_num_files);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(simple_log)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotating_sink-&gt;set_pattern(fmt::format(</highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotating_sink-&gt;set_pattern(fmt::format(</highlight><highlight class="stringliteral">&quot;%Y-%m-%d<sp/>%T.%e|{}|%^%l%$|%v&quot;</highlight><highlight class="normal">,<sp/>ralId));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>ALL<sp/>levels<sp/>of<sp/>info<sp/>to<sp/>be<sp/>registered.<sp/>So<sp/>using<sp/>by<sp/>default<sp/>`trace`<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>rotating_sink-&gt;set_level(spdlog::level::trace);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::sinks_init_list<sp/>sink_list<sp/>=<sp/>{stdout_sink,<sp/>rotating_sink};</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>logger<sp/>=<sp/>std::make_shared&lt;spdlog::async_logger&gt;(loggingName,<sp/>sink_list,<sp/>spdlog::thread_pool(),<sp/>spdlog::async_overflow_policy::block);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>level<sp/>of<sp/>logs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>logger-&gt;set_level(log_level_str_to_enum(logger_level_wanted));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::register_logger(logger);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::flush_on(log_level_str_to_enum(flush_level));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::flush_every(std::chrono::seconds(1));</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//=============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmptyFile(std::ifstream&amp;<sp/>pFile)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pFile.peek()<sp/>==<sp/>std::ifstream::traits_type::eof();</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printLoggerHeader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>pathLogger,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>nameLogger){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>headers<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;queries_logger&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id|query_id|start_time|plan|query&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;kernels_logger&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id|query_id|kernel_id|is_kernel|kernel_type|description&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;kernels_edges_logger&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;ral_id|query_id|source|sink&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;task_logger&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;time_started|ral_id|query_id|kernel_id|duration_decaching|duration_execution|input_num_rows|input_num_bytes&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;cache_events_logger&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ral_id|query_id|message_id|cache_id|num_rows|num_bytes|event_type|timestamp_begin|timestamp_end|description&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;log_time|node_id|type|query_id|step|substep|info|duration|extra1|data1|extra2|data2&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;input_comms&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unique_id|ral_id|query_id|kernel_id|dest_ral_id|dest_ral_count|dest_cache_id|message_id|phase&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;output_comms&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;unique_id|ral_id|query_id|kernel_id|dest_ral_id|dest_ral_count|dest_cache_id|message_id|phase&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>fileLogger(pathLogger);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fileLogger.good())<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>emptyLogger<sp/>=<sp/>isEmptyFile(fileLogger);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(emptyLogger){</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(nameLogger);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;info(headers.at(nameLogger));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">std::mutex<sp/>initialize_lock;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">std::pair&lt;std::pair&lt;std::shared_ptr&lt;CacheMachine&gt;,std::shared_ptr&lt;CacheMachine&gt;<sp/>&gt;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>initialize(uint16_t<sp/>ralId,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>worker_id,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>network_iface_name,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ralCommunicationPort,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;NodeMetaDataUCP&gt;<sp/>workers_ucp_info,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>singleNode,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>config_options,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>allocation_mode,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>initial_pool_size,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>maximum_pool_size,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable_logging)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>init_lock(initialize_lock);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>device_mem_resouce_consumption_thresh<sp/>=<sp/>0.6;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>config_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;BLAZING_DEVICE_MEM_CONSUMPTION_THRESHOLD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_mem_resouce_consumption_thresh<sp/>=<sp/>std::stof(config_options[</highlight><highlight class="stringliteral">&quot;BLAZING_DEVICE_MEM_CONSUMPTION_THRESHOLD&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logging_dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;blazing_log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>config_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;BLAZING_LOGGING_DIRECTORY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging_dir<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;BLAZING_LOGGING_DIRECTORY&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>logging_directory_missing<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>sb;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(stat(logging_dir.c_str(),<sp/>&amp;sb)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>S_ISDIR(sb.st_mode))){<sp/></highlight><highlight class="comment">//<sp/>logging_dir<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>assuming<sp/>that<sp/>this<sp/>logging<sp/>directory<sp/>was<sp/>created<sp/>by<sp/>the<sp/>python<sp/>layer,<sp/>because<sp/>only<sp/>the<sp/>python<sp/>layer<sp/>can<sp/>only<sp/>target<sp/>on<sp/>directory<sp/>creation<sp/>per<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>having<sp/>all<sp/>RALs<sp/>independently<sp/>trying<sp/>to<sp/>create<sp/>a<sp/>directory<sp/>simulatenously<sp/>can<sp/>cause<sp/>problems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging_directory_missing<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logging_dir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>allocator_logging_file<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_logging<sp/>&amp;&amp;<sp/>!logging_directory_missing){</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_logging_file<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/allocator.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>BlazingRMMInitialize(allocation_mode,<sp/>initial_pool_size,<sp/>maximum_pool_size,<sp/>allocator_logging_file,<sp/>device_mem_resouce_consumption_thresh);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DISCLAIMER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Support<sp/>proper<sp/>locale<sp/>support<sp/>for<sp/>non-US<sp/>cases<sp/>(percy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>std::setlocale(LC_ALL,<sp/></highlight><highlight class="stringliteral">&quot;en_US.UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>std::setlocale(LC_NUMERIC,<sp/></highlight><highlight class="stringliteral">&quot;en_US.UTF-8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//signal(SIGSEGV,<sp/>handler);<sp/><sp/><sp/>//<sp/>install<sp/>our<sp/>handler.<sp/>This<sp/>is<sp/>for<sp/>debugging.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ralHost<sp/>=<sp/>get_ip(network_iface_name);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>initLogMsg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INITIALIZING<sp/>RAL.<sp/>RAL<sp/>ID:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>initLogMsg<sp/>=<sp/>initLogMsg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;RAL<sp/>Host:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>ralHost<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralCommunicationPort)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>initLogMsg<sp/>=<sp/>initLogMsg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;Network<sp/>Interface:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>network_iface_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>initLogMsg<sp/>=<sp/>initLogMsg<sp/>+<sp/>(singleNode<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Is<sp/>Single<sp/>Node,<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>Is<sp/>Not<sp/>Single<sp/>Node,<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>env_cuda_device<sp/>=<sp/>std::getenv(</highlight><highlight class="stringliteral">&quot;CUDA_VISIBLE_DEVICES&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>env_cuda_device_str<sp/>=<sp/>env_cuda_device<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>std::string(env_cuda_device);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>initLogMsg<sp/>=<sp/>initLogMsg<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;CUDA_VISIBLE_DEVICES<sp/>is<sp/>set<sp/>to:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>env_cuda_device_str<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>require_acknowledge<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>the<sp/>require<sp/>acknowledge<sp/>feature<sp/>is<sp/>currently<sp/>not<sp/>working,<sp/>for<sp/>now<sp/>it<sp/>is<sp/>permanently<sp/>disabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>iter<sp/>=<sp/>config_options.find(&quot;REQUIRE_ACKNOWLEDGE&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(iter<sp/>!=<sp/>config_options.end()){</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>require_acknowledge<sp/>=<sp/>(config_options[&quot;REQUIRE_ACKNOWLEDGE&quot;]<sp/>==<sp/>&quot;true&quot;<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_options[&quot;REQUIRE_ACKNOWLEDGE&quot;]<sp/>==<sp/>&quot;True&quot;<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_options[&quot;REQUIRE_ACKNOWLEDGE&quot;]<sp/>==<sp/>&quot;1&quot;<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_options[&quot;REQUIRE_ACKNOWLEDGE&quot;]<sp/>==<sp/>&quot;TRUE&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffers_size<sp/>=<sp/>1048576;<sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>MBs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;TRANSPORT_BUFFER_BYTE_SIZE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers_size<sp/>=<sp/>std::stoi(config_options[</highlight><highlight class="stringliteral">&quot;TRANSPORT_BUFFER_BYTE_SIZE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_comm_threads<sp/>=<sp/>20;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;MAX_SEND_MESSAGE_THREADS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_comm_threads<sp/>=<sp/>std::stoi(config_options[</highlight><highlight class="stringliteral">&quot;MAX_SEND_MESSAGE_THREADS&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_buffers<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;TRANSPORT_POOL_NUM_BUFFERS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_buffers<sp/>=<sp/>std::stoi(config_options[</highlight><highlight class="stringliteral">&quot;TRANSPORT_POOL_NUM_BUFFERS&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>avoid<sp/>redundancy<sp/>the<sp/>default<sp/>value<sp/>or<sp/>user<sp/>defined<sp/>value<sp/>for<sp/>this<sp/>parameter<sp/>is<sp/>placed<sp/>on<sp/>the<sp/>pyblazing<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;BLAZ_HOST_MEM_CONSUMPTION_THRESHOLD&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>config_options.end()<sp/>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>host_memory_quota<sp/>=<sp/>std::stof(config_options[</highlight><highlight class="stringliteral">&quot;BLAZ_HOST_MEM_CONSUMPTION_THRESHOLD&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblazing__host__memory__resource_1a1fa50b80350c0718dc4ee026e8425e7a" kindref="member">blazing_host_memory_resource::getInstance</ref>().<ref refid="classblazing__host__memory__resource_1a24f72f410d6ef29937661e2fe79fd292" kindref="member">initialize</ref>(host_memory_quota);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>AWS<sp/>S3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>BlazingContext::getInstance()-&gt;initExternalSystems();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>executor_threads<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exec_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;EXECUTOR_THREADS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exec_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executor_threads<sp/>=<sp/>std::stoi(config_options[</highlight><highlight class="stringliteral">&quot;EXECUTOR_THREADS&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>flush_level<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>log_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;LOGGING_FLUSH_LEVEL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flush_level<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;LOGGING_FLUSH_LEVEL&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>enable_general_engine_logs;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>log_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;ENABLE_GENERAL_ENGINE_LOGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_general_engine_logs<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;ENABLE_GENERAL_ENGINE_LOGS&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>enable_comms_logs;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>log_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;ENABLE_COMMS_LOGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_comms_logs<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;ENABLE_COMMS_LOGS&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>enable_task_logs;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>log_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;ENABLE_TASK_LOGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_task_logs<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;ENABLE_TASK_LOGS&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>enable_other_engine_logs;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>log_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;ENABLE_OTHER_ENGINE_LOGS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_other_engine_logs<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;ENABLE_OTHER_ENGINE_LOGS&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_level_wanted<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>log_level_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;LOGGING_LEVEL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_level_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger_level_wanted<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;LOGGING_LEVEL&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>max_size_logging<sp/>=<sp/>1073741824;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size_log_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;LOGGING_MAX_SIZE_PER_FILE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size_log_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_size_logging<sp/>=<sp/>std::stoi(config_options[</highlight><highlight class="stringliteral">&quot;LOGGING_MAX_SIZE_PER_FILE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>comm::blazing_protocol<sp/>protocol<sp/>=<sp/>comm::blazing_protocol::tcp;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>protocol_value<sp/>=<sp/>StringUtil::toLower(config_options[</highlight><highlight class="stringliteral">&quot;PROTOCOL&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(protocol_value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ucx&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>protocol<sp/>=<sp/>comm::blazing_protocol::ucx;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!initialized){</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spdlog<sp/>batch<sp/>logger</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::shutdown();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog::init_thread_pool(8192,<sp/>1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enable_general_engine_logs==</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>batchLoggerFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/RAL.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(batchLoggerFileName,<sp/></highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(batchLoggerFileName,<sp/></highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enable_comms_logs==</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>outputCommunicationLoggerFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/output_comms.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(outputCommunicationLoggerFileName,<sp/></highlight><highlight class="stringliteral">&quot;output_comms&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(outputCommunicationLoggerFileName,<sp/></highlight><highlight class="stringliteral">&quot;output_comms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>inputCommunicationLoggerFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/input_comms.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(inputCommunicationLoggerFileName,<sp/></highlight><highlight class="stringliteral">&quot;input_comms&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(inputCommunicationLoggerFileName,<sp/></highlight><highlight class="stringliteral">&quot;input_comms&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enable_other_engine_logs==</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>queriesFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/bsql_queries.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(queriesFileName,<sp/></highlight><highlight class="stringliteral">&quot;queries_logger&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(queriesFileName,<sp/></highlight><highlight class="stringliteral">&quot;queries_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>kernelsFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/bsql_kernels.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(kernelsFileName,<sp/></highlight><highlight class="stringliteral">&quot;kernels_logger&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(kernelsFileName,<sp/></highlight><highlight class="stringliteral">&quot;kernels_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>kernelsEdgesFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/bsql_kernels_edges.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(kernelsEdgesFileName,<sp/></highlight><highlight class="stringliteral">&quot;kernels_edges_logger&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(kernelsEdgesFileName,<sp/></highlight><highlight class="stringliteral">&quot;kernels_edges_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cacheEventsFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/bsql_cache_events.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(cacheEventsFileName,<sp/></highlight><highlight class="stringliteral">&quot;cache_events_logger&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(cacheEventsFileName,<sp/></highlight><highlight class="stringliteral">&quot;cache_events_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enable_task_logs==</highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tasksFileName<sp/>=<sp/>logging_dir<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/bsql_kernel_tasks.&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(ralId)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>create_logger(tasksFileName,<sp/></highlight><highlight class="stringliteral">&quot;task_logger&quot;</highlight><highlight class="normal">,<sp/>ralId,<sp/>flush_level,<sp/>logger_level_wanted,<sp/>max_size_logging);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printLoggerHeader(tasksFileName,<sp/></highlight><highlight class="stringliteral">&quot;task_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logging_directory_missing){</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;BLAZING_LOGGING_DIRECTORY<sp/>not<sp/>found.<sp/>It<sp/>was<sp/>not<sp/>created.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;debug(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=initLogMsg);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>product_details<sp/>=<sp/>getProductDetails();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>product_details_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Product<sp/>Details:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;::iterator<sp/>it<sp/>=<sp/>product_details.begin();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>product_details.end())<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>product_details_str<sp/>+=<sp/>it-&gt;first<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>it-&gt;second<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;debug(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=product_details_str);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblazing__device__memory__resource" kindref="compound">blazing_device_memory_resource</ref>*<sp/>resource<sp/>=<sp/>&amp;<ref refid="classblazing__device__memory__resource_1a31735d61d23aef05666c7c3f981c86fe" kindref="member">blazing_device_memory_resource::getInstance</ref>();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>alloc_info<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;allocation_mode:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>allocation_mode;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>total_memory:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(resource-&gt;get_total_memory());</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>memory_limit:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(resource-&gt;get_memory_limit());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>type:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>resource-&gt;get_type();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>initial_pool_size:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(initial_pool_size);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>maximum_pool_size:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(maximum_pool_size);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>allocator_logging_file:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>allocator_logging_file;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;debug(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=alloc_info);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>orc_files_path;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;BLAZING_CACHE_DIRECTORY&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>config_options.end())<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orc_files_path<sp/>=<sp/>config_options[</highlight><highlight class="stringliteral">&quot;BLAZING_CACHE_DIRECTORY&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!singleNode)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orc_files_path<sp/>+=<sp/>std::to_string(ralId);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>communicationData<sp/>=<sp/>ral::communication::CommunicationData::getInstance();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>communicationData.initialize(worker_id,<sp/>orc_files_path);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_input_caches<sp/>=<sp/>std::make_pair(std::make_shared&lt;CacheMachine&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;messages_out&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,CACHE_LEVEL_CPU<sp/>),std::make_shared&lt;CacheMachine&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;messages_in&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>ucp_context_h<sp/>ucp_context<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>ucp<sp/>servers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!singleNode){</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>comm::node&gt;<sp/>nodes_info_map;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucp_worker_h<sp/>self_worker<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(protocol<sp/>==<sp/>comm::blazing_protocol::ucx){</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucp_context<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">ucp_context_h</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(workers_ucp_info[0].context_handle);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self_worker<sp/>=<sp/>ral::communication::CreatetUcpWorker(ucp_context);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">ral::communication::UcpWorkerAddress</ref><sp/>ucpWorkerAddress<sp/>=<sp/>ral::communication::GetUcpWorkerAddress(self_worker);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>ral::communication::UcpWorkerAddress&gt;<sp/>peer_addresses_map;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>th<sp/>=<sp/>std::thread([ralCommunicationPort,<sp/>total_peers=workers_ucp_info.size(),<sp/>&amp;peer_addresses_map,<sp/>worker_id,<sp/>workers_ucp_info](){</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classral_1_1communication_1_1AddressExchangerForSender" kindref="compound">ral::communication::AddressExchangerForSender</ref><sp/>exchanger(ralCommunicationPort);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>total_peers;<sp/>i++){</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(workers_ucp_info[i].worker_id<sp/>==<sp/>worker_id){</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exchanger.acceptConnection()){</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>worker_id<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>worker_id_buff_size;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(exchanger.fd(),<sp/>&amp;worker_id_buff_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t),<sp/>MSG_WAITALL);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;recv<sp/>worker_id_buff_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>worker_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>worker_id(worker_id_buff_size,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(exchanger.fd(),<sp/>&amp;worker_id[0],<sp/>worker_id.size(),<sp/>MSG_WAITALL);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/>worker_id.size(),<sp/></highlight><highlight class="stringliteral">&quot;recv<sp/>worker_id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>ucp_worker_address<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ucp_worker_address_size;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(exchanger.fd(),<sp/>&amp;ucp_worker_address_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t),<sp/>MSG_WAITALL);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;recv<sp/>ucp_worker_address_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>ucp_worker_address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uint8_t<sp/>*data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::uint8_t[ucp_worker_address_size];</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">ral::communication::UcpWorkerAddress</ref><sp/>peerUcpWorkerAddress{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">ucp_address_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data),</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucp_worker_address_size};</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(exchanger.fd(),<sp/>peerUcpWorkerAddress.address,<sp/>ucp_worker_address_size,<sp/>MSG_WAITALL);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/>ucp_worker_address_size,<sp/></highlight><highlight class="stringliteral">&quot;recv<sp/>ucp_worker_address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peer_addresses_map.emplace(worker_id,<sp/>peerUcpWorkerAddress);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exchanger.closeCurrentConnection();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::seconds(1));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;worker_info<sp/>:<sp/>workers_ucp_info){</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(worker_info.worker_id<sp/>==<sp/>worker_id){</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classral_1_1communication_1_1AddressExchangerForReceiver" kindref="compound">ral::communication::AddressExchangerForReceiver</ref><sp/>exchanger(worker_info.port,<sp/>worker_info.ip.c_str());</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>worker_id<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>worker_id_buff_size<sp/>=<sp/>worker_id.size();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>send(exchanger.fd(),<sp/>&amp;worker_id_buff_size,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t),<sp/>0);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;send<sp/>worker_id_buff_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>worker_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>send(exchanger.fd(),<sp/>worker_id.data(),<sp/>worker_id.size(),<sp/>0);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/>worker_id.size(),<sp/></highlight><highlight class="stringliteral">&quot;send<sp/>worker_id&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>ucp_worker_address<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>send(exchanger.fd(),<sp/>&amp;ucpWorkerAddress.length,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t),<sp/>0);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;send<sp/>ucp_worker_address_size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>ucp_worker_address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>send(exchanger.fd(),<sp/>ucpWorkerAddress.address,<sp/>ucpWorkerAddress.length,<sp/>0);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ral::communication::CheckError(static_cast&lt;size_t&gt;(ret)<sp/>!=<sp/>ucpWorkerAddress.length,<sp/></highlight><highlight class="stringliteral">&quot;send<sp/>ucp_worker_address&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>th.join();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;worker_info<sp/>:<sp/>workers_ucp_info){</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(worker_info.worker_id<sp/>==<sp/>worker_id){</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">ral::communication::UcpWorkerAddress</ref><sp/>peerUcpWorkerAddress<sp/>=<sp/>peer_addresses_map[worker_info.worker_id];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucp_ep_h<sp/>ucp_ep<sp/>=<sp/>ral::communication::CreateUcpEp(self_worker,<sp/>peerUcpWorkerAddress);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout<sp/>&lt;&lt;<sp/>&apos;[&apos;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::this_thread::get_id()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;]<sp/>local:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*reinterpret_cast&lt;std::size_t<sp/>*&gt;(ucpWorkerAddress.address)<sp/>&lt;&lt;<sp/>&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ucpWorkerAddress.length<sp/>&lt;&lt;<sp/>std::endl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;[&apos;<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::this_thread::get_id()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;]<sp/>peer:<sp/>&quot;<sp/>&lt;&lt;<sp/>std::hex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>*reinterpret_cast&lt;std::size_t<sp/>*&gt;(peerUcpWorkerAddress.address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;&apos;<sp/>&apos;<sp/>&lt;&lt;<sp/>peerUcpWorkerAddress.length<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>auto<sp/>worker_info<sp/>=<sp/>workers_ucp_info[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_info_map.emplace(worker_info.worker_id,<sp/><ref refid="classcomm_1_1node" kindref="compound">comm::node</ref>(ralId,<sp/>worker_info.worker_id,<sp/>ucp_ep,<sp/>self_worker));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm::ucx_message_listener::initialize_message_listener(</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucp_context,<sp/>self_worker,nodes_info_map,20,<sp/>output_input_caches.second);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm::ucx_message_listener::get_instance()-&gt;poll_begin_message_tag(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_input_caches.second<sp/>=<sp/>comm::ucx_message_listener::get_instance()-&gt;get_input_cache();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;&amp;worker_info<sp/>:<sp/>workers_ucp_info){</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(worker_info.worker_id<sp/>==<sp/>worker_id){</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_info_map.emplace(worker_info.worker_id,<sp/><ref refid="classcomm_1_1node" kindref="compound">comm::node</ref>(ralId,<sp/>worker_info.worker_id,<sp/>worker_info.ip,<sp/>worker_info.port));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm::tcp_message_listener::initialize_message_listener(nodes_info_map,ralCommunicationPort,num_comm_threads,<sp/>output_input_caches.second);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm::tcp_message_listener::get_instance()-&gt;start_polling();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ralCommunicationPort<sp/>=<sp/>comm::tcp_message_listener::get_instance()-&gt;get_port();<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>listener<sp/>was<sp/>already<sp/>initialized,<sp/>we<sp/>want<sp/>to<sp/>get<sp/>the<sp/>port<sp/>that<sp/>was<sp/>originally<sp/>set<sp/>and<sp/>send<sp/>that<sp/>back<sp/>to<sp/>python<sp/>side</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_input_caches.second<sp/>=<sp/>comm::tcp_message_listener::get_instance()-&gt;get_input_cache();</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm::message_sender::initialize_instance(output_input_caches.first,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes_info_map,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_comm_threads,<sp/>ucp_context,<sp/>self_worker,<sp/>ralId,protocol,require_acknowledge);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm::message_sender::get_instance()-&gt;<ref refid="classcomm_1_1message__sender_1af686fdcc4f5d1c078f02ff1988725c06" kindref="member">run_polling</ref>();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_input_caches.first<sp/>=<sp/>comm::message_sender::get_instance()-&gt;get_output_cache();</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>map_ucx<sp/>=<sp/>protocol<sp/>==<sp/>comm::blazing_protocol::ucx;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>ral::memory::set_allocation_pools(buffers_size,<sp/>num_buffers,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers_size,<sp/>num_buffers,<sp/>map_ucx,<sp/>ucp_context);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>processing_memory_limit_threshold<sp/>=<sp/>0.9;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>config_it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;BLAZING_PROCESSING_DEVICE_MEM_CONSUMPTION_THRESHOLD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config_it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processing_memory_limit_threshold<sp/>=<sp/>std::stod(config_options[</highlight><highlight class="stringliteral">&quot;BLAZING_PROCESSING_DEVICE_MEM_CONSUMPTION_THRESHOLD&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>ral::execution::executor::init_executor(executor_threads,<sp/>processing_memory_limit_threshold);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>blazing_context_ref_counter::getInstance().increase();</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(output_input_caches,<sp/>ralCommunicationPort);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_graphs(std::vector&lt;int32_t&gt;<sp/>ctx_tokens)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ctx_token<sp/>:<sp/>ctx_tokens)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;will<sp/>deregister<sp/>the<sp/>graph<sp/>with<sp/>token:<sp/>%d\n&quot;,<sp/>ctx_token);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classral_1_1cache_1_1graph" kindref="compound">graph</ref><sp/>=<sp/>comm::graphs_info::getInstance().get_graph(ctx_token);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classral_1_1cache_1_1graph" kindref="compound">graph</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;\tnot<sp/>null\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>percy<sp/>felipe<sp/>william<sp/>rommel<sp/>threads/futures<sp/>in<sp/>c++<sp/>cannot<sp/>be<sp/>cancel<sp/>by<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>itself<sp/>we<sp/>need<sp/>to<sp/>program<sp/>that<sp/>logic:<sp/>We<sp/>should<sp/>implement<sp/>some<sp/>sort<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>interruption<sp/>logic<sp/>for<sp/>the<sp/>kernel<sp/>threads/futures<sp/>and<sp/>then<sp/>clean<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>memory.<sp/>For<sp/>now<sp/>we<sp/>are<sp/>using<sp/>getExecuteGraphResult<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finalize<sp/>caller<sp/>and<sp/>this<sp/>will<sp/>ensure<sp/>to<sp/>free<sp/>all<sp/>the<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Related<sp/>with<sp/>-&gt;<sp/>https://github.com/BlazingDB/blazingsql/issues/1363</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>freeThis<sp/>=<sp/>getExecuteGraphResult(<ref refid="classral_1_1cache_1_1graph" kindref="compound">graph</ref>,<sp/>ctx_token);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;\tdone!\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finalize(std::vector&lt;int32_t&gt;<sp/>ctx_tokens)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>clear_graphs(ctx_tokens);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blazing_context_ref_counter::getInstance().get_count()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>BlazingContext::getInstance()-&gt;shutDownExternalSystems();</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>BlazingRMMFinalize<sp/>and<sp/>cudaDeviceReset<sp/>percy<sp/>william<sp/>felipe<sp/>rommel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>want<sp/>to<sp/>finalize<sp/>all<sp/>the<sp/>engine<sp/>properly<sp/>we<sp/>need<sp/>to<sp/>implement<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>many<sp/>parts:<sp/>thread<sp/>interruptions,<sp/>free<sp/>memory<sp/>from<sp/>incomplete<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>threads,<sp/>notify<sp/>every<sp/>ral<sp/>node<sp/>to<sp/>shutdown<sp/>the<sp/>processing,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>More<sp/>details<sp/>here<sp/>-&gt;<sp/>https://github.com/BlazingDB/blazingsql/issues/1363</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BlazingRMMFinalize();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::shutdown();</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cudaDeviceReset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>blazing_context_ref_counter::getInstance().decrease();</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">error_code_t<sp/>initialize_C(uint16_t<sp/>ralId,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>worker_id,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>network_iface_name,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ralCommunicationPort,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;NodeMetaDataUCP&gt;<sp/>workers_ucp_info,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>singleNode,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>config_options,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>allocation_mode,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>initial_pool_size,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>maximum_pool_size,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable_logging)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialize(ralId,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worker_id,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>network_iface_name,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ralCommunicationPort,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workers_ucp_info,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singleNode,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_options,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocation_mode,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_pool_size,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maximum_pool_size,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_logging);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_SUCCESS;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_EXCEPTION;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">error_code_t<sp/>finalize_C(std::vector&lt;int32_t&gt;<sp/>ctx_tokens)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalize(ctx_tokens);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_SUCCESS;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E_EXCEPTION;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>getFreeMemory()<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBlazingMemoryResource" kindref="compound">BlazingMemoryResource</ref>*<sp/>resource<sp/>=<sp/>&amp;<ref refid="classblazing__device__memory__resource_1a31735d61d23aef05666c7c3f981c86fe" kindref="member">blazing_device_memory_resource::getInstance</ref>();</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_free_memory<sp/>=<sp/>resource-&gt;get_memory_limit()<sp/>-<sp/>resource-&gt;get_memory_used();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_free_memory;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetMaxMemoryUsed(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblazing__device__memory__resource" kindref="compound">blazing_device_memory_resource</ref>*<sp/>resource<sp/>=<sp/>&amp;<ref refid="classblazing__device__memory__resource_1a31735d61d23aef05666c7c3f981c86fe" kindref="member">blazing_device_memory_resource::getInstance</ref>();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>resource-&gt;reset_max_memory_used(to);</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>getMaxMemoryUsed()<sp/>{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classblazing__device__memory__resource" kindref="compound">blazing_device_memory_resource</ref>*<sp/>resource<sp/>=<sp/>&amp;<ref refid="classblazing__device__memory__resource_1a31735d61d23aef05666c7c3f981c86fe" kindref="member">blazing_device_memory_resource::getInstance</ref>();</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resource-&gt;get_max_memory_used();</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp"/>
  </compounddef>
</doxygen>

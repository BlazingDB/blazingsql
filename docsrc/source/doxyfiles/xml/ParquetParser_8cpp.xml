<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ParquetParser_8cpp" kind="file" language="C++">
    <compoundname>ParquetParser.cpp</compoundname>
    <includes refid="parquet__metadata_8h" local="yes">metadata/parquet_metadata.h</includes>
    <includes refid="ParquetParser_8h" local="yes">ParquetParser.h</includes>
    <includes refid="CommonOperations_8h" local="yes">utilities/CommonOperations.h</includes>
    <includes local="no">numeric</includes>
    <includes local="no">arrow/io/file.h</includes>
    <includes local="yes">ExceptionHandling/BlazingThread.h</includes>
    <includes local="no">parquet/column_writer.h</includes>
    <includes local="no">parquet/file_writer.h</includes>
    <includes local="no">cudf/io/parquet.hpp</includes>
    <incdepgraph>
      <node id="5987">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="5988" relation="include">
        </childnode>
        <childnode refid="5989" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5991" relation="include">
        </childnode>
        <childnode refid="5993" relation="include">
        </childnode>
      </node>
      <node id="6012">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="6001">
        <label>parquet/api/reader.h</label>
      </node>
      <node id="6022">
        <label>arrow/io/file.h</label>
      </node>
      <node id="6010">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="5996">
        <label>cstdint</label>
      </node>
      <node id="5991">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="5988" relation="include">
        </childnode>
        <childnode refid="5989" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
      </node>
      <node id="6018">
        <label>cudf/io/datasource.hpp</label>
      </node>
      <node id="6021">
        <label>numeric</label>
      </node>
      <node id="5990">
        <label>string</label>
      </node>
      <node id="6013">
        <label>map</label>
      </node>
      <node id="6006">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="5993">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5994" relation="include">
        </childnode>
        <childnode refid="5995" relation="include">
        </childnode>
        <childnode refid="5997" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
      </node>
      <node id="6003">
        <label>../data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="6004" relation="include">
        </childnode>
        <childnode refid="6005" relation="include">
        </childnode>
        <childnode refid="6006" relation="include">
        </childnode>
        <childnode refid="6007" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
        <childnode refid="6009" relation="include">
        </childnode>
        <childnode refid="6010" relation="include">
        </childnode>
        <childnode refid="5994" relation="include">
        </childnode>
        <childnode refid="6011" relation="include">
        </childnode>
        <childnode refid="6012" relation="include">
        </childnode>
        <childnode refid="6013" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="6014" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
      </node>
      <node id="6019">
        <label>utilities/CommonOperations.h</label>
        <link refid="CommonOperations_8h_source"/>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
        <childnode refid="6020" relation="include">
        </childnode>
      </node>
      <node id="6004">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="5989">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="6016">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5994" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
      </node>
      <node id="6008">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="6023">
        <label>ExceptionHandling/BlazingThread.h</label>
      </node>
      <node id="6011">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="6025">
        <label>parquet/file_writer.h</label>
      </node>
      <node id="6005">
        <label>spdlog/async.h</label>
      </node>
      <node id="5998">
        <label>stack</label>
      </node>
      <node id="5984">
        <label>vector</label>
      </node>
      <node id="5995">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="5996" relation="include">
        </childnode>
      </node>
      <node id="6024">
        <label>parquet/column_writer.h</label>
      </node>
      <node id="6020">
        <label>cudf/column/column_factories.hpp</label>
      </node>
      <node id="6000">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="6007">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="5997">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5998" relation="include">
        </childnode>
        <childnode refid="5999" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="6000" relation="include">
        </childnode>
      </node>
      <node id="6015">
        <label>DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="6016" relation="include">
        </childnode>
        <childnode refid="6017" relation="include">
        </childnode>
        <childnode refid="6003" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
      </node>
      <node id="5994">
        <label>cudf/types.hpp</label>
      </node>
      <node id="6017">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="5992">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="6002">
        <label>ParquetParser.h</label>
        <link refid="ParquetParser_8h_source"/>
        <childnode refid="6003" relation="include">
        </childnode>
        <childnode refid="6015" relation="include">
        </childnode>
        <childnode refid="6008" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="6018" relation="include">
        </childnode>
      </node>
      <node id="6026">
        <label>cudf/io/parquet.hpp</label>
      </node>
      <node id="5982">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/ParquetParser.cpp</label>
        <link refid="ParquetParser_8cpp"/>
        <childnode refid="5983" relation="include">
        </childnode>
        <childnode refid="6002" relation="include">
        </childnode>
        <childnode refid="6019" relation="include">
        </childnode>
        <childnode refid="6021" relation="include">
        </childnode>
        <childnode refid="6022" relation="include">
        </childnode>
        <childnode refid="6023" relation="include">
        </childnode>
        <childnode refid="6024" relation="include">
        </childnode>
        <childnode refid="6025" relation="include">
        </childnode>
        <childnode refid="6026" relation="include">
        </childnode>
      </node>
      <node id="5999">
        <label>mutex</label>
      </node>
      <node id="5986">
        <label>common_metadata.h</label>
        <link refid="common__metadata_8h_source"/>
        <childnode refid="5987" relation="include">
        </childnode>
      </node>
      <node id="6014">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="5983">
        <label>metadata/parquet_metadata.h</label>
        <link refid="parquet__metadata_8h_source"/>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5986" relation="include">
        </childnode>
        <childnode refid="6001" relation="include">
        </childnode>
      </node>
      <node id="5988">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="6009">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="5985">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1io">ral::io</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;metadata/parquet_metadata.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ParquetParser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utilities/CommonOperations.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;arrow/io/file.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ExceptionHandling/BlazingThread.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;parquet/column_writer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;parquet/file_writer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cudf/io/parquet.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceio" kindref="compound">io</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cudf_io<sp/>=<sp/>cudf::io;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">parquet_parser::parquet_parser()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Auto-generated<sp/>constructor<sp/>stub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">parquet_parser::~parquet_parser()<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Auto-generated<sp/>destructor<sp/>stub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>parquet_parser::parse_batch(</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structral_1_1io_1_1data__handle" kindref="compound">ral::io::data_handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Schema<sp/>&amp;<sp/>schema,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>column_indices,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;cudf::size_type&gt;<sp/>row_groups)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;<sp/>file<sp/>=<sp/>handle.file_handle;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schema.makeEmptyBlazingTable(column_indices);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(column_indices.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>data<sp/>to<sp/>pq_args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_source<sp/>=<sp/>cudf_io::arrow_io_source{file};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf_io::parquet_reader_options<sp/>pq_args<sp/>=<sp/>cudf_io::parquet_reader_options::builder(cudf_io::source_info{&amp;arrow_source});</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq_args.enable_convert_strings_to_categories(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq_args.enable_use_pandas_metadata(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>col_names(column_indices.size());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>column_i<sp/>=<sp/>0;<sp/>column_i<sp/>&lt;<sp/>column_indices.size();<sp/>column_i++)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col_names[column_i]<sp/>=<sp/>schema.get_name(column_indices[column_i]);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq_args.set_columns(col_names);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>we<sp/>set<sp/>`get_metadata=False`<sp/>we<sp/>need<sp/>to<sp/>send<sp/>and<sp/>empty<sp/>full_row_groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;cudf::size_type&gt;&gt;<sp/>full_row_groups;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row_groups.size()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_row_groups<sp/>=<sp/>std::vector&lt;std::vector&lt;cudf::size_type&gt;&gt;(1,<sp/>row_groups);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pq_args.set_row_groups(full_row_groups);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>cudf::io::read_parquet(pq_args);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result_table<sp/>=<sp/>std::move(result.tbl);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.metadata.column_names.size()<sp/>&gt;<sp/>column_indices.size())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>columns<sp/>=<sp/>result_table-&gt;release();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>columns<sp/>are<sp/>in<sp/>the<sp/>same<sp/>order<sp/>as<sp/>column_indices<sp/>and<sp/>any<sp/>extra<sp/>columns<sp/>(i.e.<sp/>index<sp/>column)<sp/>are<sp/>put<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns.resize(column_indices.size());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_table<sp/>=<sp/>std::make_unique&lt;cudf::table&gt;(std::move(columns));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;ral::frame::BlazingTable&gt;(std::move(result_table),<sp/>result.metadata.column_names);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parquet_parser::parse_schema(</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;<sp/>file,<sp/><ref refid="classral_1_1io_1_1Schema" kindref="compound">ral::io::Schema</ref><sp/>&amp;<sp/>schema)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parquet_reader<sp/>=<sp/>parquet::ParquetFileReader::Open(file);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parquet_reader-&gt;metadata()-&gt;num_rows()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parquet_reader-&gt;Close();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>file<sp/>has<sp/>no<sp/>rows,<sp/>we<sp/>dont<sp/>want<sp/>cudf_io<sp/>to<sp/>try<sp/>to<sp/>read<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arrow_source<sp/>=<sp/>cudf_io::arrow_io_source{file};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf_io::parquet_reader_options<sp/>pq_args<sp/>=<sp/>cudf_io::parquet_reader_options::builder(cudf_io::source_info{&amp;arrow_source});</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>pq_args.enable_convert_strings_to_categories(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>pq_args.enable_use_pandas_metadata(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>pq_args.set_num_rows(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>need<sp/>the<sp/>metadata,<sp/>so<sp/>one<sp/>row<sp/>is<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf_io::table_with_metadata<sp/>table_out<sp/>=<sp/>cudf_io::read_parquet(pq_args);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table_out.tbl-&gt;num_columns();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudf::type_id<sp/>type<sp/>=<sp/>table_out.tbl-&gt;get_column(i).type().id();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_in_file<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>table_out.metadata.column_names.at(i);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schema.add_column(name,<sp/>type,<sp/>file_index,<sp/>is_in_file);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">std::unique_ptr&lt;ral::frame::BlazingTable&gt;<sp/>parquet_parser::get_metadata(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;arrow::io::RandomAccessFile&gt;&gt;<sp/>files,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>num_row_groups(files.size());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>BlazingThread<sp/>threads[files.size()];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;parquet::ParquetFileReader&gt;&gt;<sp/>parquet_readers(files.size());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_index<sp/>=<sp/>0;<sp/>file_index<sp/>&lt;<sp/>files.size();<sp/>file_index++)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads[file_index]<sp/>=<sp/>BlazingThread([&amp;,<sp/>file_index]()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parquet_readers[file_index]<sp/>=</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(parquet::ParquetFileReader::Open(files[file_index]));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;parquet::FileMetaData&gt;<sp/>file_metadata<sp/>=<sp/>parquet_readers[file_index]-&gt;metadata();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_row_groups[file_index]<sp/>=<sp/>file_metadata-&gt;num_row_groups();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>file_index<sp/>=<sp/>0;<sp/>file_index<sp/>&lt;<sp/>files.size();<sp/>file_index++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads[file_index].join();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_num_row_groups<sp/>=</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(num_row_groups.begin(),<sp/>num_row_groups.end(),<sp/>size_t(0));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minmax_metadata_table<sp/>=<sp/>get_minmax_metadata(parquet_readers,<sp/>total_num_row_groups,<sp/>offset);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;reader<sp/>:<sp/>parquet_readers)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader-&gt;Close();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>minmax_metadata_table;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>io<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>ral<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/ParquetParser.cpp"/>
  </compounddef>
</doxygen>

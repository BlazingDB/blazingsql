<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="graph_8cpp" kind="file" language="C++">
    <compoundname>graph.cpp</compoundname>
    <includes refid="graph_8h" local="yes">graph.h</includes>
    <includes refid="OrderBy_8h" local="yes">operators/OrderBy.h</includes>
    <includes refid="BatchProcessing_8h" local="yes">execution_graph/logic_controllers/BatchProcessing.h</includes>
    <incdepgraph>
      <node id="4627">
        <label>atomic</label>
      </node>
      <node id="4666">
        <label>config/GPUManager.cuh</label>
      </node>
      <node id="4661">
        <label>rmm/mr/device/managed_memory_resource.hpp</label>
      </node>
      <node id="4698">
        <label>functional</label>
      </node>
      <node id="4701">
        <label>queue</label>
      </node>
      <node id="4626">
        <label>execution_graph/logic_controllers/CacheMachine.h</label>
        <link refid="CacheMachine_8h_source"/>
        <childnode refid="4627" relation="include">
        </childnode>
        <childnode refid="4628" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4629" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
        <childnode refid="4632" relation="include">
        </childnode>
        <childnode refid="4633" relation="include">
        </childnode>
        <childnode refid="4634" relation="include">
        </childnode>
        <childnode refid="4638" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
        <childnode refid="4651" relation="include">
        </childnode>
        <childnode refid="4653" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4637" relation="include">
        </childnode>
        <childnode refid="4670" relation="include">
        </childnode>
        <childnode refid="4680" relation="include">
        </childnode>
        <childnode refid="4683" relation="include">
        </childnode>
        <childnode refid="4692" relation="include">
        </childnode>
        <childnode refid="4693" relation="include">
        </childnode>
      </node>
      <node id="4640">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="4641" relation="include">
        </childnode>
        <childnode refid="4642" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4643" relation="include">
        </childnode>
        <childnode refid="4645" relation="include">
        </childnode>
      </node>
      <node id="4678">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="4683">
        <label>communication/messages/GPUComponentMessage.h</label>
        <link refid="GPUComponentMessage_8h_source"/>
        <childnode refid="4632" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4673" relation="include">
        </childnode>
        <childnode refid="4646" relation="include">
        </childnode>
        <childnode refid="4652" relation="include">
        </childnode>
        <childnode refid="4684" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4685" relation="include">
        </childnode>
        <childnode refid="4686" relation="include">
        </childnode>
        <childnode refid="4687" relation="include">
        </childnode>
        <childnode refid="4688" relation="include">
        </childnode>
        <childnode refid="4644" relation="include">
        </childnode>
        <childnode refid="4689" relation="include">
        </childnode>
        <childnode refid="4690" relation="include">
        </childnode>
        <childnode refid="4633" relation="include">
        </childnode>
        <childnode refid="4691" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
        <childnode refid="4645" relation="include">
        </childnode>
      </node>
      <node id="4667">
        <label>sys/sysinfo.h</label>
      </node>
      <node id="4676">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="4702">
        <label>operators/OrderBy.h</label>
        <link refid="OrderBy_8h_source"/>
        <childnode refid="4632" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4673" relation="include">
        </childnode>
        <childnode refid="4651" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4686" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
      </node>
      <node id="4621">
        <label>kernel_type.h</label>
        <link refid="kernel__type_8h_source"/>
        <childnode refid="4622" relation="include">
        </childnode>
      </node>
      <node id="4647">
        <label>cstdint</label>
      </node>
      <node id="4659">
        <label>rmm/mr/device/owning_wrapper.hpp</label>
      </node>
      <node id="4664">
        <label>rmm/mr/device/logging_resource_adaptor.hpp</label>
      </node>
      <node id="4643">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="4644" relation="include">
        </childnode>
        <childnode refid="4641" relation="include">
        </childnode>
        <childnode refid="4642" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
      </node>
      <node id="4652">
        <label>transport/Node.h</label>
        <link refid="Node_8h_source"/>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
      </node>
      <node id="4687">
        <label>cudf/copying.hpp</label>
      </node>
      <node id="4634">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="4635" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4636" relation="include">
        </childnode>
        <childnode refid="4637" relation="include">
        </childnode>
      </node>
      <node id="4654">
        <label>cassert</label>
      </node>
      <node id="4660">
        <label>rmm/mr/device/cuda_memory_resource.hpp</label>
      </node>
      <node id="4663">
        <label>rmm/mr/device/arena_memory_resource.hpp</label>
      </node>
      <node id="4685">
        <label>numeric</label>
      </node>
      <node id="4657">
        <label>rmm/cuda_stream_view.hpp</label>
      </node>
      <node id="4622">
        <label>string</label>
      </node>
      <node id="4703">
        <label>execution_graph/logic_controllers/BatchProcessing.h</label>
        <link refid="BatchProcessing_8h_source"/>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4626" relation="include">
        </childnode>
        <childnode refid="4619" relation="include">
        </childnode>
        <childnode refid="4681" relation="include">
        </childnode>
        <childnode refid="4704" relation="include">
        </childnode>
        <childnode refid="4620" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
      </node>
      <node id="4631">
        <label>map</label>
      </node>
      <node id="4689">
        <label>cudf/null_mask.hpp</label>
      </node>
      <node id="4694">
        <label>kpair.h</label>
        <link refid="kpair_8h_source"/>
        <childnode refid="4623" relation="include">
        </childnode>
        <childnode refid="4620" relation="include">
        </childnode>
      </node>
      <node id="4672">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="4645">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4633" relation="include">
        </childnode>
        <childnode refid="4646" relation="include">
        </childnode>
        <childnode refid="4648" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
      </node>
      <node id="4637">
        <label>exception</label>
      </node>
      <node id="4693">
        <label>WaitingQueue.h</label>
        <link refid="WaitingQueue_8h_source"/>
        <childnode refid="4627" relation="include">
        </childnode>
        <childnode refid="4628" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4629" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
        <childnode refid="4632" relation="include">
        </childnode>
        <childnode refid="4637" relation="include">
        </childnode>
      </node>
      <node id="4651">
        <label>execution_graph/Context.h</label>
        <link refid="Context_8h_source"/>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4652" relation="include">
        </childnode>
      </node>
      <node id="4692">
        <label>CacheData.h</label>
        <link refid="CacheData_8h_source"/>
        <childnode refid="4627" relation="include">
        </childnode>
        <childnode refid="4628" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4629" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
        <childnode refid="4632" relation="include">
        </childnode>
        <childnode refid="4633" relation="include">
        </childnode>
        <childnode refid="4634" relation="include">
        </childnode>
        <childnode refid="4638" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
        <childnode refid="4651" relation="include">
        </childnode>
        <childnode refid="4653" relation="include">
        </childnode>
        <childnode refid="4669" relation="include">
        </childnode>
        <childnode refid="4637" relation="include">
        </childnode>
        <childnode refid="4670" relation="include">
        </childnode>
        <childnode refid="4680" relation="include">
        </childnode>
        <childnode refid="4683" relation="include">
        </childnode>
      </node>
      <node id="4670">
        <label>io/data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="4632" relation="include">
        </childnode>
        <childnode refid="4671" relation="include">
        </childnode>
        <childnode refid="4672" relation="include">
        </childnode>
        <childnode refid="4673" relation="include">
        </childnode>
        <childnode refid="4674" relation="include">
        </childnode>
        <childnode refid="4675" relation="include">
        </childnode>
        <childnode refid="4676" relation="include">
        </childnode>
        <childnode refid="4633" relation="include">
        </childnode>
        <childnode refid="4677" relation="include">
        </childnode>
        <childnode refid="4678" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4679" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
      </node>
      <node id="4691">
        <label>cudf/strings/strings_column_view.hpp</label>
      </node>
      <node id="4632">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="4642">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="4697">
        <label>utilities/ctpl_stl.h</label>
        <link refid="ctpl__stl_8h_source"/>
        <childnode refid="4698" relation="include">
        </childnode>
        <childnode refid="4699" relation="include">
        </childnode>
        <childnode refid="4627" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4637" relation="include">
        </childnode>
        <childnode refid="4700" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4701" relation="include">
        </childnode>
      </node>
      <node id="4681">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4633" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
      </node>
      <node id="4674">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="4629">
        <label>condition_variable</label>
      </node>
      <node id="4696">
        <label>ExceptionHandling/BlazingThread.h</label>
      </node>
      <node id="4684">
        <label>communication/messages/MessageUtil.cuh</label>
      </node>
      <node id="4668">
        <label>sys/statvfs.h</label>
      </node>
      <node id="4677">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="4686">
        <label>tuple</label>
      </node>
      <node id="4700">
        <label>future</label>
      </node>
      <node id="4671">
        <label>spdlog/async.h</label>
      </node>
      <node id="4620">
        <label>kernel.h</label>
        <link refid="kernel_8h_source"/>
        <childnode refid="4621" relation="include">
        </childnode>
        <childnode refid="4623" relation="include">
        </childnode>
        <childnode refid="4619" relation="include">
        </childnode>
      </node>
      <node id="4649">
        <label>stack</label>
      </node>
      <node id="4624">
        <label>vector</label>
      </node>
      <node id="4646">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="4647" relation="include">
        </childnode>
      </node>
      <node id="4690">
        <label>cudf/column/column_factories.hpp</label>
      </node>
      <node id="4688">
        <label>cudf/column/column.hpp</label>
      </node>
      <node id="4650">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="4673">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="4648">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4649" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4650" relation="include">
        </childnode>
      </node>
      <node id="4680">
        <label>io/data_parser/DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="4681" relation="include">
        </childnode>
        <childnode refid="4682" relation="include">
        </childnode>
        <childnode refid="4670" relation="include">
        </childnode>
        <childnode refid="4640" relation="include">
        </childnode>
        <childnode refid="4674" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
      </node>
      <node id="4633">
        <label>cudf/types.hpp</label>
      </node>
      <node id="4695">
        <label>bmr/MemoryMonitor.h</label>
        <link refid="MemoryMonitor_8h_source"/>
        <childnode refid="4629" relation="include">
        </childnode>
        <childnode refid="4630" relation="include">
        </childnode>
        <childnode refid="4639" relation="include">
        </childnode>
        <childnode refid="4696" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
      </node>
      <node id="4665">
        <label>rmm/mr/device/per_device_resource.hpp</label>
      </node>
      <node id="4682">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="4669">
        <label>communication/CommunicationData.h</label>
        <link refid="CommunicationData_8h_source"/>
        <childnode refid="4650" relation="include">
        </childnode>
        <childnode refid="4652" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4631" relation="include">
        </childnode>
      </node>
      <node id="4619">
        <label>graph.h</label>
        <link refid="graph_8h_source"/>
        <childnode refid="4620" relation="include">
        </childnode>
        <childnode refid="4694" relation="include">
        </childnode>
        <childnode refid="4626" relation="include">
        </childnode>
        <childnode refid="4695" relation="include">
        </childnode>
        <childnode refid="4697" relation="include">
        </childnode>
      </node>
      <node id="4623">
        <label>port.h</label>
        <link refid="port_8h_source"/>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
        <childnode refid="4622" relation="include">
        </childnode>
        <childnode refid="4626" relation="include">
        </childnode>
      </node>
      <node id="4635">
        <label>iostream</label>
      </node>
      <node id="4644">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="4628">
        <label>deque</label>
      </node>
      <node id="4630">
        <label>mutex</label>
      </node>
      <node id="4656">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="4639">
        <label>chrono</label>
      </node>
      <node id="4679">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="4638">
        <label>CodeTimer.h</label>
        <link refid="CodeTimer_8h_source"/>
        <childnode refid="4639" relation="include">
        </childnode>
      </node>
      <node id="4658">
        <label>rmm/mr/device/device_memory_resource.hpp</label>
      </node>
      <node id="4699">
        <label>thread</label>
      </node>
      <node id="4653">
        <label>bmr/BlazingMemoryResource.h</label>
        <link refid="BlazingMemoryResource_8h_source"/>
        <childnode refid="4654" relation="include">
        </childnode>
        <childnode refid="4627" relation="include">
        </childnode>
        <childnode refid="4655" relation="include">
        </childnode>
        <childnode refid="4656" relation="include">
        </childnode>
        <childnode refid="4657" relation="include">
        </childnode>
        <childnode refid="4658" relation="include">
        </childnode>
        <childnode refid="4659" relation="include">
        </childnode>
        <childnode refid="4660" relation="include">
        </childnode>
        <childnode refid="4661" relation="include">
        </childnode>
        <childnode refid="4662" relation="include">
        </childnode>
        <childnode refid="4663" relation="include">
        </childnode>
        <childnode refid="4664" relation="include">
        </childnode>
        <childnode refid="4665" relation="include">
        </childnode>
        <childnode refid="4666" relation="include">
        </childnode>
        <childnode refid="4667" relation="include">
        </childnode>
        <childnode refid="4668" relation="include">
        </childnode>
      </node>
      <node id="4662">
        <label>rmm/mr/device/pool_memory_resource.hpp</label>
      </node>
      <node id="4655">
        <label>set</label>
      </node>
      <node id="4641">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="4704">
        <label>io/DataLoader.h</label>
        <link refid="DataLoader_8h_source"/>
        <childnode refid="4705" relation="include">
        </childnode>
        <childnode refid="4680" relation="include">
        </childnode>
        <childnode refid="4670" relation="include">
        </childnode>
        <childnode refid="4674" relation="include">
        </childnode>
        <childnode refid="4651" relation="include">
        </childnode>
        <childnode refid="4624" relation="include">
        </childnode>
        <childnode refid="4625" relation="include">
        </childnode>
      </node>
      <node id="4618">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/taskflow/graph.cpp</label>
        <link refid="graph_8cpp"/>
        <childnode refid="4619" relation="include">
        </childnode>
        <childnode refid="4702" relation="include">
        </childnode>
        <childnode refid="4703" relation="include">
        </childnode>
      </node>
      <node id="4636">
        <label>cudf/utilities/error.hpp</label>
      </node>
      <node id="4675">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="4625">
        <label>memory</label>
      </node>
      <node id="4705">
        <label>FileSystem/Uri.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1cache">ral::cache</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;graph.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;operators/OrderBy.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;execution_graph/logic_controllers/BatchProcessing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cache<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>graph::get_context_token()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_token;<sp/><sp/>}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::set_context_token(int32_t<sp/>token)<sp/>{<sp/>context_token<sp/>=<sp/>token;<sp/>}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::addPair(kpair<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>source_port_name<sp/>=<sp/>std::to_string(p.src-&gt;get_id());</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>target_port_name<sp/>=<sp/>std::to_string(p.dst-&gt;get_id());</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p.has_custom_source())<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source_port_name<sp/>=<sp/>p.src_port_name;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p.has_custom_target())<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_port_name<sp/>=<sp/>p.dst_port_name;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;add_edge(p.src,<sp/>p.dst,<sp/>source_port_name,<sp/>target_port_name,<sp/>p.cache_machine_config);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::clear_kernels(){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container_.clear();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_.clear();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse_edges_.clear();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_monitor<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::set_memory_monitor(std::shared_ptr&lt;ral::MemoryMonitor&gt;<sp/>mem_monitor){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;mem_monitor<sp/>=<sp/>mem_monitor;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::check_and_complete_work_flow()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>:<sp/>container_)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;kernel&gt;<sp/>kernel_node<sp/>=<sp/>node.second;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kernel_node)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_neighbours(kernel_node.get()).size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>fake_edge<sp/>=<sp/>{.source<sp/>=<sp/>(int32_t)<sp/>kernel_node-&gt;get_id(),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.target<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.source_port_name<sp/>=<sp/>std::to_string(kernel_node-&gt;get_id()),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.target_port_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_[kernel_node-&gt;get_id()].insert(fake_edge);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::start_execute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>max_kernel_run_threads)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_monitor-&gt;start();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool.resize(max_kernel_run_threads);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source_id<sp/>:<sp/>ordered_kernel_ids){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source<sp/>=<sp/>get_node(source_id);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>futures.push_back(pool.push([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>source,<sp/>source_id]<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*thread_id*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>edges<sp/>=<sp/>get_neighbours(source);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>state<sp/>=<sp/>source-&gt;run();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&gt;output_.finish();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(state<sp/>!=<sp/>kstatus::proceed<sp/>&amp;&amp;<sp/>source-&gt;get_type_id()<sp/>!=<sp/>ral::cache::kernel_type::OutputKernel)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>log_detail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR<sp/>kernel<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(source_id)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>did<sp/>not<sp/>finished<sp/>successfully&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(logger){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=log_detail);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(logger){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;ERROR<sp/>in<sp/>graph::execute.<sp/>What:<sp/>{}&quot;</highlight><highlight class="normal">_format(e.what()));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&gt;output_.finish();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::finish_execute()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lets<sp/>iterate<sp/>through<sp/>the<sp/>futures<sp/>to<sp/>check<sp/>for<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>futures.size();<sp/>i++){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>futures[i].get();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_monitor-&gt;finalize();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::show()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::pair&lt;size_t,<sp/>size_t&gt;&gt;<sp/>visited;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::deque&lt;size_t&gt;<sp/>Q;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_node<sp/>:<sp/>get_neighbours(head_id_))<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(start_node.target);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;kernel<sp/>id<sp/>-&gt;<sp/>kernel<sp/>type<sp/>id\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(kernel<sp/>*<sp/>k<sp/>:<sp/>kernels_)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(int)<sp/>k-&gt;get_id()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(int)<sp/>k-&gt;get_type_id()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>Q.empty())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source_id<sp/>=<sp/>Q.front();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.pop_front();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source<sp/>=<sp/>get_node(source_id);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(source)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge<sp/>:<sp/>get_neighbours(source))<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_id<sp/>=<sp/>edge.target;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>=<sp/>std::make_pair(source_id,<sp/>target_id);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(visited.find(edge_id)<sp/>==<sp/>visited.end())<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;source_id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>source_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>target_id<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.insert(edge_id);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(target_id);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::show_from_kernel<sp/>(int32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;show_from_kernel<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::pair&lt;size_t,<sp/>size_t&gt;&gt;<sp/>visited;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::deque&lt;size_t&gt;<sp/>Q;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_node<sp/>:<sp/>get_reverse_neighbours(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(start_node.source);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>Q.empty())<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_id<sp/>=<sp/>Q.front();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.pop_front();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target<sp/>=<sp/>get_node(target_id);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(target)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge<sp/>:<sp/>get_reverse_neighbours(target))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source_id<sp/>=<sp/>edge.source;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>=<sp/>std::make_pair(target_id,<sp/>source_id);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(visited.find(edge_id)<sp/>==<sp/>visited.end())<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;target_id:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>target_id<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>source_id<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.insert(edge_id);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(source_id);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;bool,<sp/>uint64_t&gt;<sp/>graph::get_estimated_input_rows_to_kernel(int32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_kernel<sp/>=<sp/>get_node(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_kernel-&gt;input_all_finished()){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>target_kernel-&gt;total_input_rows_added());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::pair&lt;size_t,<sp/>size_t&gt;&gt;<sp/>visited;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::deque&lt;size_t&gt;<sp/>Q;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;Edge&gt;<sp/>source_edges<sp/>=<sp/>get_reverse_neighbours(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source_edges.size()<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_kernel<sp/>=<sp/>get_node((*(source_edges.begin())).source);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get_estimated_output<sp/>would<sp/>just<sp/>call<sp/>get_estimated_input_rows_to_kernel<sp/>for<sp/>simple<sp/>in/out<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>do<sp/>something<sp/>more<sp/>complicated<sp/>for<sp/>other<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target_kernel-&gt;<ref refid="classral_1_1cache_1_1kernel_1abf40aaa022e3bf38c261977d0c2170cb" kindref="member">get_estimated_output_num_rows</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;bool,<sp/>uint64_t&gt;<sp/>graph::get_estimated_input_rows_to_cache(int32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>port_name){</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_kernel<sp/>=<sp/>get_node(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_kernel-&gt;input_cache_finished(port_name)){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>target_kernel-&gt;input_cache_num_rows_added(port_name));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::pair&lt;size_t,<sp/>size_t&gt;&gt;<sp/>visited;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::deque&lt;size_t&gt;<sp/>Q;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;Edge&gt;<sp/>source_edges<sp/>=<sp/>get_reverse_neighbours(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge<sp/>:<sp/>source_edges){</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(edge.target_port_name<sp/>==<sp/>port_name){</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target_kernel<sp/>=<sp/>get_node(edge.source);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get_estimated_output<sp/>would<sp/>just<sp/>call<sp/>get_estimated_input_rows_to_kernel<sp/>for<sp/>simple<sp/>in/out<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>do<sp/>something<sp/>more<sp/>complicated<sp/>for<sp/>other<sp/>kernels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>target_kernel-&gt;get_estimated_output_num_rows();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>log_detail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>In<sp/>get_estimated_input_rows_to_cache<sp/>could<sp/>not<sp/>find<sp/>edge<sp/>for<sp/>kernel<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cache<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>port_name;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=log_detail);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;kernel&gt;<sp/>graph::get_last_kernel()<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>kernel_id<sp/>=<sp/>kernels_.at(kernels_.size()<sp/>-<sp/>1)-&gt;get_id();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container_[kernel_id];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>graph::num_nodes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kernels_.size();<sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>graph::add_node(std::shared_ptr&lt;kernel&gt;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(k<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container_[k-&gt;get_id()]<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernels_.push_back(k.get());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k-&gt;get_id();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>head_id_;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::add_edge(std::shared_ptr&lt;kernel&gt;<sp/>source,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;kernel&gt;<sp/>target,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>source_port,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>target_port,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cache_settings<sp/>&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_node(source);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_node(target);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>edge<sp/>=<sp/>{.source<sp/>=<sp/>(std::int32_t)<sp/>source-&gt;get_id(),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.target<sp/>=<sp/>target-&gt;get_id(),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.source_port_name<sp/>=<sp/>source_port,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.target_port_name<sp/>=<sp/>target_port};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_[source-&gt;get_id()].insert(edge);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reverse_edges_[target-&gt;get_id()].insert(edge);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;set_parent(source-&gt;get_id());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;CacheMachine&gt;&gt;<sp/>cache_machines<sp/>=<sp/>create_cache_machines(config,<sp/>source_port,<sp/>source-&gt;get_id());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(config.type<sp/>==<sp/>CacheType::FOR_EACH)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>cache_machines.size();<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kernels_edges_logger){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernels_edges_logger-&gt;info(</highlight><highlight class="stringliteral">&quot;{ral_id}|{query_id}|{source}|{sink}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getNodeIndex(ral::communication::CommunicationData::getInstance().getSelfNode()),</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;query_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getContextToken(),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">_a=source-&gt;get_id(),</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">_a=cache_machines[index]-&gt;get_id());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernels_edges_logger-&gt;info(</highlight><highlight class="stringliteral">&quot;{ral_id}|{query_id}|{source}|{sink}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getNodeIndex(ral::communication::CommunicationData::getInstance().getSelfNode()),</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;query_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getContextToken(),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">_a=cache_machines[index]-&gt;get_id(),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">_a=target-&gt;get_id());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&gt;output_.register_cache(</highlight><highlight class="stringliteral">&quot;output_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index),<sp/>cache_machines[index]);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;input_.register_cache(</highlight><highlight class="stringliteral">&quot;input_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(index),<sp/>cache_machines[index]);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source-&gt;output_.register_cache(source_port,<sp/>cache_machines[0]);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;input_.register_cache(target_port,<sp/>cache_machines[0]);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(kernels_edges_logger){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernels_edges_logger-&gt;info(</highlight><highlight class="stringliteral">&quot;{ral_id}|{query_id}|{source}|{sink}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getNodeIndex(ral::communication::CommunicationData::getInstance().getSelfNode()),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;query_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getContextToken(),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">_a=source-&gt;get_id(),</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">_a=cache_machines[0]-&gt;get_id());</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernels_edges_logger-&gt;info(</highlight><highlight class="stringliteral">&quot;{ral_id}|{query_id}|{source}|{sink}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ral_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getNodeIndex(ral::communication::CommunicationData::getInstance().getSelfNode()),</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;query_id&quot;</highlight><highlight class="normal">_a=config.context-&gt;getContextToken(),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal">_a=cache_machines[0]-&gt;get_id(),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sink&quot;</highlight><highlight class="normal">_a=target-&gt;get_id());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/>source-&gt;has_parent())<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Edge<sp/>fake_edge<sp/>=<sp/>{.source<sp/>=<sp/>head_id_,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.target<sp/>=<sp/>source-&gt;get_id(),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.source_port_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.target_port_name<sp/>=<sp/>target_port};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>edges_[head_id_].insert(fake_edge);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>kernel<sp/>*<sp/>graph::get_node(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container_[id].get();<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/><sp/>graph::get_kernel_output_cache(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kernel_id,<sp/>std::string<sp/>cache_id){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container_[kernel_id].get()-&gt;output_cache(cache_id);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::set_input_and_output_caches(std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>input_cache,<sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>output_cache)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;input_cache_<sp/>=<sp/>input_cache;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;output_cache_<sp/>=<sp/>output_cache;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>graph::get_input_message_cache()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input_cache_;<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ral::cache::CacheMachine&gt;<sp/>graph::get_output_message_cache()<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output_cache_;<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;graph::Edge&gt;<sp/>graph::get_neighbours(kernel<sp/>*<sp/>from)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edges_[from-&gt;get_id()];<sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;graph::Edge&gt;<sp/>graph::get_neighbours(int32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>edges_[id];<sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;graph::Edge&gt;<sp/>graph::get_reverse_neighbours(kernel<sp/>*<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_reverse_neighbours(from-&gt;get_id());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::set&lt;graph::Edge&gt;();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;graph::Edge&gt;<sp/>graph::get_reverse_neighbours(int32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reverse_edges_.find(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>!=<sp/>reverse_edges_.end()){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reverse_edges_[id];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::set&lt;graph::Edge&gt;();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>will<sp/>work<sp/>when<sp/>the<sp/>Relational<sp/>Algebra<sp/>only<sp/>contains:<sp/>TableScan<sp/>(or<sp/>BindableTableScan)<sp/>and<sp/>Limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::check_for_simple_scan_with_limit_query()<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_iterator<sp/>=<sp/>container_.begin();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first_iterator++;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>min_index_valid<sp/>=<sp/>first_iterator-&gt;first;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_kernels<sp/>=<sp/>container_.size();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_kernels<sp/>==<sp/>4)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>LimitKernel,<sp/>TableScanKernel<sp/>(or<sp/>BindableTableScan),<sp/>OutputKernel<sp/>and<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>get_node(min_index_valid)-&gt;get_type_id()<sp/>==<sp/>kernel_type::LimitKernel<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(get_node(min_index_valid<sp/>+<sp/>1)-&gt;get_type_id()<sp/>==<sp/>kernel_type::TableScanKernel<sp/>||</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_node(min_index_valid<sp/>+<sp/>1)-&gt;get_type_id()<sp/>==<sp/>kernel_type::BindableTableScanKernel)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_node(min_index_valid<sp/>+<sp/>2)-&gt;expression<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;OutputKernel&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_node(min_index_valid<sp/>+<sp/>1)-&gt;<ref refid="classral_1_1cache_1_1kernel_1a913add84b5ad4c0bb09f7a609fe8e311" kindref="member">has_limit_</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>limit<sp/>value<sp/>from<sp/>LogicalLimit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>LimitExpression<sp/>=<sp/>get_node(min_index_valid)-&gt;<ref refid="classral_1_1cache_1_1kernel_1a0619a9c1e4952dc353dcfa079910a84a" kindref="member">expression</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>scan_only_rows<sp/>=<sp/>ral::operators::get_limit_rows_when_relational_alg_is_simple(LimitExpression);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_node(min_index_valid<sp/>+<sp/>1)-&gt;<ref refid="classral_1_1cache_1_1kernel_1a415a4613c3eac81c1f65340e0866d26e" kindref="member">limit_rows_</ref><sp/>=<sp/>scan_only_rows;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>graph::set_kernels_order(){</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::pair&lt;size_t,<sp/>size_t&gt;&gt;<sp/>visited;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::deque&lt;size_t&gt;<sp/>Q;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_node<sp/>:<sp/>get_neighbours(head_id_))<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(start_node.target);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(not<sp/>Q.empty())<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source_id<sp/>=<sp/>Q.front();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source<sp/>=<sp/>get_node(source_id);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>source_edges<sp/>=<sp/>get_reverse_neighbours(source);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>node_has_all_dependencies<sp/>=<sp/>source_edges.size()<sp/>==<sp/>0<sp/>?<sp/>true<sp/>:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::all_of(source_edges.begin(),<sp/>source_edges.end(),<sp/>[visited](Edge<sp/>edge)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>=<sp/>std::make_pair(edge.source,<sp/>edge.target);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visited.find(edge_id)<sp/>!=<sp/>visited.end();});</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.pop_front();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_has_all_dependencies){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(source)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge<sp/>:<sp/>get_neighbours(source))<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_id<sp/>=<sp/>edge.target;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>edge_id<sp/>=<sp/>std::make_pair(source_id,<sp/>target_id);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(visited.find(edge_id)<sp/>==<sp/>visited.end())<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.insert(edge_id);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(target_id);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ordered_kernel_ids.push_back(source_id);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>and<sp/>circular<sp/>graph<sp/>is<sp/>defined<sp/>here.<sp/>Report<sp/>and<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>dont<sp/>have<sp/>all<sp/>the<sp/>dependencies,<sp/>lets<sp/>put<sp/>it<sp/>back<sp/>at<sp/>the<sp/>back<sp/>and<sp/>try<sp/>it<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Q.push_back(source_id);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graph::query_is_complete(){</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classral_1_1batch_1_1OutputKernel" kindref="compound">ral::batch::OutputKernel</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*(this-&gt;get_last_kernel())).<ref refid="classral_1_1batch_1_1OutputKernel_1aeab17b971b0dbef6f892561e120b149c" kindref="member">is_done</ref>();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>graph_progress<sp/>graph::get_progress()<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graph_progress<sp/>progress;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ordered_kernel_ids.size()<sp/>-<sp/>1;<sp/>i++){<sp/></highlight><highlight class="comment">//<sp/>want<sp/>to<sp/>iterate<sp/>over<sp/>all<sp/>the<sp/>kernels<sp/>except<sp/>the<sp/>last<sp/>one<sp/>which<sp/>is<sp/>OutputKernel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kernel_id<sp/>=<sp/>ordered_kernel_ids[i];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel<sp/>*<sp/>kernel<sp/>=<sp/>get_node(kernel_id);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progress.kernel_descriptions.push_back(std::to_string(kernel_id)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>kernel-&gt;kernel_name());</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progress.finished.push_back(kernel-&gt;output_.all_finished());</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>progress.batches_completed.push_back(kernel-&gt;output_.total_batches_added());</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>progress;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ral</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/taskflow/graph.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ArgsUtil_8cpp" kind="file" language="C++">
    <compoundname>ArgsUtil.cpp</compoundname>
    <includes refid="ArgsUtil_8h" local="yes">ArgsUtil.h</includes>
    <includes local="no">blazingdb/io/FileSystem/Uri.h</includes>
    <includes local="no">blazingdb/io/Util/StringUtil.h</includes>
    <includes refid="UriDataProvider_8h" local="yes">../data_provider/UriDataProvider.h</includes>
    <incdepgraph>
      <node id="5373">
        <label>../data_provider/UriDataProvider.h</label>
        <link refid="UriDataProvider_8h_source"/>
        <childnode refid="5374" relation="include">
        </childnode>
        <childnode refid="5379" relation="include">
        </childnode>
        <childnode refid="5371" relation="include">
        </childnode>
        <childnode refid="5387" relation="include">
        </childnode>
        <childnode refid="5386" relation="include">
        </childnode>
      </node>
      <node id="5388">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="5389" relation="include">
        </childnode>
        <childnode refid="5390" relation="include">
        </childnode>
        <childnode refid="5386" relation="include">
        </childnode>
        <childnode refid="5391" relation="include">
        </childnode>
        <childnode refid="5387" relation="include">
        </childnode>
        <childnode refid="5392" relation="include">
        </childnode>
        <childnode refid="5394" relation="include">
        </childnode>
      </node>
      <node id="5364">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/ArgsUtil.cpp</label>
        <link refid="ArgsUtil_8cpp"/>
        <childnode refid="5365" relation="include">
        </childnode>
        <childnode refid="5371" relation="include">
        </childnode>
        <childnode refid="5372" relation="include">
        </childnode>
        <childnode refid="5373" relation="include">
        </childnode>
      </node>
      <node id="5384">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="5381">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="5396">
        <label>cstdint</label>
      </node>
      <node id="5392">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="5393" relation="include">
        </childnode>
        <childnode refid="5389" relation="include">
        </childnode>
        <childnode refid="5390" relation="include">
        </childnode>
        <childnode refid="5386" relation="include">
        </childnode>
        <childnode refid="5391" relation="include">
        </childnode>
        <childnode refid="5387" relation="include">
        </childnode>
      </node>
      <node id="5370">
        <label>cudf/io/datasource.hpp</label>
      </node>
      <node id="5391">
        <label>string</label>
      </node>
      <node id="5385">
        <label>map</label>
      </node>
      <node id="5377">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="5394">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="5387" relation="include">
        </childnode>
        <childnode refid="5391" relation="include">
        </childnode>
        <childnode refid="5386" relation="include">
        </childnode>
        <childnode refid="5382" relation="include">
        </childnode>
        <childnode refid="5395" relation="include">
        </childnode>
        <childnode refid="5397" relation="include">
        </childnode>
        <childnode refid="5388" relation="include">
        </childnode>
      </node>
      <node id="5374">
        <label>DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="5375" relation="include">
        </childnode>
        <childnode refid="5376" relation="include">
        </childnode>
        <childnode refid="5377" relation="include">
        </childnode>
        <childnode refid="5378" relation="include">
        </childnode>
        <childnode refid="5379" relation="include">
        </childnode>
        <childnode refid="5380" relation="include">
        </childnode>
        <childnode refid="5381" relation="include">
        </childnode>
        <childnode refid="5382" relation="include">
        </childnode>
        <childnode refid="5383" relation="include">
        </childnode>
        <childnode refid="5384" relation="include">
        </childnode>
        <childnode refid="5385" relation="include">
        </childnode>
        <childnode refid="5386" relation="include">
        </childnode>
        <childnode refid="5387" relation="include">
        </childnode>
        <childnode refid="5371" relation="include">
        </childnode>
        <childnode refid="5388" relation="include">
        </childnode>
      </node>
      <node id="5375">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="5390">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="5379">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="5383">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="5376">
        <label>spdlog/async.h</label>
      </node>
      <node id="5398">
        <label>stack</label>
      </node>
      <node id="5387">
        <label>vector</label>
      </node>
      <node id="5395">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="5396" relation="include">
        </childnode>
      </node>
      <node id="5372">
        <label>blazingdb/io/Util/StringUtil.h</label>
      </node>
      <node id="5400">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="5378">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="5397">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="5387" relation="include">
        </childnode>
        <childnode refid="5391" relation="include">
        </childnode>
        <childnode refid="5398" relation="include">
        </childnode>
        <childnode refid="5399" relation="include">
        </childnode>
        <childnode refid="5386" relation="include">
        </childnode>
        <childnode refid="5400" relation="include">
        </childnode>
      </node>
      <node id="5382">
        <label>cudf/types.hpp</label>
      </node>
      <node id="5365">
        <label>ArgsUtil.h</label>
        <link refid="ArgsUtil_8h_source"/>
        <childnode refid="5366" relation="include">
        </childnode>
        <childnode refid="5367" relation="include">
        </childnode>
        <childnode refid="5368" relation="include">
        </childnode>
        <childnode refid="5369" relation="include">
        </childnode>
        <childnode refid="5370" relation="include">
        </childnode>
      </node>
      <node id="5368">
        <label>cudf/io/orc.hpp</label>
      </node>
      <node id="5366">
        <label>io/io.h</label>
      </node>
      <node id="5369">
        <label>cudf/io/csv.hpp</label>
      </node>
      <node id="5393">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="5399">
        <label>mutex</label>
      </node>
      <node id="5371">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="5389">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="5367">
        <label>cudf/io/json.hpp</label>
      </node>
      <node id="5380">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="5386">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1io">ral::io</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ArgsUtil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/FileSystem/Uri.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;blazingdb/io/Util/StringUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../data_provider/UriDataProvider.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceio" kindref="compound">io</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">DataType<sp/>inferDataType(std::string<sp/>file_format_hint)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;parquet&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::PARQUET;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;json&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::JSON;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;orc&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::ORC;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;csv&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::CSV;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;psv&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::CSV;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tbl&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::CSV;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file_format_hint<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;txt&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::CSV;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE<sp/>if<sp/>you<sp/>need<sp/>more<sp/>options<sp/>the<sp/>user<sp/>can<sp/>pass<sp/>file_format<sp/>in<sp/>the<sp/>create<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DataType::UNDEFINED;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">DataType<sp/>inferFileType(std::vector&lt;std::string&gt;<sp/>files,<sp/>DataType<sp/>data_type_hint,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignore_missing_paths)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(data_type_hint<sp/>==<sp/>DataType::PARQUET<sp/>||<sp/>data_type_hint<sp/>==<sp/>DataType::CSV<sp/>||<sp/>data_type_hint<sp/>==<sp/>DataType::JSON<sp/>||</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_type_hint<sp/>==<sp/>DataType::ORC)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_type_hint;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Uri&gt;<sp/>uris;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>files.begin(),<sp/>files.end(),<sp/>std::back_inserter(uris),<sp/>[](std::string<sp/>uri)<sp/>-&gt;<sp/>Uri<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Uri(uri);<sp/>});</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classral_1_1io_1_1uri__data__provider" kindref="compound">ral::io::uri_data_provider</ref><sp/>udp(uris,<sp/>ignore_missing_paths);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>open_file<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structral_1_1io_1_1data__handle" kindref="compound">ral::io::data_handle</ref><sp/>dh<sp/>=<sp/>udp.get_next(open_file);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ext<sp/>=<sp/>dh.uri.getPath().getFileExtension();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(ext.begin(),<sp/>ext.end(),<sp/>ext.begin(),<sp/>::tolower);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inferDataType(ext);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>map_contains(std::string<sp/>key,<sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>args)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(args.find(key)<sp/>==<sp/>args.end());<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>to_bool(std::string<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ord(std::string<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>value[0];<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>to_int(std::string<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::atoi(value.c_str());<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>to_vector_string(std::string<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>vec<sp/>=<sp/>StringUtil::replace(value,<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>vec<sp/>=<sp/>StringUtil::replace(vec,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>vec<sp/>=<sp/>StringUtil::replace(vec,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>vec<sp/>=<sp/>StringUtil::replace(vec,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>ret<sp/>=<sp/>StringUtil::split(vec,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">std::vector&lt;int&gt;<sp/>to_vector_int(std::string<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>input<sp/>=<sp/>to_vector_string(value);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(input.begin(),<sp/>input.end(),<sp/>std::back_inserter(ret),<sp/>[](std::string<sp/>v)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_int(v);<sp/>});</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">cudf::io::json_reader_options<sp/>getJsonReaderOptions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;<sp/>args,<sp/>cudf::io::arrow_io_source<sp/>&amp;<sp/>arrow_source)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::json_reader_options<sp/>reader_opts<sp/>=<sp/>cudf::io::json_reader_options::builder(cudf::io::source_info{&amp;arrow_source});</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>reader_opts.enable_lines(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;dtype&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.dtypes(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;dtype&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;compression&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.compression(static_cast&lt;cudf::io::compression_type&gt;(to_int(args.at(</highlight><highlight class="stringliteral">&quot;compression&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;lines&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_lines(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;lines&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;dayfirst&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_dayfirst(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;dayfirst&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;byte_range_offset&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_byte_range_offset(<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;byte_range_offset&quot;</highlight><highlight class="normal">))<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;byte_range_size&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_byte_range_size(<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;byte_range_size&quot;</highlight><highlight class="normal">))<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader_opts;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">cudf::io::orc_reader_options<sp/>getOrcReaderOptions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;<sp/>args,<sp/>cudf::io::arrow_io_source<sp/>&amp;<sp/>arrow_source)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::orc_reader_options<sp/>reader_opts<sp/>=<sp/>cudf::io::orc_reader_options::builder(cudf::io::source_info{&amp;arrow_source});</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;stripes&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_stripes(to_vector_int(args.at(</highlight><highlight class="stringliteral">&quot;stripes&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;skiprows&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_skip_rows(to_int(args.at(</highlight><highlight class="stringliteral">&quot;skiprows&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;num_rows&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_num_rows(to_int(args.at(</highlight><highlight class="stringliteral">&quot;num_rows&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;use_index&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_use_index(to_int(args.at(</highlight><highlight class="stringliteral">&quot;use_index&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_use_index(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader_opts;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">cudf::io::csv_reader_options<sp/>getCsvReaderOptions(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;<sp/>args,<sp/>cudf::io::arrow_io_source<sp/>&amp;<sp/>arrow_source)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>cudf::io::csv_reader_options<sp/>reader_opts<sp/>=<sp/>cudf::io::csv_reader_options::builder(cudf::io::source_info{&amp;arrow_source});</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;compression&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_compression((cudf::io::compression_type)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;compression&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;lineterminator&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_lineterminator(ord(args.at(</highlight><highlight class="stringliteral">&quot;lineterminator&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;delimiter&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_delimiter(ord(args.at(</highlight><highlight class="stringliteral">&quot;delimiter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;windowslinetermination&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_windowslinetermination(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;windowslinetermination&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;delim_whitespace&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_delim_whitespace(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;delim_whitespace&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;skipinitialspace&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_skipinitialspace(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;skipinitialspace&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;skip_blank_lines&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_skip_blank_lines(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;skip_blank_lines&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;nrows&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_nrows((cudf::size_type)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;nrows&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;skiprows&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_skiprows((cudf::size_type)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;skiprows&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;skipfooter&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_skipfooter((cudf::size_type)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;skipfooter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;names&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_names(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;names&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_header(-1);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_header(0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;header&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_header((cudf::size_type)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;header&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;dtype&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_dtypes(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;dtype&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;use_cols_indexes&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_use_cols_indexes(to_vector_int(args.at(</highlight><highlight class="stringliteral">&quot;use_cols_indexes&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;use_cols_names&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_use_cols_names(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;use_cols_names&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;true_values&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_true_values(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;true_values&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;false_values&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_false_values(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;false_values&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;na_values&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_na_values(to_vector_string(args.at(</highlight><highlight class="stringliteral">&quot;na_values&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;keep_default_na&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_keep_default_na(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;keep_default_na&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;na_filter&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_na_filter(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;na_filter&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;prefix&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_prefix(args.at(</highlight><highlight class="stringliteral">&quot;prefix&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;mangle_dupe_cols&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_mangle_dupe_cols(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;mangle_dupe_cols&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;dayfirst&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_dayfirst(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;dayfirst&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;thousands&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_thousands(ord(args.at(</highlight><highlight class="stringliteral">&quot;thousands&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;decimal&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_decimal(ord(args.at(</highlight><highlight class="stringliteral">&quot;decimal&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_comment(ord(args.at(</highlight><highlight class="stringliteral">&quot;comment&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;quotechar&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_quotechar(ord(args.at(</highlight><highlight class="stringliteral">&quot;quotechar&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(map_contains(&quot;quoting&quot;,<sp/>args))<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>reader_opts.quoting<sp/>=<sp/>args.at(&quot;quoting&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;doublequote&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.enable_doublequote(to_bool(args.at(</highlight><highlight class="stringliteral">&quot;doublequote&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;byte_range_offset&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_byte_range_offset((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;byte_range_offset&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;byte_range_size&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_opts.set_byte_range_size((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>to_int(args.at(</highlight><highlight class="stringliteral">&quot;byte_range_size&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(map_contains(</highlight><highlight class="stringliteral">&quot;out_time_unit&quot;</highlight><highlight class="normal">,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reader_opts.out_time_unit<sp/>=<sp/>args.at(&quot;out_time_unit&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader_opts;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">std::map&lt;std::string,<sp/>std::string&gt;<sp/>to_map(std::vector&lt;std::string&gt;<sp/>arg_keys,<sp/>std::vector&lt;std::string&gt;<sp/>arg_values)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arg_keys.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[arg_keys[i]]<sp/>=<sp/>arg_values[i];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">std::string<sp/>getDataTypeName(DataType<sp/>dataType)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(dataType)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DataType::PARQUET:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;parquet&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DataType::ORC:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;orc&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DataType::CSV:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;csv&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DataType::JSON:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;json&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DataType::CUDF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;cudf&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DataType::DASK_CUDF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dask_cudf&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;undefined&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>io<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>ral<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/io/data_parser/ArgsUtil.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ucx__init_8h" kind="file" language="C++">
    <compoundname>ucx_init.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">netdb.h</includes>
    <includes local="no">ucp/api/ucp.h</includes>
    <includes refid="messageReceiver_8hpp" local="no">communication/CommunicationInterface/messageReceiver.hpp</includes>
    <includedby refid="initialize_8cpp" local="yes">/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/cython/initialize.cpp</includedby>
    <incdepgraph>
      <node id="1680">
        <label>atomic</label>
      </node>
      <node id="1720">
        <label>config/GPUManager.cuh</label>
      </node>
      <node id="1715">
        <label>rmm/mr/device/managed_memory_resource.hpp</label>
      </node>
      <node id="1753">
        <label>arpa/inet.h</label>
      </node>
      <node id="1749">
        <label>functional</label>
      </node>
      <node id="1752">
        <label>queue</label>
      </node>
      <node id="1687">
        <label>execution_graph/logic_controllers/CacheMachine.h</label>
        <link refid="CacheMachine_8h_source"/>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1688" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1689" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1691" relation="include">
        </childnode>
        <childnode refid="1692" relation="include">
        </childnode>
        <childnode refid="1693" relation="include">
        </childnode>
        <childnode refid="1695" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
        <childnode refid="1705" relation="include">
        </childnode>
        <childnode refid="1707" relation="include">
        </childnode>
        <childnode refid="1723" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
        <childnode refid="1724" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1737" relation="include">
        </childnode>
        <childnode refid="1746" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
      </node>
      <node id="1672">
        <label>limits</label>
      </node>
      <node id="1697">
        <label>execution_graph/logic_controllers/LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="1698" relation="include">
        </childnode>
        <childnode refid="1699" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1700" relation="include">
        </childnode>
        <childnode refid="1702" relation="include">
        </childnode>
      </node>
      <node id="1732">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="1737">
        <label>communication/messages/GPUComponentMessage.h</label>
        <link refid="GPUComponentMessage_8h_source"/>
        <childnode refid="1691" relation="include">
        </childnode>
        <childnode refid="1725" relation="include">
        </childnode>
        <childnode refid="1726" relation="include">
        </childnode>
        <childnode refid="1727" relation="include">
        </childnode>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1706" relation="include">
        </childnode>
        <childnode refid="1738" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1739" relation="include">
        </childnode>
        <childnode refid="1740" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1742" relation="include">
        </childnode>
        <childnode refid="1701" relation="include">
        </childnode>
        <childnode refid="1743" relation="include">
        </childnode>
        <childnode refid="1744" relation="include">
        </childnode>
        <childnode refid="1692" relation="include">
        </childnode>
        <childnode refid="1745" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
        <childnode refid="1702" relation="include">
        </childnode>
      </node>
      <node id="1721">
        <label>sys/sysinfo.h</label>
      </node>
      <node id="1730">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="1761">
        <label>rmm/device_buffer.hpp</label>
      </node>
      <node id="1756">
        <label>kernel_type.h</label>
        <link refid="kernel__type_8h_source"/>
        <childnode refid="1670" relation="include">
        </childnode>
      </node>
      <node id="1681">
        <label>bufferTransport.hpp</label>
        <link refid="bufferTransport_8hpp_source"/>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
        <childnode refid="1685" relation="include">
        </childnode>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1686" relation="include">
        </childnode>
        <childnode refid="1687" relation="include">
        </childnode>
      </node>
      <node id="1679">
        <label>cstdint</label>
      </node>
      <node id="1713">
        <label>rmm/mr/device/owning_wrapper.hpp</label>
      </node>
      <node id="1686">
        <label>node.hpp</label>
        <link refid="node_8hpp_source"/>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1675" relation="include">
        </childnode>
      </node>
      <node id="1718">
        <label>rmm/mr/device/logging_resource_adaptor.hpp</label>
      </node>
      <node id="1700">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="1701" relation="include">
        </childnode>
        <childnode refid="1698" relation="include">
        </childnode>
        <childnode refid="1699" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
      </node>
      <node id="1706">
        <label>transport/Node.h</label>
        <link refid="Node_8h_source"/>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
      </node>
      <node id="1676">
        <label>communication/CommunicationInterface/messageReceiver.hpp</label>
        <link refid="messageReceiver_8hpp_source"/>
        <childnode refid="1677" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1740" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1761" relation="include">
        </childnode>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1703" relation="include">
        </childnode>
        <childnode refid="1687" relation="include">
        </childnode>
      </node>
      <node id="1741">
        <label>cudf/copying.hpp</label>
      </node>
      <node id="1693">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="1669" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1694" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
      </node>
      <node id="1708">
        <label>cassert</label>
      </node>
      <node id="1714">
        <label>rmm/mr/device/cuda_memory_resource.hpp</label>
      </node>
      <node id="1717">
        <label>rmm/mr/device/arena_memory_resource.hpp</label>
      </node>
      <node id="1739">
        <label>numeric</label>
      </node>
      <node id="1711">
        <label>rmm/cuda_stream_view.hpp</label>
      </node>
      <node id="1670">
        <label>string</label>
      </node>
      <node id="1682">
        <label>map</label>
      </node>
      <node id="1743">
        <label>cudf/null_mask.hpp</label>
      </node>
      <node id="1758">
        <label>kpair.h</label>
        <link refid="kpair_8h_source"/>
        <childnode refid="1757" relation="include">
        </childnode>
        <childnode refid="1755" relation="include">
        </childnode>
      </node>
      <node id="1726">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="1702">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1692" relation="include">
        </childnode>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1703" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
      </node>
      <node id="1684">
        <label>exception</label>
      </node>
      <node id="1747">
        <label>WaitingQueue.h</label>
        <link refid="WaitingQueue_8h_source"/>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1688" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1689" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1691" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
      </node>
      <node id="1674">
        <label>netdb.h</label>
      </node>
      <node id="1705">
        <label>execution_graph/Context.h</label>
        <link refid="Context_8h_source"/>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1706" relation="include">
        </childnode>
      </node>
      <node id="1746">
        <label>CacheData.h</label>
        <link refid="CacheData_8h_source"/>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1688" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1689" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1691" relation="include">
        </childnode>
        <childnode refid="1692" relation="include">
        </childnode>
        <childnode refid="1693" relation="include">
        </childnode>
        <childnode refid="1695" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
        <childnode refid="1705" relation="include">
        </childnode>
        <childnode refid="1707" relation="include">
        </childnode>
        <childnode refid="1723" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
        <childnode refid="1724" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1737" relation="include">
        </childnode>
      </node>
      <node id="1724">
        <label>io/data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="1691" relation="include">
        </childnode>
        <childnode refid="1725" relation="include">
        </childnode>
        <childnode refid="1726" relation="include">
        </childnode>
        <childnode refid="1727" relation="include">
        </childnode>
        <childnode refid="1728" relation="include">
        </childnode>
        <childnode refid="1729" relation="include">
        </childnode>
        <childnode refid="1730" relation="include">
        </childnode>
        <childnode refid="1692" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1733" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
      </node>
      <node id="1745">
        <label>cudf/strings/strings_column_view.hpp</label>
      </node>
      <node id="1691">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="1699">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="1748">
        <label>utilities/ctpl_stl.h</label>
        <link refid="ctpl__stl_8h_source"/>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1750" relation="include">
        </childnode>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1684" relation="include">
        </childnode>
        <childnode refid="1751" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1752" relation="include">
        </childnode>
      </node>
      <node id="1735">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1692" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
      </node>
      <node id="1728">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="1689">
        <label>condition_variable</label>
      </node>
      <node id="1760">
        <label>ExceptionHandling/BlazingThread.h</label>
      </node>
      <node id="1738">
        <label>communication/messages/MessageUtil.cuh</label>
      </node>
      <node id="1668">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/communication/ucx_init.h</label>
        <link refid="ucx__init_8h"/>
        <childnode refid="1669" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1671" relation="include">
        </childnode>
        <childnode refid="1672" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1674" relation="include">
        </childnode>
        <childnode refid="1675" relation="include">
        </childnode>
        <childnode refid="1676" relation="include">
        </childnode>
      </node>
      <node id="1722">
        <label>sys/statvfs.h</label>
      </node>
      <node id="1731">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="1740">
        <label>tuple</label>
      </node>
      <node id="1751">
        <label>future</label>
      </node>
      <node id="1725">
        <label>spdlog/async.h</label>
      </node>
      <node id="1755">
        <label>kernel.h</label>
        <link refid="kernel_8h_source"/>
        <childnode refid="1756" relation="include">
        </childnode>
        <childnode refid="1757" relation="include">
        </childnode>
        <childnode refid="1754" relation="include">
        </childnode>
      </node>
      <node id="1704">
        <label>stack</label>
      </node>
      <node id="1683">
        <label>vector</label>
      </node>
      <node id="1678">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="1679" relation="include">
        </childnode>
      </node>
      <node id="1685">
        <label>blazingdb/io/Util/StringUtil.h</label>
      </node>
      <node id="1744">
        <label>cudf/column/column_factories.hpp</label>
      </node>
      <node id="1742">
        <label>cudf/column/column.hpp</label>
      </node>
      <node id="1675">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="1727">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="1703">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1704" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1675" relation="include">
        </childnode>
      </node>
      <node id="1671">
        <label>utility</label>
      </node>
      <node id="1734">
        <label>io/data_parser/DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="1735" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
        <childnode refid="1724" relation="include">
        </childnode>
        <childnode refid="1697" relation="include">
        </childnode>
        <childnode refid="1728" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1683" relation="include">
        </childnode>
      </node>
      <node id="1692">
        <label>cudf/types.hpp</label>
      </node>
      <node id="1677">
        <label>protocols.hpp</label>
        <link refid="protocols_8hpp_source"/>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1681" relation="include">
        </childnode>
        <childnode refid="1676" relation="include">
        </childnode>
        <childnode refid="1686" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1753" relation="include">
        </childnode>
        <childnode refid="1754" relation="include">
        </childnode>
      </node>
      <node id="1759">
        <label>bmr/MemoryMonitor.h</label>
        <link refid="MemoryMonitor_8h_source"/>
        <childnode refid="1689" relation="include">
        </childnode>
        <childnode refid="1690" relation="include">
        </childnode>
        <childnode refid="1696" relation="include">
        </childnode>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
      </node>
      <node id="1719">
        <label>rmm/mr/device/per_device_resource.hpp</label>
      </node>
      <node id="1736">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="1723">
        <label>communication/CommunicationData.h</label>
        <link refid="CommunicationData_8h_source"/>
        <childnode refid="1675" relation="include">
        </childnode>
        <childnode refid="1706" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1682" relation="include">
        </childnode>
      </node>
      <node id="1754">
        <label>execution_graph/logic_controllers/taskflow/graph.h</label>
        <link refid="graph_8h_source"/>
        <childnode refid="1755" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
        <childnode refid="1687" relation="include">
        </childnode>
        <childnode refid="1759" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
      </node>
      <node id="1757">
        <label>port.h</label>
        <link refid="port_8h_source"/>
        <childnode refid="1683" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1687" relation="include">
        </childnode>
      </node>
      <node id="1669">
        <label>iostream</label>
      </node>
      <node id="1701">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="1688">
        <label>deque</label>
      </node>
      <node id="1690">
        <label>mutex</label>
      </node>
      <node id="1710">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="1696">
        <label>chrono</label>
      </node>
      <node id="1733">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="1695">
        <label>CodeTimer.h</label>
        <link refid="CodeTimer_8h_source"/>
        <childnode refid="1696" relation="include">
        </childnode>
      </node>
      <node id="1712">
        <label>rmm/mr/device/device_memory_resource.hpp</label>
      </node>
      <node id="1750">
        <label>thread</label>
      </node>
      <node id="1707">
        <label>bmr/BlazingMemoryResource.h</label>
        <link refid="BlazingMemoryResource_8h_source"/>
        <childnode refid="1708" relation="include">
        </childnode>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1709" relation="include">
        </childnode>
        <childnode refid="1710" relation="include">
        </childnode>
        <childnode refid="1711" relation="include">
        </childnode>
        <childnode refid="1712" relation="include">
        </childnode>
        <childnode refid="1713" relation="include">
        </childnode>
        <childnode refid="1714" relation="include">
        </childnode>
        <childnode refid="1715" relation="include">
        </childnode>
        <childnode refid="1716" relation="include">
        </childnode>
        <childnode refid="1717" relation="include">
        </childnode>
        <childnode refid="1718" relation="include">
        </childnode>
        <childnode refid="1719" relation="include">
        </childnode>
        <childnode refid="1720" relation="include">
        </childnode>
        <childnode refid="1721" relation="include">
        </childnode>
        <childnode refid="1722" relation="include">
        </childnode>
      </node>
      <node id="1716">
        <label>rmm/mr/device/pool_memory_resource.hpp</label>
      </node>
      <node id="1709">
        <label>set</label>
      </node>
      <node id="1698">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="1694">
        <label>cudf/utilities/error.hpp</label>
      </node>
      <node id="1729">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="1673">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classral_1_1communication_1_1UcpWorkerAddress" prot="public">ral::communication::UcpWorkerAddress</innerclass>
    <innerclass refid="classral_1_1communication_1_1AddressExchanger" prot="public">ral::communication::AddressExchanger</innerclass>
    <innerclass refid="classral_1_1communication_1_1AddressExchangerForSender" prot="public">ral::communication::AddressExchangerForSender</innerclass>
    <innerclass refid="classral_1_1communication_1_1AddressExchangerForReceiver" prot="public">ral::communication::AddressExchangerForReceiver</innerclass>
    <innerclass refid="classral_1_1communication_1_1ErrorHandling" prot="public">ral::communication::ErrorHandling</innerclass>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1communication">ral::communication</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ucp/api/ucp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;communication/CommunicationInterface/messageReceiver.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">communication<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Callable&gt;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Callable<sp/>&amp;&amp;callable)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(condition)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::forward&lt;Callable&gt;(callable)();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>condition,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>CheckError(condition,<sp/>message,<sp/>[]()<sp/>{});</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classral_1_1communication_1_1UcpWorkerAddress" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>ucp_address_t<sp/>*address;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::size_t<sp/>length;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classral_1_1communication_1_1AddressExchanger" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classral_1_1communication_1_1AddressExchanger" kindref="compound">AddressExchanger</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>Exchange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>&amp;ucpWorkerAddress)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/>*data<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::uint8_t[ucpWorkerAddress.length];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>peerUcpWorkerAddress{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">ucp_address_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::numeric_limits&lt;decltype(ucpWorkerAddress.length)&gt;::max()};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Exchange(&amp;peerUcpWorkerAddress.length,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd(),</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ucpWorkerAddress.length,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ucpWorkerAddress.length));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Exchange(peerUcpWorkerAddress.address,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd(),</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucpWorkerAddress.address,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucpWorkerAddress.length);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>data;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>peerUcpWorkerAddress;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;AddressExchanger&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>MakeForSender(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>port);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;AddressExchanger&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>MakeForReceiver(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>port,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Exchange(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*peerData,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*localData,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>send(fd,<sp/>localData,<sp/>length,<sp/>0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckError(ret<sp/>!=<sp/>static_cast&lt;int&gt;(length),<sp/></highlight><highlight class="stringliteral">&quot;send&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(fd,<sp/>peerData,<sp/>length,<sp/>MSG_WAITALL);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckError(ret<sp/>!=<sp/>static_cast&lt;int&gt;(length),<sp/></highlight><highlight class="stringliteral">&quot;recv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classral_1_1communication_1_1AddressExchangerForSender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classral_1_1communication_1_1AddressExchangerForSender" kindref="compound">AddressExchangerForSender</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classral_1_1communication_1_1AddressExchanger" kindref="compound">AddressExchanger</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>~<ref refid="classral_1_1communication_1_1AddressExchangerForSender" kindref="compound">AddressExchangerForSender</ref>()<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>closeCurrentConnection();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CheckError(close(lsock_),<sp/></highlight><highlight class="stringliteral">&quot;close<sp/>sender&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="classral_1_1communication_1_1AddressExchangerForSender" kindref="compound">AddressExchangerForSender</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>port)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>inaddr;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>lsock_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>dsock_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>optval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>lsock_<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lsock_<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;open<sp/>server<sp/>socket&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;open<sp/>server<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>optval<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>setsockopt(lsock_,<sp/>SOL_SOCKET,<sp/>SO_REUSEADDR,<sp/>&amp;optval,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(optval));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;server<sp/>setsockopt()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(lsock_);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;server<sp/>setsockopt()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>inaddr.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>inaddr.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>inaddr.sin_addr.s_addr<sp/>=<sp/>INADDR_ANY;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(inaddr.sin_zero,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(inaddr.sin_zero));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>bind(lsock_,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;inaddr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(inaddr));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(lsock_);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;bind<sp/>server&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>listen(lsock_,<sp/>SOMAXCONN);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(lsock_);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;listen<sp/>server&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dsock_<sp/>=<sp/>accept(lsock_,<sp/>NULL,<sp/>NULL);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(dsock_<sp/>&lt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;accept<sp/>server&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>close(lsock_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;accept<sp/>server&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>close(lsock_);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CheckError(dsock_<sp/>&lt;<sp/>0,<sp/>&quot;server_connect&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_ip_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*sa,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxlen)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(sa-&gt;sa_family)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AF_INET:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntop(AF_INET,<sp/>&amp;(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in<sp/>*)sa)-&gt;sin_addr),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>maxlen);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AF_INET6:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inet_ntop(AF_INET6,<sp/>&amp;(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in6<sp/>*)sa)-&gt;sin6_addr),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>maxlen);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(s,<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>AF&quot;</highlight><highlight class="normal">,<sp/>maxlen);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acceptConnection()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr<sp/>address;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addrlen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(address);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>dsock_<sp/>=<sp/>accept(lsock_,<sp/>&amp;address,<sp/>(socklen_t*)&amp;addrlen);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dsock_<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(lsock_);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;accept<sp/>server&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckError(dsock_<sp/>&lt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;server_connect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>str_buffer[INET6_ADDRSTRLEN];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>get_ip_str(&amp;address,<sp/>str_buffer,<sp/>INET6_ADDRSTRLEN);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>closeCurrentConnection(){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dsock_<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CheckError(close(dsock_),<sp/></highlight><highlight class="stringliteral">&quot;close<sp/>sender<sp/>fd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dsock_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd()<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dsock_;<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsock_;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lsock_;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classral_1_1communication_1_1AddressExchangerForReceiver" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classral_1_1communication_1_1AddressExchangerForReceiver" kindref="compound">AddressExchangerForReceiver</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classral_1_1communication_1_1AddressExchanger" kindref="compound">AddressExchanger</ref><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>~<ref refid="classral_1_1communication_1_1AddressExchangerForReceiver" kindref="compound">AddressExchangerForReceiver</ref>()<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CheckError(close(fd()),<sp/></highlight><highlight class="stringliteral">&quot;close<sp/>receiver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="classral_1_1communication_1_1AddressExchangerForReceiver" kindref="compound">AddressExchangerForReceiver</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>port,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>conn_addr;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hostent<sp/>*he;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connfd;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>connfd<sp/>=<sp/>socket(AF_INET,<sp/>SOCK_STREAM,<sp/>0);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connfd<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;open<sp/>client<sp/>socket&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>he<sp/>=<sp/>gethostbyname(hostname);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(he<sp/>==<sp/>NULL<sp/>||<sp/>he-&gt;h_addr_list<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>a<sp/>host&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>close(connfd);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>conn_addr.sin_family<sp/>=<sp/>he-&gt;h_addrtype;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>conn_addr.sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memcpy(&amp;conn_addr.sin_addr,<sp/>he-&gt;h_addr_list[0],<sp/>he-&gt;h_length);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(conn_addr.sin_zero,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(conn_addr.sin_zero));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_attempts<sp/>=<sp/>50;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>attempt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(attempt<sp/>&lt;<sp/>num_attempts){</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>connect(connfd,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*)<sp/>&amp;conn_addr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(conn_addr));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attempt++;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for<sp/>(std::chrono::seconds(1));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attempt<sp/>==<sp/>num_attempts){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>connect<sp/>to<sp/>client&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>connect<sp/>to<sp/>client&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(connfd);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckError(connfd<sp/>&lt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;server_connect&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>connfd_<sp/>=<sp/>connfd;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd()<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connfd_;<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connfd_;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">std::unique_ptr&lt;AddressExchanger&gt;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">AddressExchanger::MakeForSender(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>port)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;AddressExchangerForSender&gt;(port);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">std::unique_ptr&lt;AddressExchanger&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">AddressExchanger::MakeForReceiver(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uint16_t<sp/>port,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_unique&lt;AddressExchangerForReceiver&gt;(port,<sp/>hostname);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>request_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*request)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcomm_1_1ucx__request" kindref="compound">comm::ucx_request</ref><sp/>*req<sp/>=<sp/>(<ref refid="structcomm_1_1ucx__request" kindref="compound">comm::ucx_request</ref><sp/>*)request;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>req-&gt;<ref refid="structcomm_1_1ucx__request_1a8242cf9e0c361bb9b626c2309cb48bab" kindref="member">completed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>req-&gt;<ref refid="structcomm_1_1ucx__request_1a7042a8a653b19b41f71e0726be4da6f1" kindref="member">uid</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">ucp_context_h<sp/>CreateUcpContext()<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>ucp_config_t<sp/>*config;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>ucs_status_t<sp/>status<sp/>=<sp/>ucp_config_read(NULL,<sp/>NULL,<sp/>&amp;config);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>CheckError(status<sp/>!=<sp/>UCS_OK,<sp/></highlight><highlight class="stringliteral">&quot;ucp_config_read&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>ucp_params_t<sp/>ucp_params;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>std::memset(&amp;ucp_params,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ucp_params));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>ucp_params.field_mask<sp/>=<sp/>UCP_PARAM_FIELD_FEATURES<sp/>|</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UCP_PARAM_FIELD_REQUEST_SIZE<sp/>|</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UCP_PARAM_FIELD_REQUEST_INIT;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ucp_params.features<sp/>=<sp/>UCP_FEATURE_TAG<sp/>|<sp/>UCP_FEATURE_WAKEUP;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>ucp_params.request_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structcomm_1_1ucx__request" kindref="compound">comm::ucx_request</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ucp_params.request_init<sp/>=<sp/>request_init;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>ucp_params.mt_workers_shared<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>ucp_context_h<sp/>ucp_context;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>ucp_init(&amp;ucp_params,<sp/>config,<sp/>&amp;ucp_context);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasPrintUcpConfig<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hasPrintUcpConfig)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>ucp_config_print(config,<sp/>stdout,<sp/>NULL,<sp/>UCS_CONFIG_PRINT_CONFIG);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>ucp_config_release(config);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>CheckError(status<sp/>!=<sp/>UCS_OK,<sp/></highlight><highlight class="stringliteral">&quot;ucp_init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ucp_context;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">ucp_worker_h<sp/>CreatetUcpWorker(ucp_context_h<sp/>ucp_context)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>ucp_worker_params_t<sp/>worker_params;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>std::memset(&amp;worker_params,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(worker_params));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>worker_params.field_mask<sp/>=<sp/>UCP_WORKER_PARAM_FIELD_THREAD_MODE;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>worker_params.thread_mode<sp/>=<sp/>UCS_THREAD_MODE_MULTI;<sp/><sp/></highlight><highlight class="comment">//<sp/>UCS_THREAD_MODE_SINGLE;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>ucp_worker_h<sp/>ucp_worker;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>ucs_status_t<sp/>status<sp/>=</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucp_worker_create(ucp_context,<sp/>&amp;worker_params,<sp/>&amp;ucp_worker);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>CheckError(status<sp/>!=<sp/>UCS_OK,<sp/></highlight><highlight class="stringliteral">&quot;ucp_worker_create&quot;</highlight><highlight class="normal">,<sp/>[&amp;ucp_context]()<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>ucp_cleanup(ucp_context);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ucp_worker;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>GetUcpWorkerAddress(ucp_worker_h<sp/>ucp_worker)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>ucpWorkerAddress;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>ucs_status_t<sp/>status<sp/>=<sp/>ucp_worker_get_address(</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucp_worker,<sp/>&amp;ucpWorkerAddress.address,<sp/>&amp;ucpWorkerAddress.length);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>CheckError(status<sp/>!=<sp/>UCS_OK,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ucp_worker_get_address&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;ucp_worker<sp/></highlight><highlight class="comment">/*,<sp/>&amp;ucp_context*/</highlight><highlight class="normal">]()<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucp_worker_destroy(ucp_worker);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ucp_cleanup(ucp_context);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ucpWorkerAddress;</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ErrorHandling<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>ucp_err_handling_mode_t<sp/>ucp_err_mode;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failure;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}<sp/>err_handling_opt;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>failure_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg,<sp/>ucp_ep_h,<sp/>ucs_status_t<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>ucs_status_t<sp/>*arg_status<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ucs_status_t<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::this_thread::get_id()</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>failure<sp/>handler<sp/>called<sp/>with<sp/>status<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>status<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>*arg_status<sp/>=<sp/>status;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">ucp_ep_h<sp/>CreateUcpEp(ucp_worker_h<sp/>ucp_worker,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classral_1_1communication_1_1UcpWorkerAddress" kindref="compound">UcpWorkerAddress</ref><sp/>&amp;ucpWorkerAddress)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ucs_status_t<sp/>current_status<sp/>=<sp/>UCS_OK;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>ucp_ep_params_t<sp/>ep_params;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>ep_params.field_mask<sp/>=</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UCP_EP_PARAM_FIELD_REMOTE_ADDRESS<sp/>|<sp/>UCP_EP_PARAM_FIELD_ERR_HANDLING_MODE<sp/>|</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UCP_EP_PARAM_FIELD_ERR_HANDLER<sp/>|<sp/>UCP_EP_PARAM_FIELD_USER_DATA;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>ep_params.address<sp/>=<sp/>ucpWorkerAddress.address;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>ep_params.err_mode<sp/>=<sp/>err_handling_opt.ucp_err_mode;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>ep_params.err_handler.cb<sp/>=<sp/>failure_handler;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>ep_params.err_handler.arg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>ep_params.user_data<sp/>=<sp/>&amp;current_status;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>ucp_ep_h<sp/>ucp_ep;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>ucs_status_t<sp/>status<sp/>=<sp/>ucp_ep_create(ucp_worker,<sp/>&amp;ep_params,<sp/>&amp;ucp_ep);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>CheckError(status<sp/>!=<sp/>UCS_OK,<sp/></highlight><highlight class="stringliteral">&quot;ucp_ep_create&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ucp_ep;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>communication</highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/communication/ucx_init.h"/>
  </compounddef>
</doxygen>

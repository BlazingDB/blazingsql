<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceral_1_1operators" kind="namespace" language="C++">
    <compoundname>ral::operators</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="OrderBy_8cpp_1a0253a8d0b4f9b7546355d4164bbfb44e" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string ral::operators::ASCENDING_ORDER_SORT_TEXT</definition>
        <argsstring></argsstring>
        <name>ASCENDING_ORDER_SORT_TEXT</name>
        <initializer>= &quot;ASC&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="25" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="OrderBy_8cpp_1a95bf498c9bf7609df2d6fc10481d75ba" prot="public" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string ral::operators::DESCENDING_ORDER_SORT_TEXT</definition>
        <argsstring></argsstring>
        <name>DESCENDING_ORDER_SORT_TEXT</name>
        <initializer>= &quot;DESC&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="26" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="GroupBy_8cpp_1a2f504df8b0f66353af33784f2abc318a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cudf::type_id</type>
        <definition>cudf::type_id ral::operators::get_aggregation_output_type</definition>
        <argsstring>(cudf::type_id input_type, AggregateKind aggregation, bool have_groupby)</argsstring>
        <name>get_aggregation_output_type</name>
        <param>
          <type>cudf::type_id</type>
          <declname>input_type</declname>
        </param>
        <param>
          <type>AggregateKind</type>
          <declname>aggregation</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>have_groupby</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="30" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="30" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a3e53748f81b7b440d9ef2fc71dc8b15d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string ral::operators::aggregator_to_string</definition>
        <argsstring>(AggregateKind aggregation)</argsstring>
        <name>aggregator_to_string</name>
        <param>
          <type>AggregateKind</type>
          <declname>aggregation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="60" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="60" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1ab1daa1a0b910da1b7ec77bdf9afbc28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AggregateKind</type>
        <definition>AggregateKind ral::operators::get_aggregation_operation</definition>
        <argsstring>(std::string expression_in)</argsstring>
        <name>get_aggregation_operation</name>
        <param>
          <type>std::string</type>
          <declname>expression_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="84" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="84" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a5ff14f8db90b8482144914fdfa0716f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; cudf::aggregation &gt;</type>
        <definition>std::unique_ptr&lt; cudf::aggregation &gt; ral::operators::makeCudfAggregation</definition>
        <argsstring>(AggregateKind input, int offset)</argsstring>
        <name>makeCudfAggregation</name>
        <param>
          <type>AggregateKind</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="120" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="120" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a2e649499b890a26cb6d7f6021717286b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; ral::operators::get_group_columns</definition>
        <argsstring>(std::string query_part)</argsstring>
        <name>get_group_columns</name>
        <param>
          <type>std::string</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="152" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="152" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1abffd0030a67602d10ab0b8786dcff9a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; std::string &gt;, std::vector&lt; AggregateKind &gt;, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; std::string &gt;, std::vector&lt; AggregateKind &gt;, std::vector&lt; std::string &gt; &gt; ral::operators::parseGroupByExpression</definition>
        <argsstring>(const std::string &amp;queryString, std::size_t num_cols)</argsstring>
        <name>parseGroupByExpression</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>queryString</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>num_cols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="169" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="169" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a873c3bd4d85e8877bc7e18b059aa5cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; std::string &gt;, std::vector&lt; AggregateKind &gt;, std::vector&lt; std::string &gt; &gt;</type>
        <definition>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; std::string &gt;, std::vector&lt; AggregateKind &gt;, std::vector&lt; std::string &gt; &gt; ral::operators::modGroupByParametersPostComputeAggregations</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;group_column_indices, const std::vector&lt; AggregateKind &gt; &amp;aggregation_types, const std::vector&lt; std::string &gt; &amp;merging_column_names)</argsstring>
        <name>modGroupByParametersPostComputeAggregations</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>group_column_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; AggregateKind &gt; &amp;</type>
          <declname>aggregation_types</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>merging_column_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="213" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="213" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a695b9cb7b108de2871bed10d84fce029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::compute_groupby_without_aggregations</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, const std::vector&lt; int &gt; &amp;group_column_indices)</argsstring>
        <name>compute_groupby_without_aggregations</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>group_column_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="234" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="234" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a50b81eda8c05e734a0efeb4a7ff9dd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::compute_aggregations_without_groupby</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, const std::vector&lt; std::string &gt; &amp;aggregation_input_expressions, const std::vector&lt; AggregateKind &gt; &amp;aggregation_types, const std::vector&lt; std::string &gt; &amp;aggregation_column_assigned_aliases)</argsstring>
        <name>compute_aggregations_without_groupby</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>aggregation_input_expressions</declname>
        </param>
        <param>
          <type>const std::vector&lt; AggregateKind &gt; &amp;</type>
          <declname>aggregation_types</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>aggregation_column_assigned_aliases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="244" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="244" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="GroupBy_8cpp_1a03de4155b7eeb9d977a8c683933f1e80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::compute_aggregations_with_groupby</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, const std::vector&lt; std::string &gt; &amp;aggregation_input_expressions, const std::vector&lt; AggregateKind &gt; &amp;aggregation_types, const std::vector&lt; std::string &gt; &amp;aggregation_column_assigned_aliases, const std::vector&lt; int &gt; &amp;group_column_indices)</argsstring>
        <name>compute_aggregations_with_groupby</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>aggregation_input_expressions</declname>
        </param>
        <param>
          <type>const std::vector&lt; AggregateKind &gt; &amp;</type>
          <declname>aggregation_types</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>aggregation_column_assigned_aliases</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>group_column_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="304" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" bodystart="304" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a91fadf05c2a0d303373bf852d8a99bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ral::frame::BlazingTable&gt; ral::operators::logicalSort</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, const std::vector&lt; int &gt; &amp;sortColIndices, const std::vector&lt; cudf::order &gt; &amp;sortOrderTypes)</argsstring>
        <name>logicalSort</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>sortColIndices</declname>
        </param>
        <param>
          <type>const std::vector&lt; cudf::order &gt; &amp;</type>
          <declname>sortOrderTypes</declname>
        </param>
        <briefdescription>
<para>Sorts the columns of the input table according the sortOrderTypes and sortColIndices. </para>        </briefdescription>
        <detaileddescription>
<para>------------------------------------------------------------------------<mdash/>* <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">table</parametername>
</parameternamelist>
<parameterdescription>
<para>table whose rows need to be compared for ordering </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sortColIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of selected column indices to perform the sort. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sortOrderTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>The expected sort order for each column. Size must be equal to <computeroutput>sortColIndices.size()</computeroutput> or empty.</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="40" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="40" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1aed9ddaff30a0f877247c63c6fc74bfe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; cudf::table &gt;</type>
        <definition>std::unique_ptr&lt;cudf::table&gt; ral::operators::logicalLimit</definition>
        <argsstring>(const cudf::table_view &amp;table, cudf::size_type limitRows)</argsstring>
        <name>logicalLimit</name>
        <param>
          <type>const cudf::table_view &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>cudf::size_type</type>
          <declname>limitRows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="57" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="57" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a3273d9cca104bc4a02f011fdd105be80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t ral::operators::determine_local_limit</definition>
        <argsstring>(Context *, int64_t, cudf::size_type)</argsstring>
        <name>determine_local_limit</name>
        <param>
          <type><ref refid="classblazingdb_1_1manager_1_1Context" kindref="compound">Context</ref> *</type>
        </param>
        <param>
          <type>int64_t</type>
        </param>
        <param>
          <type>cudf::size_type</type>
        </param>
        <briefdescription>
<para>In a distributed context, this function determines what the limit would be for this local node. It does this be distributing and collecting the total number of rows in the table. Then knowing which node index this local node is, it can calculate how many rows are ahead of the ones in this partition. </para>        </briefdescription>
        <detaileddescription>
<para>------------------------------------------------------------------------<mdash/>* <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">contex</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">local_num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows of this partition </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">limit_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit being applied to the whole query</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="83" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="83" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a8b8b6147f8945953731ce7cf2d19610b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt;, cudf::size_type &gt;</type>
        <definition>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt;, cudf::size_type &gt; ral::operators::get_sort_vars</definition>
        <argsstring>(const std::string &amp;query_part)</argsstring>
        <name>get_sort_vars</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="97" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="97" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1abbf2ab613fcc700782f66e070575af45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt;</type>
        <definition>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt; ral::operators::get_vars_to_partition</definition>
        <argsstring>(const std::string &amp;logical_plan)</argsstring>
        <name>get_vars_to_partition</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logical_plan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="119" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="119" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a175bdceb8ffde11582052d1a4b115ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt;</type>
        <definition>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt; ral::operators::get_vars_to_orders</definition>
        <argsstring>(const std::string &amp;logical_plan)</argsstring>
        <name>get_vars_to_orders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logical_plan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="151" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="151" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1ac32ba19f595aae49817227b33eadcc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt;</type>
        <definition>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt; ral::operators::get_vars_to_partition_and_order</definition>
        <argsstring>(const std::string &amp;query_part)</argsstring>
        <name>get_vars_to_partition_and_order</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="188" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="188" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a267b5850e6fcb4f836c5c029ff165bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::vector&lt; int &gt;, std::vector&lt; cudf::order &gt; &gt;</type>
        <definition>std::tuple&lt;std::vector&lt;int&gt;, std::vector&lt;cudf::order&gt; &gt; ral::operators::get_right_sorts_vars</definition>
        <argsstring>(const std::string &amp;query_part)</argsstring>
        <name>get_right_sorts_vars</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="201" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="201" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1af232d009a7da65d9b815368df3dbd0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ral::operators::has_limit_only</definition>
        <argsstring>(const std::string &amp;query_part)</argsstring>
        <name>has_limit_only</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="225" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="225" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1afe71ab06be14f542abcc76a708666d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t ral::operators::get_limit_rows_when_relational_alg_is_simple</definition>
        <argsstring>(const std::string &amp;query_part)</argsstring>
        <name>get_limit_rows_when_relational_alg_is_simple</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="232" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="232" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a75da72a1bc5585d4e529e76604405506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;, bool, int64_t &gt;</type>
        <definition>std::tuple&lt; std::unique_ptr&lt; ral::frame::BlazingTable &gt;, bool, int64_t &gt; ral::operators::limit_table</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, int64_t num_rows_limit)</argsstring>
        <name>limit_table</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows_limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="239" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="239" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a9f761da097028d1e3f55e5536d083a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::sort</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, const std::string &amp;query_part)</argsstring>
        <name>sort</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="251" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="251" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a886ba79b997e08c0bbf97e5b203dcf2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t ral::operators::compute_total_samples</definition>
        <argsstring>(std::size_t num_rows)</argsstring>
        <name>compute_total_samples</name>
        <param>
          <type>std::size_t</type>
          <declname>num_rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="260" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="260" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a1473e920ffe9086e980f57589ac3f96c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::sample</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;table, const std::string &amp;query_part)</argsstring>
        <name>sample</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="271" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="271" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1a7d23f9f2057526b7d27932843faff210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; cudf::table_view &gt;</type>
        <definition>std::vector&lt; cudf::table_view &gt; ral::operators::partition_table</definition>
        <argsstring>(const ral::frame::BlazingTableView &amp;partitionPlan, const ral::frame::BlazingTableView &amp;sortedTable, const std::string &amp;query_part)</argsstring>
        <name>partition_table</name>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>partitionPlan</declname>
        </param>
        <param>
          <type>const <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &amp;</type>
          <declname>sortedTable</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="294" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="294" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1ad6786cf03e9b20d173638c2c5a633f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::generate_partition_plan</definition>
        <argsstring>(const std::vector&lt; std::unique_ptr&lt; ral::frame::BlazingTable &gt;&gt; &amp;samples, std::size_t table_num_rows, std::size_t avg_bytes_per_row, const std::string &amp;query_part, Context *context)</argsstring>
        <name>generate_partition_plan</name>
        <param>
          <type>const std::vector&lt; std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;&gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>table_num_rows</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>avg_bytes_per_row</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <param>
          <type><ref refid="classblazingdb_1_1manager_1_1Context" kindref="compound">Context</ref> *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="322" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="322" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="OrderBy_8cpp_1ac2d6f9b2a588b14fc3ee6689c28d95da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1frame_1_1BlazingTable" kindref="compound">ral::frame::BlazingTable</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::frame::BlazingTable &gt; ral::operators::merge</definition>
        <argsstring>(std::vector&lt; ral::frame::BlazingTableView &gt; partitions_to_merge, const std::string &amp;query_part)</argsstring>
        <name>merge</name>
        <param>
          <type>std::vector&lt; <ref refid="classral_1_1frame_1_1BlazingTableView" kindref="compound">ral::frame::BlazingTableView</ref> &gt;</type>
          <declname>partitions_to_merge</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>query_part</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" line="388" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/OrderBy.cpp" bodystart="388" bodyend="395"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/operators/GroupBy.cpp" line="25" column="1"/>
  </compounddef>
</doxygen>

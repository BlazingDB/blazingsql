<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceinterops" kind="namespace" language="C++">
    <compoundname>interops</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="interpreter__cpp_8h_1acef14b90ee696e64c8b61f86df944585" prot="public" static="no">
        <name>column_index</name>
        <enumvalue id="interpreter__cpp_8h_1acef14b90ee696e64c8b61f86df944585afb69fee96fbbcbdc9c4d826f7236f8fb" prot="public">
          <name>UNARY_INDEX</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter__cpp_8h_1acef14b90ee696e64c8b61f86df944585a8d9718964ce02921f789f8282e190944" prot="public">
          <name>SCALAR_INDEX</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter__cpp_8h_1acef14b90ee696e64c8b61f86df944585ad676be2f3d511743f821c40c54924522" prot="public">
          <name>SCALAR_NULL_INDEX</name>
          <initializer>= -3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="interpreter__cpp_8h_1acef14b90ee696e64c8b61f86df944585a4ffba2c7746880896bcdb734b77acfa8" prot="public">
          <name>NULLARY_INDEX</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" line="21" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" bodystart="21" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="interpreter__cpp_8h_1a1a3b365f4c86d28ba0afd1f235ad217a" prot="public" static="no">
        <type>int16_t</type>
        <definition>typedef int16_t interops::column_index_type</definition>
        <argsstring></argsstring>
        <name>column_index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" line="19" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="interpreter__cpp_8h_1a02fdfeb675833d1f8906368153d01f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void interops::add_expression_to_interpreter_plan</definition>
        <argsstring>(const ral::parser::parse_tree &amp;expr_tree, const std::map&lt; column_index_type, column_index_type &gt; &amp;expr_idx_to_col_idx_map, cudf::size_type start_processing_position, cudf::size_type final_output_position, std::vector&lt; column_index_type &gt; &amp;left_inputs, std::vector&lt; column_index_type &gt; &amp;right_inputs, std::vector&lt; column_index_type &gt; &amp;outputs, std::vector&lt; operator_type &gt; &amp;operators, std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;left_scalars, std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;right_scalars)</argsstring>
        <name>add_expression_to_interpreter_plan</name>
        <param>
          <type>const ral::parser::parse_tree &amp;</type>
          <declname>expr_tree</declname>
        </param>
        <param>
          <type>const std::map&lt; column_index_type, column_index_type &gt; &amp;</type>
          <declname>expr_idx_to_col_idx_map</declname>
        </param>
        <param>
          <type>cudf::size_type</type>
          <declname>start_processing_position</declname>
        </param>
        <param>
          <type>cudf::size_type</type>
          <declname>final_output_position</declname>
        </param>
        <param>
          <type>std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>left_inputs</declname>
        </param>
        <param>
          <type>std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>right_inputs</declname>
        </param>
        <param>
          <type>std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>std::vector&lt; operator_type &gt; &amp;</type>
          <declname>operators</declname>
        </param>
        <param>
          <type>std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;</type>
          <declname>left_scalars</declname>
        </param>
        <param>
          <type>std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;</type>
          <declname>right_scalars</declname>
        </param>
        <briefdescription>
<para>Encodes an expression tree consisting of simple operations in a GPU friendly format that we can later evaluate in a single GPU kernel call. </para>        </briefdescription>
        <detaileddescription>
<para>The interpreter can only evaluate simple operations like arithmetic operations, cast, etc on primitives types. Any complex operation inside the expression tree must be removed (or evaluated and replaced by its result) in a preprocess step</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr_tree</parametername>
</parameternamelist>
<parameterdescription>
<para>The expression tree to encode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expr_idx_to_col_idx_map</parametername>
</parameternamelist>
<parameterdescription>
<para>A map from input table column indices to expression left/right input indices </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_processing_position</parametername>
</parameternamelist>
<parameterdescription>
<para>The start position from where to store temp results in the encoded plan </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>final_output_position</parametername>
</parameternamelist>
<parameterdescription>
<para>The ouput position in the encoded plan for this expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded left inputs indices from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded right inputs indices from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded output indices from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operators</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded operations from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left_scalars</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalars used as left inputs in the operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right_scalars</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalars used as right inputs in the operations </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="interpreter__cpp_8h_1abfcc2abb2fc552dc88ada82b25ef2686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void interops::perform_interpreter_operation</definition>
        <argsstring>(cudf::mutable_table_view &amp;out_table, const cudf::table_view &amp;table, const std::vector&lt; column_index_type &gt; &amp;left_inputs, const std::vector&lt; column_index_type &gt; &amp;right_inputs, const std::vector&lt; column_index_type &gt; &amp;outputs, const std::vector&lt; column_index_type &gt; &amp;final_output_positions, const std::vector&lt; operator_type &gt; &amp;operators, const std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;left_scalars, const std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;right_scalars, cudf::size_type operation_num_rows=0)</argsstring>
        <name>perform_interpreter_operation</name>
        <param>
          <type>cudf::mutable_table_view &amp;</type>
          <declname>out_table</declname>
        </param>
        <param>
          <type>const cudf::table_view &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>left_inputs</declname>
        </param>
        <param>
          <type>const std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>right_inputs</declname>
        </param>
        <param>
          <type>const std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>outputs</declname>
        </param>
        <param>
          <type>const std::vector&lt; column_index_type &gt; &amp;</type>
          <declname>final_output_positions</declname>
        </param>
        <param>
          <type>const std::vector&lt; operator_type &gt; &amp;</type>
          <declname>operators</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;</type>
          <declname>left_scalars</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::unique_ptr&lt; cudf::scalar &gt;&gt; &amp;</type>
          <declname>right_scalars</declname>
        </param>
        <param>
          <type>cudf::size_type</type>
          <declname>operation_num_rows</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Evaluates multiple operations encoded in a GPU friendly format in a single GPU kernel call. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_table</parametername>
</parameternamelist>
<parameterdescription>
<para>The output table to store the results </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>The input table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded left inputs indices from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded right inputs indices from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outputs</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded output indices from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>final_output_positions</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded final output indices for all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operators</parametername>
</parameternamelist>
<parameterdescription>
<para>The encoded operations from all the processed expressions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>left_scalars</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalars used as left inputs in the operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right_scalars</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalars used as right inputs in the operations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>The output number of rows </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" line="77" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/Interpreter/interpreter_cpp.h" line="17" column="1"/>
  </compounddef>
</doxygen>

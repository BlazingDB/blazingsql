<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classral_1_1batch_1_1BatchSequenceBypass" kind="class" language="C++" prot="public">
    <compoundname>ral::batch::BatchSequenceBypass</compoundname>
    <includes refid="BatchProcessing_8h" local="no">BatchProcessing.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classral_1_1batch_1_1BatchSequenceBypass_1a7ec5e18192b83c6df8304a8334598c61" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classral_1_1cache_1_1CacheMachine" kindref="compound">ral::cache::CacheMachine</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ral::cache::CacheMachine&gt; ral::batch::BatchSequenceBypass::cache</definition>
        <argsstring></argsstring>
        <name>cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cache machine from which the data will be pulled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="107" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classral_1_1batch_1_1BatchSequenceBypass_1a317f38150ef49c30e647770414eef1c1" prot="private" static="no" mutable="no">
        <type>const <ref refid="classral_1_1cache_1_1kernel" kindref="compound">ral::cache::kernel</ref> *</type>
        <definition>const ral::cache::kernel* ral::batch::BatchSequenceBypass::kernel</definition>
        <argsstring></argsstring>
        <name>kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the kernel that will receive the cache data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="108" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classral_1_1batch_1_1BatchSequenceBypass_1aece145bb27dd1aa61252a831b8d0b536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ral::batch::BatchSequenceBypass::BatchSequenceBypass</definition>
        <argsstring>(std::shared_ptr&lt; ral::cache::CacheMachine &gt; cache=nullptr, const ral::cache::kernel *kernel=nullptr)</argsstring>
        <name>BatchSequenceBypass</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classral_1_1cache_1_1CacheMachine" kindref="compound">ral::cache::CacheMachine</ref> &gt;</type>
          <declname>cache</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const <ref refid="classral_1_1cache_1_1kernel" kindref="compound">ral::cache::kernel</ref> *</type>
          <declname>kernel</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor for the <ref refid="classral_1_1batch_1_1BatchSequenceBypass" kindref="compound">BatchSequenceBypass</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cache</parametername>
</parameternamelist>
<parameterdescription>
<para>The input cache from where the data will be pulled. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kernel</parametername>
</parameternamelist>
<parameterdescription>
<para>The kernel that will actually receive the pulled data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="78" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.cpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classral_1_1batch_1_1BatchSequenceBypass_1aaf3b8397046f0ad622a49c751861d983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ral::batch::BatchSequenceBypass::set_source</definition>
        <argsstring>(std::shared_ptr&lt; ral::cache::CacheMachine &gt; cache)</argsstring>
        <name>set_source</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classral_1_1cache_1_1CacheMachine" kindref="compound">ral::cache::CacheMachine</ref> &gt;</type>
          <declname>cache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the input cache machine. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cache</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the new input cache. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="84" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.cpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classral_1_1batch_1_1BatchSequenceBypass_1a5d55f785961b21c82578223ab5a0a217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classral_1_1cache_1_1CacheData" kindref="compound">ral::cache::CacheData</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ral::cache::CacheData &gt; ral::batch::BatchSequenceBypass::next</definition>
        <argsstring>()</argsstring>
        <name>next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the next message as a CacheData object. <simplesect kind="return"><para>CacheData containing the next message without decacheing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="90" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.cpp" bodystart="58" bodyend="60"/>
        <referencedby refid="classral_1_1batch_1_1LimitKernel_1a154ab2ef98ef7be11d3ba6c8dc6db06d" compoundref="BatchOrderByProcessing_8cpp" startline="613" endline="724">ral::batch::LimitKernel::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="classral_1_1batch_1_1BatchSequenceBypass_1a623422aa9164a34bce024e92f4f26679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ral::batch::BatchSequenceBypass::wait_for_next</definition>
        <argsstring>()</argsstring>
        <name>wait_for_next</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Blocks executing thread until a new message is ready or when the message queue is empty. <simplesect kind="return"><para>true A new message is ready. </para></simplesect>
<simplesect kind="return"><para>false There are no more messages on the cache. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="97" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.cpp" bodystart="62" bodyend="64"/>
        <referencedby refid="classral_1_1batch_1_1LimitKernel_1a154ab2ef98ef7be11d3ba6c8dc6db06d" compoundref="BatchOrderByProcessing_8cpp" startline="613" endline="724">ral::batch::LimitKernel::run</referencedby>
      </memberdef>
      <memberdef kind="function" id="classral_1_1batch_1_1BatchSequenceBypass_1a221ad94710394f83ebbeeabcc1851b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ral::batch::BatchSequenceBypass::has_next_now</definition>
        <argsstring>()</argsstring>
        <name>has_next_now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Indicates if the message queue is not empty at this point on time. <simplesect kind="return"><para>true There is at least one message in the queue. </para></simplesect>
<simplesect kind="return"><para>false Message queue is empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="104" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This data sequencer works as a bypass to take data from one input to an output without decacheing. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" line="71" column="1" bodyfile="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/BatchProcessing.h" bodystart="71" bodyend="109"/>
    <listofallmembers>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1aece145bb27dd1aa61252a831b8d0b536" prot="public" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>BatchSequenceBypass</name></member>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1a7ec5e18192b83c6df8304a8334598c61" prot="private" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>cache</name></member>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1a221ad94710394f83ebbeeabcc1851b22" prot="public" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>has_next_now</name></member>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1a317f38150ef49c30e647770414eef1c1" prot="private" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>kernel</name></member>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1a5d55f785961b21c82578223ab5a0a217" prot="public" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>next</name></member>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1aaf3b8397046f0ad622a49c751861d983" prot="public" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>set_source</name></member>
      <member refid="classral_1_1batch_1_1BatchSequenceBypass_1a623422aa9164a34bce024e92f4f26679" prot="public" virt="non-virtual"><scope>ral::batch::BatchSequenceBypass</scope><name>wait_for_next</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

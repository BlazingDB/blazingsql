<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="PhysicalPlanGenerator_8h" kind="file" language="C++">
    <compoundname>PhysicalPlanGenerator.h</compoundname>
    <includes refid="LogicPrimitives_8h" local="yes">LogicPrimitives.h</includes>
    <includes refid="BatchOrderByProcessing_8h" local="yes">BatchOrderByProcessing.h</includes>
    <includes refid="BatchAggregationProcessing_8h" local="yes">BatchAggregationProcessing.h</includes>
    <includes refid="BatchJoinProcessing_8h" local="yes">BatchJoinProcessing.h</includes>
    <includes refid="BatchUnionProcessing_8h" local="yes">BatchUnionProcessing.h</includes>
    <includes refid="BatchWindowFunctionProcessing_8h" local="yes">BatchWindowFunctionProcessing.h</includes>
    <includes refid="Schema_8h" local="yes">io/Schema.h</includes>
    <includes refid="CommonOperations_8h" local="yes">utilities/CommonOperations.h</includes>
    <includes refid="expression__utils_8hpp" local="yes">parser/expression_utils.hpp</includes>
    <includes local="no">boost/property_tree/ptree.hpp</includes>
    <includes local="no">boost/property_tree/json_parser.hpp</includes>
    <includes local="no">Util/StringUtil.h</includes>
    <includedby refid="MemoryMonitor_8cpp" local="yes">/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/bmr/MemoryMonitor.cpp</includedby>
    <includedby refid="CalciteInterpreter_8cpp" local="yes">/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/CalciteInterpreter.cpp</includedby>
    <incdepgraph>
      <node id="4180">
        <label>atomic</label>
      </node>
      <node id="4206">
        <label>config/GPUManager.cuh</label>
      </node>
      <node id="4201">
        <label>rmm/mr/device/managed_memory_resource.hpp</label>
      </node>
      <node id="4242">
        <label>functional</label>
      </node>
      <node id="4245">
        <label>queue</label>
      </node>
      <node id="4179">
        <label>CacheMachine.h</label>
        <link refid="CacheMachine_8h_source"/>
        <childnode refid="4180" relation="include">
        </childnode>
        <childnode refid="4181" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4182" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4184" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4185" relation="include">
        </childnode>
        <childnode refid="4189" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4193" relation="include">
        </childnode>
        <childnode refid="4209" relation="include">
        </childnode>
        <childnode refid="4188" relation="include">
        </childnode>
        <childnode refid="4210" relation="include">
        </childnode>
        <childnode refid="4220" relation="include">
        </childnode>
        <childnode refid="4223" relation="include">
        </childnode>
        <childnode refid="4232" relation="include">
        </childnode>
        <childnode refid="4233" relation="include">
        </childnode>
      </node>
      <node id="4161">
        <label>LogicPrimitives.h</label>
        <link refid="LogicPrimitives_8h_source"/>
        <childnode refid="4162" relation="include">
        </childnode>
        <childnode refid="4163" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4167" relation="include">
        </childnode>
        <childnode refid="4169" relation="include">
        </childnode>
      </node>
      <node id="4218">
        <label>cudf/scalar/scalar_device_view.cuh</label>
      </node>
      <node id="4223">
        <label>communication/messages/GPUComponentMessage.h</label>
        <link refid="GPUComponentMessage_8h_source"/>
        <childnode refid="4184" relation="include">
        </childnode>
        <childnode refid="4211" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4213" relation="include">
        </childnode>
        <childnode refid="4171" relation="include">
        </childnode>
        <childnode refid="4192" relation="include">
        </childnode>
        <childnode refid="4224" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4225" relation="include">
        </childnode>
        <childnode refid="4226" relation="include">
        </childnode>
        <childnode refid="4227" relation="include">
        </childnode>
        <childnode refid="4228" relation="include">
        </childnode>
        <childnode refid="4168" relation="include">
        </childnode>
        <childnode refid="4229" relation="include">
        </childnode>
        <childnode refid="4230" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4231" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4169" relation="include">
        </childnode>
      </node>
      <node id="4207">
        <label>sys/sysinfo.h</label>
      </node>
      <node id="4216">
        <label>cudf/scalar/scalar_factories.hpp</label>
      </node>
      <node id="4248">
        <label>operators/OrderBy.h</label>
        <link refid="OrderBy_8h_source"/>
        <childnode refid="4184" relation="include">
        </childnode>
        <childnode refid="4211" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4213" relation="include">
        </childnode>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4226" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4236">
        <label>kernel_type.h</label>
        <link refid="kernel__type_8h_source"/>
        <childnode refid="4165" relation="include">
        </childnode>
      </node>
      <node id="4172">
        <label>cstdint</label>
      </node>
      <node id="4199">
        <label>rmm/mr/device/owning_wrapper.hpp</label>
      </node>
      <node id="4204">
        <label>rmm/mr/device/logging_resource_adaptor.hpp</label>
      </node>
      <node id="4167">
        <label>execution_graph/logic_controllers/BlazingColumn.h</label>
        <link refid="BlazingColumn_8h_source"/>
        <childnode refid="4168" relation="include">
        </childnode>
        <childnode refid="4162" relation="include">
        </childnode>
        <childnode refid="4163" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
      </node>
      <node id="4192">
        <label>transport/Node.h</label>
        <link refid="Node_8h_source"/>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
      </node>
      <node id="4227">
        <label>cudf/copying.hpp</label>
      </node>
      <node id="4185">
        <label>error.hpp</label>
        <link refid="error_8hpp_source"/>
        <childnode refid="4186" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4187" relation="include">
        </childnode>
        <childnode refid="4188" relation="include">
        </childnode>
      </node>
      <node id="4194">
        <label>cassert</label>
      </node>
      <node id="4259">
        <label>BatchWindowFunctionProcessing.h</label>
        <link refid="BatchWindowFunctionProcessing_8h_source"/>
        <childnode refid="4178" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4253" relation="include">
        </childnode>
      </node>
      <node id="4200">
        <label>rmm/mr/device/cuda_memory_resource.hpp</label>
      </node>
      <node id="4253">
        <label>operators/GroupBy.h</label>
        <link refid="GroupBy_8h_source"/>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4226" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4254" relation="include">
        </childnode>
        <childnode refid="4255" relation="include">
        </childnode>
        <childnode refid="4256" relation="include">
        </childnode>
        <childnode refid="4168" relation="include">
        </childnode>
      </node>
      <node id="4203">
        <label>rmm/mr/device/arena_memory_resource.hpp</label>
      </node>
      <node id="4225">
        <label>numeric</label>
      </node>
      <node id="4197">
        <label>rmm/cuda_stream_view.hpp</label>
      </node>
      <node id="4165">
        <label>string</label>
      </node>
      <node id="4178">
        <label>BatchProcessing.h</label>
        <link refid="BatchProcessing_8h_source"/>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4179" relation="include">
        </childnode>
        <childnode refid="4234" relation="include">
        </childnode>
        <childnode refid="4221" relation="include">
        </childnode>
        <childnode refid="4246" relation="include">
        </childnode>
        <childnode refid="4235" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4254">
        <label>cudf/aggregation.hpp</label>
      </node>
      <node id="4183">
        <label>map</label>
      </node>
      <node id="4229">
        <label>cudf/null_mask.hpp</label>
      </node>
      <node id="4177">
        <label>BatchOrderByProcessing.h</label>
        <link refid="BatchOrderByProcessing_8h_source"/>
        <childnode refid="4178" relation="include">
        </childnode>
        <childnode refid="4209" relation="include">
        </childnode>
        <childnode refid="4248" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
      </node>
      <node id="4238">
        <label>kpair.h</label>
        <link refid="kpair_8h_source"/>
        <childnode refid="4237" relation="include">
        </childnode>
        <childnode refid="4235" relation="include">
        </childnode>
      </node>
      <node id="4250">
        <label>distribution/primitives.h</label>
        <link refid="primitives_8h_source"/>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4251" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4212">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="4169">
        <label>BlazingHostTable.h</label>
        <link refid="BlazingHostTable_8h_source"/>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4171" relation="include">
        </childnode>
        <childnode refid="4173" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4188">
        <label>exception</label>
      </node>
      <node id="4233">
        <label>WaitingQueue.h</label>
        <link refid="WaitingQueue_8h_source"/>
        <childnode refid="4180" relation="include">
        </childnode>
        <childnode refid="4181" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4182" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4184" relation="include">
        </childnode>
        <childnode refid="4188" relation="include">
        </childnode>
      </node>
      <node id="4191">
        <label>execution_graph/Context.h</label>
        <link refid="Context_8h_source"/>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4192" relation="include">
        </childnode>
      </node>
      <node id="4232">
        <label>CacheData.h</label>
        <link refid="CacheData_8h_source"/>
        <childnode refid="4180" relation="include">
        </childnode>
        <childnode refid="4181" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4182" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4184" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4185" relation="include">
        </childnode>
        <childnode refid="4189" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4193" relation="include">
        </childnode>
        <childnode refid="4209" relation="include">
        </childnode>
        <childnode refid="4188" relation="include">
        </childnode>
        <childnode refid="4210" relation="include">
        </childnode>
        <childnode refid="4220" relation="include">
        </childnode>
        <childnode refid="4223" relation="include">
        </childnode>
      </node>
      <node id="4210">
        <label>io/data_provider/DataProvider.h</label>
        <link refid="DataProvider_8h_source"/>
        <childnode refid="4184" relation="include">
        </childnode>
        <childnode refid="4211" relation="include">
        </childnode>
        <childnode refid="4212" relation="include">
        </childnode>
        <childnode refid="4213" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4215" relation="include">
        </childnode>
        <childnode refid="4216" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4217" relation="include">
        </childnode>
        <childnode refid="4218" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4219" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4260">
        <label>utilities/CommonOperations.h</label>
        <link refid="CommonOperations_8h_source"/>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4230" relation="include">
        </childnode>
      </node>
      <node id="4231">
        <label>cudf/strings/strings_column_view.hpp</label>
      </node>
      <node id="4184">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="4261">
        <label>parser/expression_utils.hpp</label>
        <link refid="expression__utils_8hpp_source"/>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4254" relation="include">
        </childnode>
      </node>
      <node id="4163">
        <label>cudf/table/table_view.hpp</label>
      </node>
      <node id="4241">
        <label>utilities/ctpl_stl.h</label>
        <link refid="ctpl__stl_8h_source"/>
        <childnode refid="4242" relation="include">
        </childnode>
        <childnode refid="4243" relation="include">
        </childnode>
        <childnode refid="4180" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4188" relation="include">
        </childnode>
        <childnode refid="4244" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4245" relation="include">
        </childnode>
      </node>
      <node id="4221">
        <label>../Schema.h</label>
        <link refid="Schema_8h_source"/>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4170" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4256">
        <label>cudf/detail/aggregation/aggregation.hpp</label>
      </node>
      <node id="4214">
        <label>arrow/io/interfaces.h</label>
      </node>
      <node id="4182">
        <label>condition_variable</label>
      </node>
      <node id="4240">
        <label>ExceptionHandling/BlazingThread.h</label>
      </node>
      <node id="4224">
        <label>communication/messages/MessageUtil.cuh</label>
      </node>
      <node id="4208">
        <label>sys/statvfs.h</label>
      </node>
      <node id="4217">
        <label>cudf/utilities/type_dispatcher.hpp</label>
      </node>
      <node id="4226">
        <label>tuple</label>
      </node>
      <node id="4244">
        <label>future</label>
      </node>
      <node id="4211">
        <label>spdlog/async.h</label>
      </node>
      <node id="4235">
        <label>kernel.h</label>
        <link refid="kernel_8h_source"/>
        <childnode refid="4236" relation="include">
        </childnode>
        <childnode refid="4237" relation="include">
        </childnode>
        <childnode refid="4234" relation="include">
        </childnode>
      </node>
      <node id="4263">
        <label>boost/property_tree/json_parser.hpp</label>
      </node>
      <node id="4174">
        <label>stack</label>
      </node>
      <node id="4166">
        <label>vector</label>
      </node>
      <node id="4171">
        <label>transport/ColumnTransport.h</label>
        <link refid="ColumnTransport_8h_source"/>
        <childnode refid="4172" relation="include">
        </childnode>
      </node>
      <node id="4230">
        <label>cudf/column/column_factories.hpp</label>
      </node>
      <node id="4228">
        <label>cudf/column/column.hpp</label>
      </node>
      <node id="4176">
        <label>ucp/api/ucp.h</label>
      </node>
      <node id="4213">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="4173">
        <label>bmr/BufferProvider.h</label>
        <link refid="BufferProvider_8h_source"/>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4174" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4176" relation="include">
        </childnode>
      </node>
      <node id="4160">
        <label>/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/PhysicalPlanGenerator.h</label>
        <link refid="PhysicalPlanGenerator_8h"/>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4177" relation="include">
        </childnode>
        <childnode refid="4252" relation="include">
        </childnode>
        <childnode refid="4257" relation="include">
        </childnode>
        <childnode refid="4258" relation="include">
        </childnode>
        <childnode refid="4259" relation="include">
        </childnode>
        <childnode refid="4221" relation="include">
        </childnode>
        <childnode refid="4260" relation="include">
        </childnode>
        <childnode refid="4261" relation="include">
        </childnode>
        <childnode refid="4262" relation="include">
        </childnode>
        <childnode refid="4263" relation="include">
        </childnode>
        <childnode refid="4264" relation="include">
        </childnode>
      </node>
      <node id="4264">
        <label>Util/StringUtil.h</label>
      </node>
      <node id="4220">
        <label>io/data_parser/DataParser.h</label>
        <link refid="DataParser_8h_source"/>
        <childnode refid="4221" relation="include">
        </childnode>
        <childnode refid="4222" relation="include">
        </childnode>
        <childnode refid="4210" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
      </node>
      <node id="4170">
        <label>cudf/types.hpp</label>
      </node>
      <node id="4239">
        <label>bmr/MemoryMonitor.h</label>
        <link refid="MemoryMonitor_8h_source"/>
        <childnode refid="4182" relation="include">
        </childnode>
        <childnode refid="4175" relation="include">
        </childnode>
        <childnode refid="4190" relation="include">
        </childnode>
        <childnode refid="4240" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
      </node>
      <node id="4205">
        <label>rmm/mr/device/per_device_resource.hpp</label>
      </node>
      <node id="4222">
        <label>../DataType.h</label>
        <link refid="DataType_8h_source"/>
      </node>
      <node id="4209">
        <label>communication/CommunicationData.h</label>
        <link refid="CommunicationData_8h_source"/>
        <childnode refid="4176" relation="include">
        </childnode>
        <childnode refid="4192" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
      </node>
      <node id="4234">
        <label>taskflow/graph.h</label>
        <link refid="graph_8h_source"/>
        <childnode refid="4235" relation="include">
        </childnode>
        <childnode refid="4238" relation="include">
        </childnode>
        <childnode refid="4179" relation="include">
        </childnode>
        <childnode refid="4239" relation="include">
        </childnode>
        <childnode refid="4241" relation="include">
        </childnode>
      </node>
      <node id="4262">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="4237">
        <label>port.h</label>
        <link refid="port_8h_source"/>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
        <childnode refid="4165" relation="include">
        </childnode>
        <childnode refid="4179" relation="include">
        </childnode>
      </node>
      <node id="4186">
        <label>iostream</label>
      </node>
      <node id="4168">
        <label>cudf/column/column_view.hpp</label>
      </node>
      <node id="4181">
        <label>deque</label>
      </node>
      <node id="4175">
        <label>mutex</label>
      </node>
      <node id="4196">
        <label>cuda_runtime_api.h</label>
      </node>
      <node id="4190">
        <label>chrono</label>
      </node>
      <node id="4219">
        <label>blazingdb/io/FileSystem/Uri.h</label>
      </node>
      <node id="4189">
        <label>CodeTimer.h</label>
        <link refid="CodeTimer_8h_source"/>
        <childnode refid="4190" relation="include">
        </childnode>
      </node>
      <node id="4198">
        <label>rmm/mr/device/device_memory_resource.hpp</label>
      </node>
      <node id="4243">
        <label>thread</label>
      </node>
      <node id="4193">
        <label>bmr/BlazingMemoryResource.h</label>
        <link refid="BlazingMemoryResource_8h_source"/>
        <childnode refid="4194" relation="include">
        </childnode>
        <childnode refid="4180" relation="include">
        </childnode>
        <childnode refid="4195" relation="include">
        </childnode>
        <childnode refid="4196" relation="include">
        </childnode>
        <childnode refid="4197" relation="include">
        </childnode>
        <childnode refid="4198" relation="include">
        </childnode>
        <childnode refid="4199" relation="include">
        </childnode>
        <childnode refid="4200" relation="include">
        </childnode>
        <childnode refid="4201" relation="include">
        </childnode>
        <childnode refid="4202" relation="include">
        </childnode>
        <childnode refid="4203" relation="include">
        </childnode>
        <childnode refid="4204" relation="include">
        </childnode>
        <childnode refid="4205" relation="include">
        </childnode>
        <childnode refid="4206" relation="include">
        </childnode>
        <childnode refid="4207" relation="include">
        </childnode>
        <childnode refid="4208" relation="include">
        </childnode>
      </node>
      <node id="4249">
        <label>taskflow/distributing_kernel.h</label>
        <link refid="distributing__kernel_8h_source"/>
        <childnode refid="4180" relation="include">
        </childnode>
        <childnode refid="4183" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4250" relation="include">
        </childnode>
        <childnode refid="4179" relation="include">
        </childnode>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4235" relation="include">
        </childnode>
      </node>
      <node id="4252">
        <label>BatchAggregationProcessing.h</label>
        <link refid="BatchAggregationProcessing_8h_source"/>
        <childnode refid="4178" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
        <childnode refid="4253" relation="include">
        </childnode>
      </node>
      <node id="4202">
        <label>rmm/mr/device/pool_memory_resource.hpp</label>
      </node>
      <node id="4195">
        <label>set</label>
      </node>
      <node id="4162">
        <label>cudf/table/table.hpp</label>
      </node>
      <node id="4251">
        <label>communication/factory/MessageFactory.h</label>
        <link refid="MessageFactory_8h_source"/>
      </node>
      <node id="4246">
        <label>io/DataLoader.h</label>
        <link refid="DataLoader_8h_source"/>
        <childnode refid="4247" relation="include">
        </childnode>
        <childnode refid="4220" relation="include">
        </childnode>
        <childnode refid="4210" relation="include">
        </childnode>
        <childnode refid="4214" relation="include">
        </childnode>
        <childnode refid="4191" relation="include">
        </childnode>
        <childnode refid="4166" relation="include">
        </childnode>
        <childnode refid="4164" relation="include">
        </childnode>
      </node>
      <node id="4187">
        <label>cudf/utilities/error.hpp</label>
      </node>
      <node id="4255">
        <label>cudf/groupby.hpp</label>
      </node>
      <node id="4258">
        <label>BatchUnionProcessing.h</label>
        <link refid="BatchUnionProcessing_8h_source"/>
        <childnode refid="4178" relation="include">
        </childnode>
        <childnode refid="4161" relation="include">
        </childnode>
      </node>
      <node id="4257">
        <label>BatchJoinProcessing.h</label>
        <link refid="BatchJoinProcessing_8h_source"/>
        <childnode refid="4226" relation="include">
        </childnode>
        <childnode refid="4178" relation="include">
        </childnode>
        <childnode refid="4249" relation="include">
        </childnode>
      </node>
      <node id="4215">
        <label>cudf/scalar/scalar.hpp</label>
      </node>
      <node id="4164">
        <label>memory</label>
      </node>
      <node id="4247">
        <label>FileSystem/Uri.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structral_1_1batch_1_1node" prot="public">ral::batch::node</innerclass>
    <innerclass refid="structral_1_1batch_1_1tree__processor" prot="public">ral::batch::tree_processor</innerclass>
    <innernamespace refid="namespaceral">ral</innernamespace>
    <innernamespace refid="namespaceral_1_1batch">ral::batch</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogicPrimitives.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BatchOrderByProcessing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BatchAggregationProcessing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BatchJoinProcessing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BatchUnionProcessing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BatchWindowFunctionProcessing.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;io/Schema.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utilities/CommonOperations.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;parser/expression_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/property_tree/ptree.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/property_tree/json_parser.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Util/StringUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefmt_1_1literals" kindref="compound">fmt::literals</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceral" kindref="compound">ral</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">batch<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ral::cache::kstatus;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classral_1_1cache_1_1kernel" kindref="compound">ral::cache::kernel</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ral::cache::kernel_type;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">ral::cache::cache_settings</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ral::cache::CacheType;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structral_1_1batch_1_1node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structral_1_1batch_1_1node" kindref="compound">node</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>expr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;kernel&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_unit;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;node&gt;&gt;<sp/>children;<sp/><sp/></highlight><highlight class="comment">//<sp/>children<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33" refid="structral_1_1batch_1_1tree__processor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structral_1_1batch_1_1tree__processor" kindref="compound">tree_processor</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structral_1_1batch_1_1node" kindref="compound">node</ref><sp/>root;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Context&gt;<sp/>context;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ral::io::data_loader&gt;<sp/>input_loaders;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ral::io::Schema&gt;<sp/>schemas;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>table_names;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>table_scans;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transform_operators_bigger_than_gpu<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structral_1_1batch_1_1tree__processor" kindref="compound">tree_processor</ref>(<sp/><ref refid="structral_1_1batch_1_1node" kindref="compound">node</ref><sp/>root,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Context&gt;<sp/>context,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ral::io::data_loader&gt;<sp/>input_loaders,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ral::io::Schema&gt;<sp/>schemas,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>table_names,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>table_scans,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>transform_operators_bigger_than_gpu)<sp/>:<sp/>root(root),context(context),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>input_loaders(input_loaders),schemas(schemas),table_names(table_names),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>table_scans(table_scans),<sp/>transform_operators_bigger_than_gpu(transform_operators_bigger_than_gpu){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;kernel&gt;<sp/>make_kernel(std::size_t<sp/>kernel_id,<sp/>std::string<sp/>expr,<sp/>std::shared_ptr&lt;ral::cache::graph&gt;<sp/>query_graph)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;kernel&gt;<sp/>k;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kernel_context<sp/>=<sp/>this-&gt;context-&gt;clone();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;context-&gt;incrementQueryStep();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>is_project(expr)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;Projection&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>is_filter(expr)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;Filter&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>is_logical_scan(expr)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>table_index<sp/>=<sp/>get_table_index(table_scans,<sp/>expr);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;TableScan&gt;(kernel_id,<sp/>expr,<sp/>this-&gt;input_loaders[table_index].get_provider()-&gt;clone(),this-&gt;input_loaders[table_index].get_parser(),<sp/>this-&gt;schemas[table_index],<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lets<sp/>erase<sp/>the<sp/>input_loaders<sp/>and<sp/>corresponding<sp/>table_name<sp/>and<sp/>table_scan<sp/>so<sp/>that<sp/>if<sp/>we<sp/>have<sp/>a<sp/>repeated<sp/>table_scan,<sp/>we<sp/>dont<sp/>reuse<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_loaders.erase(input_loaders.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table_names.erase(table_names.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table_scans.erase(table_scans.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schemas.erase(schemas.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_bindable_scan(expr))<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>table_index<sp/>=<sp/>get_table_index(table_scans,<sp/>expr);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;BindableTableScan&gt;(kernel_id,<sp/>expr,<sp/>this-&gt;input_loaders[table_index].get_provider()-&gt;clone(),this-&gt;input_loaders[table_index].get_parser(),<sp/>this-&gt;schemas[table_index],<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lets<sp/>erase<sp/>the<sp/>input_loaders<sp/>and<sp/>corresponding<sp/>table_name<sp/>and<sp/>table_scan<sp/>so<sp/>that<sp/>if<sp/>we<sp/>have<sp/>a<sp/>repeated<sp/>table_scan,<sp/>we<sp/>dont<sp/>reuse<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_loaders.erase(input_loaders.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table_names.erase(table_names.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table_scans.erase(table_scans.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>schemas.erase(schemas.begin()<sp/>+<sp/>table_index);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_single_node_partition(expr))<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;PartitionSingleNodeKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_partition(expr))<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;PartitionKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_sort_and_sample(expr))<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;SortAndSampleKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_window_compute(expr))<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;ComputeWindowKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_merge(expr))<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;MergeStreamKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_limit(expr))<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;LimitKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_compute_aggregate(expr))<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;ComputeAggregateKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_distribute_aggregate(expr))<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;DistributeAggregateKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_merge_aggregate(expr))<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;MergeAggregateKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_pairwise_join(expr))<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;PartwiseJoin&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_join_partition(expr))<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;JoinPartitionKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_union(expr))<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>std::make_shared&lt;UnionKernel&gt;(kernel_id,expr,<sp/>kernel_context,<sp/>query_graph);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAL_FAIL(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>or<sp/>unsupported<sp/>expression:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>expr<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>in<sp/>the<sp/>logical<sp/>plan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>expr_tree_from_json(std::size_t<sp/>kernel_id,<sp/>boost::property_tree::ptree<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p_tree,<sp/><ref refid="structral_1_1batch_1_1node" kindref="compound">node</ref><sp/>*<sp/>root_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/>std::shared_ptr&lt;ral::cache::graph&gt;<sp/>query_graph)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expr<sp/>=<sp/>p_tree.get&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_ptr-&gt;expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_ptr-&gt;level<sp/>=<sp/>level;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_ptr-&gt;kernel_unit<sp/>=<sp/>make_kernel(kernel_id,<sp/>expr,<sp/>query_graph);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_id++;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;child<sp/>:<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child_node_ptr<sp/>=<sp/>std::make_shared&lt;node&gt;();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_ptr-&gt;children.push_back(child_node_ptr);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel_id<sp/>=<sp/>expr_tree_from_json(kernel_id,<sp/>child.second,<sp/>child_node_ptr.get(),<sp/>level<sp/>+<sp/>1,<sp/>query_graph);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kernel_id;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>create_array_tree(boost::property_tree::ptree<sp/>child){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>children;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>children.push_back(std::make_pair(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>child));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transform_json_tree(boost::property_tree::ptree<sp/>&amp;p_tree,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_windowed_call<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>expr<sp/>=<sp/>p_tree.get&lt;std::string&gt;(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_sort(expr)){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>limit_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>merge_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>partition_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sort_and_sample_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ral::operators::has_limit_only(expr)<sp/>&amp;&amp;<sp/>!is_window_function(expr)<sp/>){</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(limit_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_LIMIT_TEXT);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>limit_expr);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;context-&gt;getTotalNodes()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(limit_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_LIMIT_TEXT);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(merge_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_MERGE_TEXT);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(partition_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_SINGLE_NODE_PARTITION_TEXT);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(sort_and_sample_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_SORT_AND_SAMPLE_TEXT);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(limit_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_LIMIT_TEXT);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(merge_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_MERGE_TEXT);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(partition_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_PARTITION_TEXT);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(sort_and_sample_expr,<sp/>LOGICAL_SORT_TEXT,<sp/>LOGICAL_SORT_AND_SAMPLE_TEXT);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>sample_tree;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>sort_and_sample_expr);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>partition_tree;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partition_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>partition_expr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partition_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(sample_tree));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>merge_tree;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>merge_expr);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>merge_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(partition_tree));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_window_function(expr))<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree<sp/>=<sp/>merge_tree;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>limit_expr);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(merge_tree));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_aggregate(expr))<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>merge_aggregate_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>distribute_aggregate_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>compute_aggregate_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;context-&gt;getTotalNodes()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(merge_aggregate_expr,<sp/>LOGICAL_AGGREGATE_TEXT,<sp/>LOGICAL_MERGE_AGGREGATE_TEXT);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(compute_aggregate_expr,<sp/>LOGICAL_AGGREGATE_TEXT,<sp/>LOGICAL_COMPUTE_AGGREGATE_TEXT);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>agg_tree;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agg_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>compute_aggregate_expr);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agg_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.clear();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>merge_aggregate_expr);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(agg_tree));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(merge_aggregate_expr,<sp/>LOGICAL_AGGREGATE_TEXT,<sp/>LOGICAL_MERGE_AGGREGATE_TEXT);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(distribute_aggregate_expr,<sp/>LOGICAL_AGGREGATE_TEXT,<sp/>LOGICAL_DISTRIBUTE_AGGREGATE_TEXT);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(compute_aggregate_expr,<sp/>LOGICAL_AGGREGATE_TEXT,<sp/>LOGICAL_COMPUTE_AGGREGATE_TEXT);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>compute_aggregate_tree;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_aggregate_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>compute_aggregate_expr);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_aggregate_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>distribute_aggregate_tree;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distribute_aggregate_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>distribute_aggregate_expr);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distribute_aggregate_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(compute_aggregate_tree));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.clear();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>merge_aggregate_expr);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(distribute_aggregate_tree));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_join(expr))<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;context-&gt;getTotalNodes()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PartwiseJoin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pairwise_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(pairwise_expr,<sp/>LOGICAL_JOIN_TEXT,<sp/>LOGICAL_PARTWISE_JOIN_TEXT);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>pairwise_expr);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>pairwise_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>join_partition_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(pairwise_expr,<sp/>LOGICAL_JOIN_TEXT,<sp/>LOGICAL_PARTWISE_JOIN_TEXT);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(join_partition_expr,<sp/>LOGICAL_JOIN_TEXT,<sp/>LOGICAL_JOIN_PARTITION_TEXT);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>join_partition_tree;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>join_partition_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>join_partition_expr);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>join_partition_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.clear();</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>pairwise_expr);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(join_partition_tree));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>special<sp/>case<sp/>when<sp/>the<sp/>query<sp/>contains<sp/>UNION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_union(expr)<sp/>&amp;&amp;<sp/>get_named_expression(expr,<sp/></highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LogicalUnion(all=[true])&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>UNION,<sp/>we<sp/>want<sp/>to<sp/>do<sp/>a<sp/>group<sp/>by<sp/>on<sp/>all<sp/>columns<sp/>without<sp/>aggregations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>merge_aggregate_expr<sp/>=<sp/>LOGICAL_MERGE_AGGREGATE_TEXT<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(group=[{*}])&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>compute_aggregate_expr<sp/>=<sp/>LOGICAL_COMPUTE_AGGREGATE_TEXT<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(group=[{*}])&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>distribute_aggregate_expr<sp/>=<sp/>LOGICAL_DISTRIBUTE_AGGREGATE_TEXT<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;(group=[{*}])&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;context-&gt;getTotalNodes()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>root_union_tree;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_union_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>expr);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_union_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>agg_union_tree;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agg_union_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>compute_aggregate_expr);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>agg_union_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(root_union_tree));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.clear();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>merge_aggregate_expr);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(agg_union_tree));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>root_union_tree;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_union_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>expr);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_union_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>compute_aggregate_tree;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_aggregate_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>compute_aggregate_expr);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_aggregate_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(root_union_tree));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>distribute_aggregate_tree;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distribute_aggregate_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>distribute_aggregate_expr);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distribute_aggregate_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(compute_aggregate_tree));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.clear();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>merge_aggregate_expr);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(distribute_aggregate_tree));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_project(expr)<sp/>&amp;&amp;<sp/>is_window_function(expr)<sp/>&amp;&amp;<sp/>first_windowed_call)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!window_expression_contains_partition(expr))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;In<sp/>Window<sp/>Function:<sp/>PARTITION<sp/>BY<sp/>clause<sp/>is<sp/>mandatory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_expression_contains_multiple_diff_over_clauses(expr))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;In<sp/>Window<sp/>Function:<sp/>multiple<sp/>WINDOW<sp/>FUNCTIONs<sp/>with<sp/>different<sp/>OVER<sp/>clauses<sp/>are<sp/>not<sp/>supported<sp/>currently&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sort_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>window_expr<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(window_expr,<sp/>LOGICAL_PROJECT_TEXT,<sp/>LOGICAL_COMPUTE_WINDOW_TEXT);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringUtil::findAndReplaceAll(sort_expr,<sp/>LOGICAL_PROJECT_TEXT,<sp/>LOGICAL_SORT_TEXT);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>sort_tree;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>sort_expr);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sort_tree.add_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>window_tree;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>window_expr);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(sort_tree));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put(</highlight><highlight class="stringliteral">&quot;expr&quot;</highlight><highlight class="normal">,<sp/>expr);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tree.put_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">,<sp/>create_array_tree(window_tree));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform_json_tree(p_tree,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;child<sp/>:<sp/>p_tree.get_child(</highlight><highlight class="stringliteral">&quot;children&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform_json_tree(child.second);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string()<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string(&amp;this-&gt;root,<sp/>0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string(<ref refid="structral_1_1batch_1_1node" kindref="compound">node</ref>*<sp/>p_tree,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>level<sp/>*<sp/>2;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)p_tree-&gt;kernel_unit-&gt;get_type_id())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(p_tree-&gt;kernel_unit-&gt;get_id())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>p_tree-&gt;expr;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;child<sp/>:<sp/>p_tree-&gt;children)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(child.get(),<sp/>level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tuple&lt;std::shared_ptr&lt;ral::cache::graph&gt;,std::size_t&gt;<sp/>build_batch_graph(std::string<sp/>json)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>query_graph<sp/>=<sp/>std::make_shared&lt;ral::cache::graph&gt;();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>max_kernel_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istringstream<sp/>input(json);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::ptree<sp/>p_tree;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::property_tree::read_json(input,<sp/>p_tree);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>transform_json_tree(p_tree);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_kernel_id<sp/>=<sp/>expr_tree_from_json(0,<sp/>p_tree,<sp/>&amp;this-&gt;root,<sp/>0,<sp/>query_graph);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>logger<sp/>=<sp/>spdlog::get(</highlight><highlight class="stringliteral">&quot;batch_logger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(logger){</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;error(</highlight><highlight class="stringliteral">&quot;|||{info}|||||&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">_a=</highlight><highlight class="stringliteral">&quot;In<sp/>build_batch_graph.<sp/>What:<sp/>{}&quot;</highlight><highlight class="normal">_format(e.what()));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;root.kernel_unit<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph-&gt;add_node(this-&gt;root.kernel_unit);<sp/></highlight><highlight class="comment">//<sp/>register<sp/>first<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit(*query_graph,<sp/>&amp;this-&gt;root,<sp/>this-&gt;root.children);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(query_graph,<sp/>max_kernel_id);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>visit(<ref refid="classral_1_1cache_1_1graph" kindref="compound">ral::cache::graph</ref>&amp;<sp/>query_graph,<sp/><ref refid="structral_1_1batch_1_1node" kindref="compound">node</ref><sp/>*<sp/>parent,<sp/>std::vector&lt;std::shared_ptr&lt;node&gt;&gt;&amp;<sp/>children)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>children.size();<sp/>index++)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>child<sp/><sp/>=<sp/><sp/>children[index];</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit(query_graph,<sp/>child.get(),<sp/>child-&gt;children);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>port_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>config_options<sp/>=<sp/>context-&gt;getConfigOptions();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>join_partition_size_thresh<sp/>=<sp/>400000000;<sp/></highlight><highlight class="comment">//<sp/>400<sp/>MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;JOIN_PARTITION_SIZE_THRESHOLD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>join_partition_size_thresh<sp/>=<sp/>std::stoull(config_options[</highlight><highlight class="stringliteral">&quot;JOIN_PARTITION_SIZE_THRESHOLD&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>child_kernel_type<sp/>=<sp/>child-&gt;kernel_unit-&gt;get_type_id();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parent_kernel_type<sp/>=<sp/>parent-&gt;kernel_unit-&gt;get_type_id();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(children.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>index_char<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port_name<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;input_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port_name.push_back(index_char);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_kernel_type<sp/>==<sp/>kernel_type::PartwiseJoinKernel)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>join_type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classral_1_1batch_1_1PartwiseJoin" kindref="compound">PartwiseJoin</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parent-&gt;kernel_unit.get())-&gt;get_join_type();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_concat_all<sp/>=<sp/>join_type<sp/>==<sp/>ral::batch::RIGHT_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::OUTER_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::CROSS_JOIN;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>right_concat_all<sp/>=<sp/>join_type<sp/>==<sp/>ral::batch::LEFT_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::OUTER_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::CROSS_JOIN;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>concat_all<sp/>=<sp/>index<sp/>==<sp/>0<sp/>?<sp/>left_concat_all<sp/>:<sp/>right_concat_all;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>join_cache_machine_config<sp/>=<sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref>{.type<sp/>=<sp/>CacheType::CONCATENATING,<sp/>.num_partitions<sp/>=<sp/>1,<sp/>.context<sp/>=<sp/>context-&gt;clone(),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.concat_cache_num_bytes<sp/>=<sp/>join_partition_size_thresh,<sp/>.concat_all<sp/>=<sp/>concat_all};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/>parent-&gt;kernel_unit,<sp/>port_name,<sp/>join_cache_machine_config));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>cache_machine_config;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_machine_config.context<sp/>=<sp/>context-&gt;clone();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/>parent-&gt;kernel_unit,<sp/>port_name,<sp/>cache_machine_config));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_kernel_type<sp/>==<sp/>kernel_type::JoinPartitionKernel<sp/>&amp;&amp;<sp/>parent_kernel_type<sp/>==<sp/>kernel_type::PartwiseJoinKernel)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>join_type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classral_1_1batch_1_1PartwiseJoin" kindref="compound">PartwiseJoin</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(parent-&gt;kernel_unit.get())-&gt;get_join_type();</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left_concat_all<sp/>=<sp/>join_type<sp/>==<sp/>ral::batch::RIGHT_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::OUTER_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::CROSS_JOIN;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>right_concat_all<sp/>=<sp/>join_type<sp/>==<sp/>ral::batch::LEFT_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::OUTER_JOIN<sp/>||<sp/>join_type<sp/>==<sp/>ral::batch::CROSS_JOIN;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>left_cache_machine_config<sp/>=<sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref>{.type<sp/>=<sp/>CacheType::CONCATENATING,<sp/>.num_partitions<sp/>=<sp/>1,<sp/>.context<sp/>=<sp/>context-&gt;clone(),</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.concat_cache_num_bytes<sp/>=<sp/>join_partition_size_thresh,<sp/>.concat_all<sp/>=<sp/>left_concat_all};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>right_cache_machine_config<sp/>=<sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref>{.type<sp/>=<sp/>CacheType::CONCATENATING,<sp/>.num_partitions<sp/>=<sp/>1,<sp/>.context<sp/>=<sp/>context-&gt;clone(),</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.concat_cache_num_bytes<sp/>=<sp/>join_partition_size_thresh,<sp/>.concat_all<sp/>=<sp/>right_concat_all};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;output_a&quot;</highlight><highlight class="normal">,<sp/>parent-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;input_a&quot;</highlight><highlight class="normal">,<sp/>left_cache_machine_config));</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;output_b&quot;</highlight><highlight class="normal">,<sp/>parent-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;input_b&quot;</highlight><highlight class="normal">,<sp/>right_cache_machine_config));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((child_kernel_type<sp/>==<sp/>kernel_type::SortAndSampleKernel<sp/>&amp;&amp;<sp/>parent_kernel_type<sp/>==<sp/>kernel_type::PartitionKernel)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(child_kernel_type<sp/>==<sp/>kernel_type::SortAndSampleKernel<sp/>&amp;&amp;<sp/>parent_kernel_type<sp/>==<sp/>kernel_type::PartitionSingleNodeKernel))<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>cache_machine_config;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_machine_config.context<sp/>=<sp/>context-&gt;clone();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;output_a&quot;</highlight><highlight class="normal">,<sp/>parent-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;input_a&quot;</highlight><highlight class="normal">,<sp/>cache_machine_config));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;output_b&quot;</highlight><highlight class="normal">,<sp/>parent-&gt;kernel_unit,<sp/></highlight><highlight class="stringliteral">&quot;input_b&quot;</highlight><highlight class="normal">,<sp/>cache_machine_config));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((child_kernel_type<sp/>==<sp/>kernel_type::PartitionKernel<sp/>&amp;&amp;<sp/>parent_kernel_type<sp/>==<sp/>kernel_type::MergeStreamKernel)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(child_kernel_type<sp/>==<sp/>kernel_type::PartitionSingleNodeKernel<sp/>&amp;&amp;<sp/>parent_kernel_type<sp/>==<sp/>kernel_type::MergeStreamKernel))<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_num_order_by_partitions_per_node<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;MAX_NUM_ORDER_BY_PARTITIONS_PER_NODE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_num_order_by_partitions_per_node<sp/>=<sp/>std::stoi(config_options[</highlight><highlight class="stringliteral">&quot;MAX_NUM_ORDER_BY_PARTITIONS_PER_NODE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">ral::cache::cache_settings</ref><sp/>cache_machine_config;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_machine_config.type<sp/>=<sp/>ral::cache::CacheType::FOR_EACH;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_machine_config.num_partitions<sp/>=<sp/>max_num_order_by_partitions_per_node;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_machine_config.context<sp/>=<sp/>context-&gt;clone();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/>parent-&gt;kernel_unit,<sp/>cache_machine_config));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(child_kernel_type<sp/>==<sp/>kernel_type::TableScanKernel<sp/>||<sp/>child_kernel_type<sp/>==<sp/>kernel_type::BindableTableScanKernel)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>concat_cache_num_bytes<sp/>=<sp/>400000000;<sp/></highlight><highlight class="comment">//<sp/>400<sp/>MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_options<sp/>=<sp/>context-&gt;getConfigOptions();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>config_options.find(</highlight><highlight class="stringliteral">&quot;MAX_DATA_LOAD_CONCAT_CACHE_BYTE_SIZE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>config_options.end()){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>concat_cache_num_bytes<sp/>=<sp/>std::stoull(config_options[</highlight><highlight class="stringliteral">&quot;MAX_DATA_LOAD_CONCAT_CACHE_BYTE_SIZE&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>cache_machine_config<sp/>=<sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref>{.type<sp/>=<sp/>CacheType::CONCATENATING,<sp/>.num_partitions<sp/>=<sp/>1,<sp/>.context<sp/>=<sp/>context-&gt;clone(),</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.concat_cache_num_bytes<sp/>=<sp/>concat_cache_num_bytes,<sp/>.concat_all<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/>parent-&gt;kernel_unit,<sp/>cache_machine_config));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structral_1_1cache_1_1cache__settings" kindref="compound">cache_settings</ref><sp/>cache_machine_config;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_machine_config.context<sp/>=<sp/>context-&gt;clone();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>query_graph.addPair(<ref refid="classral_1_1cache_1_1kpair" kindref="compound">ral::cache::kpair</ref>(child-&gt;kernel_unit,<sp/>parent-&gt;kernel_unit,<sp/>cache_machine_config));</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal">};</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>batch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>ral</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/tom/Documents/programming/romulo_blazingsql/blazingsql/engine/src/execution_graph/logic_controllers/PhysicalPlanGenerator.h"/>
  </compounddef>
</doxygen>

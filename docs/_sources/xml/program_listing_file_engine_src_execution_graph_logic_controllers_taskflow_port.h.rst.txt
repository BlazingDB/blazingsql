
.. _program_listing_file_engine_src_execution_graph_logic_controllers_taskflow_port.h:

Program Listing for File port.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_src_execution_graph_logic_controllers_taskflow_port.h>` (``engine/src/execution_graph/logic_controllers/taskflow/port.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <vector>
   #include <memory>
   #include <string>
   #include "execution_graph/logic_controllers/CacheMachine.h"
   
   namespace ral {
   namespace cache { 
   enum kstatus { stop, proceed };
   
   //static const std::uint32_t MAX_SYSTEM_SIGNAL(0xfff);
   //enum signal : std::uint32_t { none = 0, quit, term, eof = MAX_SYSTEM_SIGNAL };
   
   template <class PORT, class... PORTNAMES>
   struct port_helper {};
   
   template <class PORT>
   struct port_helper<PORT> {
       static void register_port(PORT & /*port*/) { return; }
   };
   
   class port;
   
   template <class PORT, class PORTNAME, class... PORTNAMES>
   struct port_helper<PORT, PORTNAME, PORTNAMES...> {
       static void register_port(PORT & port, PORTNAME && portname, PORTNAMES &&... portnames) {
           port.register_port(portname);
           port_helper<PORT, PORTNAMES...>::register_port(port, std::forward<PORTNAMES>(portnames)...);
           return;
       }
   };
   
   template <class PORT, class... PORTNAMES>
   static void kick_port_helper(PORT & port, PORTNAMES &&... ports) {
       port_helper<PORT, PORTNAMES...>::register_port(port, std::forward<PORTNAMES>(ports)...);
       return;
   }
   
   
   class kernel;
   
   class port {
   public:
       port(kernel * const k) { this->kernel_ = k; }
   
       virtual ~port() = default;
   
       template <class... PORTNAMES>
       void add_port(PORTNAMES &&... ports) {
           kick_port_helper<port, PORTNAMES...>((*this), std::forward<PORTNAMES>(ports)...);
       }
   
       size_t count() const { return cache_machines_.size(); }
   
       void register_port(std::string port_name);
   
       std::shared_ptr<CacheMachine> & get_cache(const std::string & port_name = "");
   
       void register_cache(const std::string & port_name, std::shared_ptr<CacheMachine> cache_machine);
   
       void finish();
   
       std::shared_ptr<CacheMachine> & operator[](const std::string & port_name) { return cache_machines_[port_name]; }
   
       bool all_finished();
   
       bool is_finished(const std::string & port_name);
   
       uint64_t total_bytes_added();
   
       uint64_t total_rows_added();
   
       uint64_t total_batches_added();
   
       uint64_t get_num_rows_added(const std::string & port_name);
   
   
   public:
       kernel * kernel_;
       std::map<std::string, std::shared_ptr<CacheMachine>> cache_machines_;
   };
    
   }  // namespace cache
   }  // namespace ral

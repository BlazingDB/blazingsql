
.. _program_listing_file_engine_src_io_data_provider_GDFDataProvider.cpp:

Program Listing for File GDFDataProvider.cpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_engine_src_io_data_provider_GDFDataProvider.cpp>` (``engine/src/io/data_provider/GDFDataProvider.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * uridataprovider.cpp
    *
    *  Created on: Nov 29, 2018
    *      Author: felipe
    *
    * 2019 Percy Camilo Trive√±o Aucahuasi <percy@blazingsql.com>
    */
   
   #include "GDFDataProvider.h"
   #include "Config/BlazingContext.h"
   #include "arrow/status.h"
   #include <blazingdb/io/FileSystem/Uri.h>
   #include <blazingdb/io/Util/StringUtil.h>
   
   using namespace fmt::literals;
   
   namespace ral {
   namespace io {
   
   gdf_data_provider::gdf_data_provider(std::vector<ral::frame::BlazingTableView> table_views, std::vector< std::map<std::string,std::string> > column_values)
   : table_views(table_views), current_file(0), column_values(column_values)
   {
   
   }
   
   size_t gdf_data_provider::get_num_handles(){
       return table_views.size();
   }
   
   
   std::shared_ptr<data_provider> gdf_data_provider::clone() {
       return std::make_shared<gdf_data_provider>(this->table_views, this->column_values);
   }
   
   gdf_data_provider::~gdf_data_provider() {
   
   }
   
   bool gdf_data_provider::has_next() { return this->current_file < table_views.size(); }
   
   void gdf_data_provider::reset() {
       this->current_file = 0;
   }
   
   std::vector<data_handle> gdf_data_provider::get_some(std::size_t num_files, bool open_file){
       std::size_t count = 0;
       std::vector<data_handle> file_handles;
       while(this->has_next() && count < num_files) {
           auto handle = this->get_next(open_file);
           if (handle.is_valid())
               file_handles.emplace_back(std::move(handle));
           count++;
       }
       this->current_file += count;
       return file_handles;
   }
   
   
   data_handle gdf_data_provider::get_next(bool /*open_file*/) {
       if(column_values.size() == 0) {
           data_handle handle(nullptr,{},Uri("gdf"),table_views[current_file]);
           current_file++;
           return handle;
       } else {
           data_handle handle(nullptr,column_values[current_file],Uri("gdf"),table_views[current_file]);
           current_file++;
           return handle;
       }
   }
   
   void gdf_data_provider::close_file_handles() {
   
   }
   
   std::vector<std::string> gdf_data_provider::get_errors() { return {}; }
   
   } /* namespace io */
   } /* namespace ral */

#Boolean Test Suite

TEST_SUITE:
  SETUP:
    APPLY_ORDER: True
    USE_PERCENTAGE: False
    ACCEPTABLE_DIFFERENCE: 0.01
    COMPARE_WITH: drill
    SKIP_WITH:
      - SINGLENODE:
        - DASK_CUDF
      - MULTINODE:
        - WITH_NULLS:
          - CUDF
      - WITH_NULLS:
        - DASK_CUDF
      - JSON
      - ORC
      - PARQUET
      - CUDF

  TEST_01:
    SQL: |
        select * from bool_orders
                    order by o_orderkey, o_custkey limit 300
    SQL_WITH_NULLS: |
        select o_orderkey, o_custkey, o_totalprice, o_confirmed from bool_orders
                        order by o_orderkey, o_totalprice limit 300
    SETUP:
      APPLY_ORDER: False
      

  TEST_02:
    SQL: |
        select o_custkey, o_confirmed from bool_orders
                    where o_confirmed is null order by o_custkey limit 30
    SETUP:
      APPLY_ORDER: False
      ACCEPTABLE_DIFFERENCE: 0

  TEST_03:
    SQL: |
      select o_custkey, 0.75 * o_totalprice, o_confirmed
                    from bool_orders
                    where o_confirmed = true
                    order by o_custkey, o_orderKey limit 20
    SETUP:
      APPLY_ORDER: False

  TEST_04:
    SQL: |
        select o_custkey, o_confirmed from bool_orders
                    where o_confirmed is not NULL
                    order by o_custkey, o_confirmed desc limit 25
    SETUP:
      APPLY_ORDER: False
      ACCEPTABLE_DIFFERENCE: 0

  TEST_05:
    SQL: |
        select o_custkey, 0.95 * o_totalprice, o_confirmed
                    from bool_orders where o_confirmed is null
                    order by o_totalprice limit 400

  TEST_06:
    SQL: |
      select o_custkey, 0.75 * o_totalprice as proffit
                    from bool_orders
                    where o_custkey < 300 and o_confirmed = False

  TEST_07:
    SQL: |
      select o_custkey, 0.75 * o_totalprice as proffit
                    from bool_orders
                    where o_custkey < 300 and o_confirmed is not NULL
                    order by o_custkey, o_orderkey limit 200
    SETUP:
      APPLY_ORDER: False

  TEST_08:
    SQL: |
      select count(o_orderstatus) from bool_orders
                    where o_orderstatus <> 'O' and o_confirmed = true
    SETUP:
      ACCEPTABLE_DIFFERENCE: 0

  TEST_09:
    SQL: |
        select sum(o_orderkey)/count(o_orderkey), max(o_totalprice)
                    from bool_orders where o_confirmed = true
                    and o_orderkey < 2500
    SETUP:
      USE_PERCENTAGE: True

  # TEST_10:
  #   SQL: |
  #       select sum(o_orderkey)/count(o_orderkey),
  #                       max(o_totalprice)
  #                   from bool_orders
  #                   where o_confirmed IS NULL and o_orderkey < 2500
  
  TEST_11:
    SQL: |
        select o_custkey, min(o_totalprice) from bool_orders
                   where o_custkey < 300 and o_confirmed is not NULL
                   group by o_custkey

  # TEST_12:
  #   SQL: |
  #       select count(o_custkey), max(o_totalprice),
  #                     min(o_totalprice), sum(o_totalprice)
  #                     /count(o_totalprice) from bool_orders
  #                     group by o_custkey

  # TEST_13:
  #   SQL: |
  #       select count(o_custkey), o_orderkey,
  #                       o_confirmed from bool_orders
  #                       where o_orderkey < 100 and o_confirmed = FALSE
  #                       group by o_orderkey, (o_orderkey + o_custkey),
  #                       o_confirmed
  #   SETUP:
  #     ACCEPTABLE_DIFFERENCE: 0

  # TEST_14:
  #   SQL: |
  #       select o.o_custkey, c.c_name as customer_name
  #                         from bool_orders as o inner join customer as c
  #                         on c.c_custkey = o.o_custkey
  #                         where o.o_confirmed = False
  #                         and o.o_orderstatus <> 'O'
  #   SETUP:
  #     ACCEPTABLE_DIFFERENCE: 0

  # TEST_15:
  #   SQL: |
  #       select o.o_custkey, c.c_name, n.n_regionkey
  #                         from nation as n inner join customer as c
  #                         on n.n_nationkey = c.c_nationkey
  #                         inner join bool_orders as o on
  #                         c.c_custkey = o.o_custkey
  #                         where o.o_confirmed = False
  #                         and o.o_orderstatus <> 'O'
  #   SETUP:
  #     ACCEPTABLE_DIFFERENCE: 0

  # TEST_16:
  #   SQL: |
  #       select o.o_custkey, c.c_name, n.n_regionkey
  #                         from customer as c inner join bool_orders as o
  #                         on c.c_custkey = o.o_custkey
  #                         inner join nation as n
  #                         on n.n_nationkey = c.c_nationkey
  #                         where o.o_confirmed = false
  #                         and o.o_orderstatus <> 'O'
  #   SETUP:
  #     ACCEPTABLE_DIFFERENCE: 0

  # TEST_17:
  #   SQL: |
  #       select count(o_custkey), max(o_totalprice),
  #                         min(o_totalprice), sum(o_totalprice)
  #                         /count(o_totalprice)
  #                         from bool_orders group by o_totalprice,
  #                         o_custkey, o_orderkey order by o_totalprice,
  #                              o_custkey, o_orderkey desc
  #   SETUP:
  #     APPLY_ORDER: False

  TEST_18:
    SQL: |
        select o_orderkey, o_confirmed from bool_orders
                        where o_confirmed IS TRUE
                        order by o_orderkey limit 15
    SETUP:
      APPLY_ORDER: False

  TEST_19:
    SQL: |
        select o_orderkey, o_confirmed from bool_orders
                        where o_confirmed IS FALSE
                        order by o_orderkey limit 15
    SETUP:
      APPLY_ORDER: False

  TEST_20:
    SQL: |
        select o_orderkey, o_confirmed from bool_orders
                        where o_confirmed IS NOT TRUE
                        order by o_orderkey limit 15
    SETUP:
      APPLY_ORDER: False

  TEST_21:
    SQL: |
        select o_orderkey, o_confirmed from bool_orders
                        where o_confirmed IS NOT FALSE
                        order by o_orderkey limit 15
    SETUP:
      APPLY_ORDER: False

  TEST_22:
    SQL: |
        select o_orderkey, o_confirmed from bool_orders
            where o_confirmed IS NOT FALSE and o_confirmed IS FALSE
            order by o_orderkey limit 15
    SETUP:
      APPLY_ORDER: False

  TEST_23:
    SQL: |
        select count(*) from bool_orders where o_confirmed IS TRUE

  TEST_24:
    SQL: |
        select count(*) from bool_orders where o_confirmed IS FALSE

  TEST_25:
    SQL: |
        select count(*) from bool_orders where o_confirmed IS NOT TRUE

  TEST_26:
    SQL: |
        select count(*) from bool_orders where o_confirmed IS NOT FALSE
# Window Functions With No Partition Suite

TEST_SUITE:
  SETUP:
    APPLY_ORDER: True
    USE_PERCENTAGE: False
    ACCEPTABLE_DIFFERENCE: 0.01
    COMPARE_WITH: drill
    SKIP_WITH:
      - SINGLENODE:
        - DASK_CUDF
      - MULTINODE:
        - WITH_NULLS:
          - CUDF
      - WITH_NULLS:
        - DASK_CUDF
      - JSON

# ------------ ROWS bounding ----------------

  TEST_01:
    SQL: |
      select min(n_nationkey) over
                            (
                                order by n_name
                                ROWS BETWEEN 1 PRECEDING
                                AND 1 FOLLOWING
                            ) min_val,
                        n_nationkey, n_regionkey, n_name
                        from nation
    SETUP:
      COMPARE_WITH: spark
      APPLY_ORDER: False

  TEST_02:
    SQL: |
      select min(o_orderkey) over
                            (
                                order by o_totalprice
                                ROWS BETWEEN 2 PRECEDING
                                AND 1 FOLLOWING
                            ) min_keys, 
                            max(o_orderkey) over
                            (
                                order by o_totalprice
                                ROWS BETWEEN 2 PRECEDING
                                AND 1 FOLLOWING
                            ) max_keys, o_orderkey, o_orderpriority
                        from orders
                        where o_orderpriority <> '2-HIGH'
                        and o_clerk = 'Clerk#000000880'
                        and o_orderstatus is not null
                        and o_totalprice is not null
                        order by o_orderstatus, o_totalprice
                        limit 50
    SETUP:
      COMPARE_WITH: spark

  TEST_03:
    SQL: |
      with new_nation as (
                    select n.n_nationkey as n_natio1,
                        n.n_name as n_nam1,
                        n.n_regionkey as n_region1
                    from nation as n
                    inner join region as r
                    on n.n_nationkey = r.r_regionkey
                )
                select avg(cast(nn.n_natio1 as double)) over 
                    (
                        order by nn.n_nam1
                        ROWS BETWEEN 3 PRECEDING
                        AND 2 FOLLOWING
                    ) avg_keys,
                    nn.n_natio1, nn.n_nam1, nn.n_region1
                from new_nation nn
                order by nn.n_natio1, avg_keys
    SETUP:
      COMPARE_WITH: spark

  TEST_04:
    SQL: |
      select max(l_partkey) over
                            (
                                order by l_extendedprice desc, l_orderkey, l_quantity
                                ROWS BETWEEN 6 PRECEDING
                                AND 2 FOLLOWING
                            ) max_keys,
                            l_linestatus, l_extendedprice
                        from lineitem
                        where l_shipmode not in ('MAIL', 'SHIP', 'AIR')
                        and l_linestatus = 'F'
                        and l_extendedprice is not null
                        order by l_extendedprice, l_orderkey, max_keys
                        limit 50
    SETUP:
      COMPARE_WITH: spark

  TEST_05:
    SQL: |
      select  l.l_orderkey, l.l_linenumber, l.l_suppkey, l.l_partkey, c.c_custkey,
                            max(l.l_partkey) over
                            (
                                order by l.l_orderkey, l.l_linenumber, l.l_suppkey
                                ROWS BETWEEN 6 PRECEDING
                                AND 2 FOLLOWING
                            ) max_pkeys,
                            max(c.c_custkey) over
                            (
                                order by  l.l_orderkey, l.l_linenumber, l.l_suppkey
                                ROWS BETWEEN 6 PRECEDING
                                AND 2 FOLLOWING
                            ) max_cust
                            
                        from lineitem as l
                        inner join orders as o on o.o_orderkey = l.l_orderkey
                        inner join customer as c on c.c_custkey = o.o_custkey
                        where l.l_quantity = 1 and c.c_custkey < 10000
                        order by l.l_orderkey, l.l_linenumber, l.l_partkey, c.c_custkey                        
    SETUP:
      COMPARE_WITH: spark
      APPLY_ORDER: False

  TEST_06:
    SQL: |
      select max(l_partkey) over
                        (
                            order by l_extendedprice desc, l_orderkey NULLS LAST,
                            l_quantity NULLS FIRST
                            ROWS BETWEEN 6 PRECEDING
                            AND 2 FOLLOWING
                        ) max_keys,
                        l_linestatus, l_extendedprice
                    from lineitem
                    where l_shipmode not in ('MAIL', 'SHIP', 'AIR')
                    and l_linestatus = 'F'
                    and l_extendedprice is not null
                    order by l_extendedprice, l_orderkey, max_keys
                    limit 50
    SETUP:
      COMPARE_WITH: spark

  TEST_07:
    SQL: |
      select max(l_partkey) over
                        (
                            order by l_extendedprice DESC NULLS FIRST,
                            l_orderkey DESC NULLS LAST,
                            l_quantity NULLS FIRST
                            ROWS BETWEEN 6 PRECEDING
                            AND 2 FOLLOWING
                        ) max_keys,
                        l_linestatus, l_extendedprice
                    from lineitem
                    where l_shipmode not in ('MAIL', 'SHIP', 'AIR')
                    and l_linestatus = 'F'
                    and l_extendedprice is not null
                    order by l_extendedprice, l_orderkey, max_keys
                    limit 50
    SETUP:
      COMPARE_WITH: spark
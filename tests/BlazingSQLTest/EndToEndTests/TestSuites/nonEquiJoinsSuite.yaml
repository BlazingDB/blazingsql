# Non-EquiJoin Queries Suite

TEST_SUITE:
  SETUP:
    APPLY_ORDER: True
    USE_PERCENTAGE: False
    ACCEPTABLE_DIFFERENCE: 0.001
    COMPARE_WITH: drill
    SKIP_WITH:
      - SINGLENODE:
        - DASK_CUDF
      - MULTINODE:
        - WITH_NULLS:
          - CUDF
      - WITH_NULLS:
        - DASK_CUDF
      - JSON

  TEST_01:
    SQL: |
        select l.l_orderkey, l.l_linenumber from lineitem as l
            inner join orders as o on l.l_orderkey = o.o_orderkey
            and l.l_commitdate < o.o_orderdate
            and l.l_receiptdate > o.o_orderdate

  TEST_02:
    SQL: |
        select l.l_orderkey, l.l_linenumber from lineitem as l
                            inner join orders as o
                            on l.l_commitdate > o.o_orderdate
                            and l.l_orderkey = o.o_orderkey

  TEST_03:
    SQL: |
        select l.l_orderkey, l.l_linenumber from lineitem as l
                                inner join orders as o on l.l_orderkey = o.o_orderkey
                                where o.o_orderkey < 10000 and
                                (o.o_custkey > 1000 or l.l_partkey < 10000)


  TEST_04:
    SQL: |
            select l.l_orderkey, l.l_linenumber from lineitem as l
                        inner join orders as o
                        on l.l_receiptdate > o.o_orderdate
                        and l.l_orderkey = o.o_orderkey
                        where o.o_orderkey < 100000
                        and (o.o_custkey > 1000 or l.l_partkey < 10000)

  TEST_05:
    SQL: |
            select p.p_brand, p.p_type, p.p_size,
                            count(ps.ps_suppkey) as supplier_cnt
                        from partsupp ps
                        inner join part p on p.p_partkey = ps.ps_partkey
                        where
                            p.p_brand <> 'Brand#45'
                            and p.p_size in (49, 14, 23, 45, 19, 3, 36, 9)
                            and ps.ps_supplycost < p.p_retailprice
                        group by
                            p.p_brand, p.p_type, p.p_size
                        order by
                            supplier_cnt desc, p.p_brand, p.p_type, p.p_size

  TEST_06:
    SQL: |
            select sum(l.l_extendedprice) / 12.0 as avg_yearly
                        from lineitem l
                        inner join part p on p.p_partkey = l.l_partkey
                        inner join partsupp ps on ps.ps_partkey = l.l_partkey
                        where
                        (
                            p.p_brand = 'Brand#23'
                            or p.p_container = 'MED BOX'
                        )
                        or l.l_quantity < ps.ps_supplycost

  TEST_07:
    SQL: |
            select sum(c.c_custkey) / count(c.c_custkey),
                            sum(c.c_nationkey) / count(c.c_nationkey),
                            n.n_regionkey
                        from customer as c
                        inner join nation as n
                        on c.c_nationkey = n.n_nationkey
                        inner join supplier as s
                        on c.c_nationkey = s.s_nationkey
                        where c.c_acctbal <= s.s_acctbal
                        and (
                            s.s_suppkey >= c.c_nationkey
                            OR s.s_suppkey < 1289
                        )
                        group by n.n_regionkey

  TEST_08:
    SQL: |
                SELECT SUM(c.c_acctbal)
                FROM
                    orders o,
                    customer c
                WHERE c.c_custkey = o.o_custkey
                AND o.o_orderstatus = 'F'
                AND
                (
                    (
                        o.o_orderpriority = '2-HIGH'
                        AND 100.0 <= c.c_acctbal
                    )
                    OR
                    (
                        o.o_orderpriority = '2-HIGH'
                        AND 50.0 <= c.c_acctbal
                    )
                    OR
                    (
                        o.o_orderpriority = '2-HIGH'
                        AND 150.0 <= c.c_acctbal
                    )
                )
    SETUP:
      ACCEPTABLE_DIFFERENCE: 0.01

  TEST_09:
    SQL: |
            select o2.o_orderkey as okey2, o1.o_orderkey as okey1 from orders as o1
                    inner join orders as o2 on o1.o_orderkey = o2.o_orderkey
                    and o1.o_orderkey < 10000
    SETUP:
      COMPARE_WITH: spark

  TEST_10:
    SQL: |
            select o2.o_orderkey as okey2, o1.o_orderkey as okey1 from orders as o1
                    inner join orders as o2 on o1.o_orderkey = o2.o_orderkey
                    and o2.o_orderkey < 10000
    SETUP:
      COMPARE_WITH: spark

  TEST_11:
    SQL: |
        select o2.o_orderkey as okey2, o1.o_orderkey as okey1, o2.o_custkey from orders as o1
                    inner join orders as o2 on o1.o_orderkey = o2.o_orderkey
                    and o1.o_orderkey < o2.o_custkey
    SETUP:
      COMPARE_WITH: spark


  TEST_12:
    SQL: |
        select o1.o_orderkey as okey1, o2.o_orderkey as okey2, o2.o_custkey from orders as o1
                    inner join orders as o2 on o1.o_orderkey = o2.o_orderkey + 6
                    and o1.o_clerk < o2.o_clerk
    SETUP:
      COMPARE_WITH: spark


  TEST_13:
    SQL: |
        select o1.o_orderkey as okey1, o1.o_custkey as ocust1, o1.o_orderkey - o1.o_custkey as diffy,
                    o2.o_orderkey as okey2, o2.o_custkey as ocust2, o2.o_orderkey + o2.o_custkey as summy from orders as o1
                    inner join orders as o2 on o1.o_orderkey = o2.o_orderkey + o2.o_custkey
                    and o1.o_orderkey - o1.o_custkey < o2.o_orderkey
    SETUP:
      COMPARE_WITH: spark

# TODO: https://github.com/BlazingDB/blazingsql/issues/1530
#  TEST_14:
#    SQL: |
#        select df1.n_nationkey as df1_nkey, df1.n_regionkey as df1_rkey,
#                             df2.n_nationkey as df2_nkey, df2.n_regionkey as df2_rkey
#                        from nation df1 inner join nation df2
#                        on df1.n_nationkey = df2.n_regionkey
#                        where df1.n_regionkey IS NOT DISTINCT FROM df2.n_regionkey
#    SETUP:
#      COMPARE_WITH: spark

# TODO: https://github.com/BlazingDB/blazingsql/issues/1530
#  TEST_15:
#    SQL: |
#        select df1.n_nationkey as df1_nkey, df1.n_regionkey as df1_rkey,
#                            df2.n_nationkey as df2_nkey, df2.n_regionkey as df2_rkey
#                        from nation df1 inner join nation df2
#                        on df1.n_nationkey = df2.n_regionkey
#                        where df1.n_regionkey IS NOT DISTINCT FROM df2.n_regionkey
#                        and df1.n_nationkey IS NOT DISTINCT FROM df2.n_nationkey
#    SETUP:
#      COMPARE_WITH: spark

  TEST_16:
    SQL: |
        select o1.o_orderkey as okey1, o1.o_custkey as ocust1, o1.o_orderkey - o1.o_custkey as diffy,
                            o2.o_orderkey as okey2, o2.o_custkey as ocust2, o2.o_orderkey + o2.o_custkey as summy
                        from orders as o1
                        inner join orders as o2 on o1.o_orderkey = o2.o_orderkey + o2.o_custkey
                        and o1.o_orderkey - o1.o_custkey < o2.o_orderkey
                        and o1.o_orderkey IS NOT DISTINCT FROM o2.o_custkey
    SETUP:
      COMPARE_WITH: spark

  TEST_17:
    SQL: |
        select o2.o_orderkey as okey2, o1.o_orderkey as okey1, o2.o_custkey from orders as o1
                    inner join orders as o2 on o1.o_orderkey = o2.o_orderkey
                    and o1.o_orderkey < o2.o_custkey
                    and o1.o_orderkey IS NOT DISTINCT FROM o2.o_custkey

    SETUP:
      COMPARE_WITH: spark

  TEST_18:
    SQL: |
        select l.l_orderkey, l.l_partkey, l.l_suppkey, o.o_orderkey, o.o_custkey
                        from lineitem as l inner join orders as o
                        on l.l_commitdate > o.o_orderdate
                        and l.l_orderkey = o.o_orderkey
                        and l.l_partkey IS NOT DISTINCT FROM o.o_custkey
    SETUP:
      COMPARE_WITH: spark